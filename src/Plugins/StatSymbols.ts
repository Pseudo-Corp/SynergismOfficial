import type { PostProcessorModule } from 'i18next'

export let showStatSymbol = false

export const enableStatSymbols = (): void => {
  showStatSymbol = true
}

const KEYWORD_SYMBOLS: Record<string, string> = {
  'Offering': '‚ò§',
  'Obtainium': '‚ùç',
  'Salvage': '‚ôª',
  'Ambrosia Luck': '‚òò',
  'Red Luck': '‚öÖ',
  'Ambrosia Bar Point': '‚óä',
  'Red Bar Point': '‚ùñ',
  'Blueberries': '‚òå',
  'Quark': '‚ùÇ',
  'Cube': '‚¨¢',
  'Tesseract': '‚¨¢',
  'Hypercube': '‚¨¢',
  'Hepteract': '‚¨¢',
  'Octeract': '‚¨¢',
  'Rune Power': 'üúá',
  'Blessing Power': 'üúÜ',
  'Spirit Power': 'üúà',
  'Talisman Power': '◊ú',
  'Rune Coefficient': '‚±≠',
  'Global Speed': '‚ßñ',
  'Ascension Speed': '‚ßó',
  'Research': '‚öõ',
  'Platonic': '‚úû',
  'Ant ELO': '‚òá',
  'Immortal ELO': '‚õâ',
  'Reborn ELO': 'üùò',
  'Ant Speed': '‚â´',
  'Ant Sacrifice': '‚§¨',
  'Stage': '‚éç'
}

const reg = new RegExp(Object.keys(KEYWORD_SYMBOLS).join('|'), 'g')

export default {
  type: 'postProcessor',
  name: 'StatSymbols',
  process: (value: string): string => {
    if (!showStatSymbol) {
      return value
    }

    const iterable = value.matchAll(reg)
    let offset = 0

    for (const iter of iterable) {
      value = `${value.substring(0, iter.index + offset)}${KEYWORD_SYMBOLS[iter[0]]} ${
        value.slice(iter.index + offset)
      }`
      // Each time we replace the value, we add characters (space and the length of the symbol) but the indices are based on the original string
      offset += 1 + KEYWORD_SYMBOLS[iter[0]].length
      // Fun fact! 'üùò' has a length of 2.
    }

    return value
  }
} satisfies PostProcessorModule
