/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ([
/* 0 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isTesting": () => /* binding */ isTesting,
/* harmony export */   "intervalHold": () => /* binding */ intervalHold,
/* harmony export */   "interval": () => /* binding */ interval,
/* harmony export */   "clearInt": () => /* binding */ clearInt,
/* harmony export */   "player": () => /* binding */ player,
/* harmony export */   "blankSave": () => /* binding */ blankSave,
/* harmony export */   "saveSynergy": () => /* binding */ saveSynergy,
/* harmony export */   "loadSynergy": () => /* binding */ loadSynergy,
/* harmony export */   "format": () => /* binding */ format,
/* harmony export */   "formatTimeShort": () => /* binding */ formatTimeShort,
/* harmony export */   "updateCubesPerSec": () => /* binding */ updateCubesPerSec,
/* harmony export */   "updateAllTick": () => /* binding */ updateAllTick,
/* harmony export */   "updateAllMultiplier": () => /* binding */ updateAllMultiplier,
/* harmony export */   "multipliers": () => /* binding */ multipliers,
/* harmony export */   "resourceGain": () => /* binding */ resourceGain,
/* harmony export */   "resetCurrency": () => /* binding */ resetCurrency,
/* harmony export */   "resetCheck": () => /* binding */ resetCheck,
/* harmony export */   "resetConfirmation": () => /* binding */ resetConfirmation,
/* harmony export */   "updateAll": () => /* binding */ updateAll,
/* harmony export */   "constantIntervals": () => /* binding */ constantIntervals,
/* harmony export */   "createTimer": () => /* binding */ createTimer,
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lz_string__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Utility__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _Challenges__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _Upgrades__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(18);
/* harmony import */ var _Research__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(22);
/* harmony import */ var _UpdateHTML__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8);
/* harmony import */ var _Hypercubes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(23);
/* harmony import */ var _Tesseracts__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(16);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9);
/* harmony import */ var _Talismans__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(10);
/* harmony import */ var _Toggles__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(7);
/* harmony import */ var _Statistics__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(26);
/* harmony import */ var _History__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(28);
/* harmony import */ var _PlatonicCubes__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(29);
/* harmony import */ var _Ants__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(25);
/* harmony import */ var _Tax__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(30);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(11);
/* harmony import */ var _Reset__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(14);
/* harmony import */ var _Buy__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(19);
/* harmony import */ var _Automation__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(21);
/* harmony import */ var _Runes__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(15);
/* harmony import */ var _CheckVariables__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(31);
/* harmony import */ var _Cubes__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(17);
/* harmony import */ var _Corruptions__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(27);
/* harmony import */ var _EventListeners__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(32);
/* harmony import */ var _Plugins_Plugins__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(36);
/* harmony import */ var _Helper__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(38);





























const isTesting = true;
const intervalHold = [];
const interval = new Proxy(setInterval, {
    apply(target, thisArg, args) {
        const set = target.apply(thisArg, args);
        intervalHold.push(set);
        return set;
    }
});
const clearInt = new Proxy(clearInterval, {
    apply(target, thisArg, args) {
        const id = args[0];
        intervalHold.splice(intervalHold.indexOf(id), 1);
        return target.apply(thisArg, args);
    }
});
const player = {
    worlds: 0,
    coins: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e2"),
    coinsThisPrestige: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e2"),
    coinsThisTranscension: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e2"),
    coinsThisReincarnation: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e2"),
    coinsTotal: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("100"),
    firstOwnedCoin: 0,
    firstGeneratedCoin: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    firstCostCoin: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("100"),
    firstProduceCoin: 0.25,
    secondOwnedCoin: 0,
    secondGeneratedCoin: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    secondCostCoin: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("2e3"),
    secondProduceCoin: 2.5,
    thirdOwnedCoin: 0,
    thirdGeneratedCoin: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    thirdCostCoin: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("4e4"),
    thirdProduceCoin: 25,
    fourthOwnedCoin: 0,
    fourthGeneratedCoin: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    fourthCostCoin: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("8e5"),
    fourthProduceCoin: 250,
    fifthOwnedCoin: 0,
    fifthGeneratedCoin: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    fifthCostCoin: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("16e6"),
    fifthProduceCoin: 2500,
    firstOwnedDiamonds: 0,
    firstGeneratedDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    firstCostDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("100"),
    firstProduceDiamonds: 0.05,
    secondOwnedDiamonds: 0,
    secondGeneratedDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    secondCostDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e5"),
    secondProduceDiamonds: 0.0005,
    thirdOwnedDiamonds: 0,
    thirdGeneratedDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    thirdCostDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e15"),
    thirdProduceDiamonds: 0.00005,
    fourthOwnedDiamonds: 0,
    fourthGeneratedDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    fourthCostDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e40"),
    fourthProduceDiamonds: 0.000005,
    fifthOwnedDiamonds: 0,
    fifthGeneratedDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    fifthCostDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e100"),
    fifthProduceDiamonds: 0.000005,
    firstOwnedMythos: 0,
    firstGeneratedMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    firstCostMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    firstProduceMythos: 1,
    secondOwnedMythos: 0,
    secondGeneratedMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    secondCostMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("100"),
    secondProduceMythos: 0.01,
    thirdOwnedMythos: 0,
    thirdGeneratedMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    thirdCostMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e4"),
    thirdProduceMythos: 0.001,
    fourthOwnedMythos: 0,
    fourthGeneratedMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    fourthCostMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e8"),
    fourthProduceMythos: 0.0002,
    fifthOwnedMythos: 0,
    fifthGeneratedMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    fifthCostMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e16"),
    fifthProduceMythos: 0.00004,
    firstOwnedParticles: 0,
    firstGeneratedParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    firstCostParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    firstProduceParticles: .25,
    secondOwnedParticles: 0,
    secondGeneratedParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    secondCostParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("100"),
    secondProduceParticles: .20,
    thirdOwnedParticles: 0,
    thirdGeneratedParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    thirdCostParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e4"),
    thirdProduceParticles: .15,
    fourthOwnedParticles: 0,
    fourthGeneratedParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    fourthCostParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e8"),
    fourthProduceParticles: .10,
    fifthOwnedParticles: 0,
    fifthGeneratedParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    fifthCostParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e16"),
    fifthProduceParticles: .5,
    firstOwnedAnts: 0,
    firstGeneratedAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    firstCostAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e800"),
    firstProduceAnts: .0001,
    secondOwnedAnts: 0,
    secondGeneratedAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    secondCostAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("3"),
    secondProduceAnts: .00005,
    thirdOwnedAnts: 0,
    thirdGeneratedAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    thirdCostAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("100"),
    thirdProduceAnts: .00002,
    fourthOwnedAnts: 0,
    fourthGeneratedAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    fourthCostAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e4"),
    fourthProduceAnts: .00001,
    fifthOwnedAnts: 0,
    fifthGeneratedAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    fifthCostAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e12"),
    fifthProduceAnts: .000005,
    sixthOwnedAnts: 0,
    sixthGeneratedAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    sixthCostAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e36"),
    sixthProduceAnts: .000002,
    seventhOwnedAnts: 0,
    seventhGeneratedAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    seventhCostAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e100"),
    seventhProduceAnts: .000001,
    eighthOwnedAnts: 0,
    eighthGeneratedAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    eighthCostAnts: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e300"),
    eighthProduceAnts: .00000001,
    ascendBuilding1: {
        cost: 1,
        owned: 0,
        generated: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
        multiplier: 0.01
    },
    ascendBuilding2: {
        cost: 10,
        owned: 0,
        generated: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
        multiplier: 0.01
    },
    ascendBuilding3: {
        cost: 100,
        owned: 0,
        generated: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
        multiplier: 0.01
    },
    ascendBuilding4: {
        cost: 1000,
        owned: 0,
        generated: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
        multiplier: 0.01
    },
    ascendBuilding5: {
        cost: 10000,
        owned: 0,
        generated: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
        multiplier: 0.01
    },
    multiplierCost: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e5"),
    multiplierBought: 0,
    acceleratorCost: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("500"),
    acceleratorBought: 0,
    acceleratorBoostBought: 0,
    acceleratorBoostCost: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e3"),
    upgrades: Array(141).fill(0),
    prestigeCount: 0,
    transcendCount: 0,
    reincarnationCount: 0,
    prestigePoints: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    transcendPoints: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    reincarnationPoints: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    prestigeShards: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    transcendShards: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    reincarnationShards: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    toggles: {
        1: false,
        2: false,
        3: false,
        4: false,
        5: false,
        6: false,
        7: false,
        8: false,
        9: false,
        10: false,
        11: false,
        12: false,
        13: false,
        14: false,
        15: false,
        16: false,
        17: false,
        18: false,
        19: false,
        20: false,
        21: false,
        22: false,
        23: false,
        24: false,
        25: false,
        26: false,
        27: false,
        28: true,
        29: true,
        30: true,
        31: true,
        32: true,
        33: false,
    },
    resourceGenerators: {
        diamonds: false,
        mythos: false,
    },
    keepUpgrades: {
        coinUpgrades: false,
        prestigeUpgrades: false,
        crystalUpgrades: false,
        transcendUpgrades: false,
        autobuyers: false,
        generators: false
    },
    challengecompletions: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    highestchallengecompletions: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    challenge15Exponent: 0,
    highestChallenge15Exponent: 0,
    retrychallenges: false,
    currentChallenge: {
        transcension: 0,
        reincarnation: 0,
        ascension: 0,
    },
    researchPoints: 0,
    obtainiumtimer: 0,
    obtainiumlocktoggle: false,
    obtainiumpersecond: 0,
    maxobtainiumpersecond: 0,
    maxobtainium: 0,
    researches: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    unlocks: {
        coinone: false,
        cointwo: false,
        cointhree: false,
        coinfour: false,
        prestige: false,
        generation: false,
        transcend: false,
        reincarnate: false,
        rrow1: false,
        rrow2: false,
        rrow3: false,
        rrow4: false
    },
    achievements: Array(253).fill(0),
    achievementPoints: 0,
    prestigenomultiplier: true,
    prestigenoaccelerator: true,
    transcendnomultiplier: true,
    transcendnoaccelerator: true,
    reincarnatenomultiplier: true,
    reincarnatenoaccelerator: true,
    prestigenocoinupgrades: true,
    transcendnocoinupgrades: true,
    transcendnocoinorprestigeupgrades: true,
    reincarnatenocoinupgrades: true,
    reincarnatenocoinorprestigeupgrades: true,
    reincarnatenocoinprestigeortranscendupgrades: true,
    reincarnatenocoinprestigetranscendorgeneratorupgrades: true,
    crystalUpgrades: [0, 0, 0, 0, 0, 0, 0, 0],
    crystalUpgradesCost: [7, 15, 20, 40, 100, 200, 500, 1000],
    runelevels: [1, 1, 1, 1, 1],
    runeexp: [0, 0, 0, 0, 0,],
    runeshards: 0,
    offeringlocktoggle: false,
    maxofferings: 0,
    offeringpersecond: 0,
    prestigecounter: 0,
    transcendcounter: 0,
    reincarnationcounter: 0,
    offlinetick: 0,
    prestigeamount: 0,
    transcendamount: 0,
    reincarnationamount: 0,
    fastestprestige: 9999999999,
    fastesttranscend: 99999999999,
    fastestreincarnate: 999999999999,
    fastestAscend: 999999999999,
    resettoggle1: 1,
    resettoggle2: 1,
    resettoggle3: 1,
    tesseractAutoBuyerToggle: 0,
    tesseractAutoBuyerAmount: 0,
    coinbuyamount: 1,
    crystalbuyamount: 1,
    mythosbuyamount: 1,
    particlebuyamount: 1,
    offeringbuyamount: 1,
    tesseractbuyamount: 1,
    shoptoggles: {
        coin: true,
        prestige: true,
        transcend: true,
        generators: true,
        reincarnate: true,
    },
    tabnumber: 1,
    subtabNumber: 0,
    codes: new Map(Array.from({ length: 30 }, (_, i) => [i + 1, false])),
    loaded1009: true,
    loaded1009hotfix1: true,
    loaded10091: true,
    loaded1010: true,
    loaded10101: true,
    shopUpgrades: {
        offeringPotion: 1,
        obtainiumPotion: 1,
        offeringTimerLevel: 0,
        obtainiumTimerLevel: 0,
        offeringAutoLevel: 0,
        obtainiumAutoLevel: 0,
        instantChallengeBought: false,
        cashGrabLevel: 0,
        antSpeedLevel: 0,
        talismanBought: false,
        challengeExtension: 0,
        challenge10Tomes: 0,
        seasonPassLevel: 0,
        cubeToQuarkBought: false,
        tesseractToQuarkBought: false,
        hypercubeToQuarkBought: false
    },
    autoSacrificeToggle: false,
    autoFortifyToggle: false,
    autoEnhanceToggle: false,
    autoResearchToggle: false,
    autoResearch: 0,
    autoSacrifice: 0,
    sacrificeTimer: 0,
    quarkstimer: 90000,
    antPoints: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    antUpgrades: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    antSacrificePoints: 0,
    antSacrificeTimer: 900,
    antSacrificeTimerReal: 900,
    talismanLevels: [0, 0, 0, 0, 0, 0, 0],
    talismanRarity: [1, 1, 1, 1, 1, 1, 1],
    talismanOne: [null, -1, 1, 1, 1, -1],
    talismanTwo: [null, 1, 1, -1, -1, 1],
    talismanThree: [null, 1, -1, 1, 1, -1],
    talismanFour: [null, -1, -1, 1, 1, 1],
    talismanFive: [null, 1, 1, -1, -1, 1],
    talismanSix: [null, 1, 1, 1, -1, -1],
    talismanSeven: [null, -1, 1, -1, 1, 1],
    talismanShards: 0,
    commonFragments: 0,
    uncommonFragments: 0,
    rareFragments: 0,
    epicFragments: 0,
    legendaryFragments: 0,
    mythicalFragments: 0,
    buyTalismanShardPercent: 10,
    autoAntSacrifice: false,
    autoAntSacTimer: 900,
    autoAntSacrificeMode: 0,
    antMax: false,
    ascensionCount: 0,
    ascensionCounter: 0,
    cubeUpgrades: [null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    platonicUpgrades: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    wowCubes: 0,
    wowTesseracts: 0,
    wowHypercubes: 0,
    wowPlatonicCubes: 0,
    wowAbyssals: 0,
    cubeBlessings: {
        accelerator: 0,
        multiplier: 0,
        offering: 0,
        runeExp: 0,
        obtainium: 0,
        antSpeed: 0,
        antSacrifice: 0,
        antELO: 0,
        talismanBonus: 0,
        globalSpeed: 0
    },
    tesseractBlessings: {
        accelerator: 0,
        multiplier: 0,
        offering: 0,
        runeExp: 0,
        obtainium: 0,
        antSpeed: 0,
        antSacrifice: 0,
        antELO: 0,
        talismanBonus: 0,
        globalSpeed: 0
    },
    hypercubeBlessings: {
        accelerator: 0,
        multiplier: 0,
        offering: 0,
        runeExp: 0,
        obtainium: 0,
        antSpeed: 0,
        antSacrifice: 0,
        antELO: 0,
        talismanBonus: 0,
        globalSpeed: 0
    },
    platonicBlessings: {
        cubes: 0,
        tesseracts: 0,
        hypercubes: 0,
        platonics: 0,
        hypercubeBonus: 0,
        taxes: 0,
        scoreBonus: 0,
        globalSpeed: 0,
    },
    ascendShards: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0"),
    autoAscend: false,
    autoAscendMode: "c10Completions",
    autoAscendThreshold: 1,
    roombaResearchIndex: 0,
    cubesThisAscension: {
        "challenges": 0,
        "reincarnation": 0,
        "ascension": 0,
        "maxCubesPerSec": 0,
        "maxAllTime": 0,
        "cpsOnC10Comp": 0,
        "tesseracts": 0,
        "hypercubes": 0
    },
    ascStatToggles: {
        1: false,
        2: false,
        3: false,
        4: false
    },
    prototypeCorruptions: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    usedCorruptions: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    corruptionLoadouts: {
        1: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        2: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        3: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    corruptionShowStats: true,
    constantUpgrades: [null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    history: {},
    historyCountMax: 10,
    historyShowPerSecond: false,
    autoChallengeRunning: false,
    autoChallengeIndex: 1,
    autoChallengeToggles: [false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false],
    autoChallengeStartExponent: 10,
    autoChallengeTimer: {
        start: 10,
        exit: 2,
        enter: 2
    },
    runeBlessingLevels: [0, 0, 0, 0, 0, 0],
    runeSpiritLevels: [0, 0, 0, 0, 0, 0],
    runeBlessingBuyAmount: 0,
    runeSpiritBuyAmount: 0,
    autoTesseracts: [false, false, false, false, false, false],
    saveString: "Synergism-$VERSION$-$TIME$.txt",
    brokenfile1: false,
    exporttest: false,
    kongregatetest: "NO!",
    dayCheck: null,
    dayTimer: 0,
    cubeOpenedDaily: 0,
    cubeQuarkDaily: 0,
    tesseractOpenedDaily: 0,
    tesseractQuarkDaily: 0,
    hypercubeOpenedDaily: 0,
    hypercubeQuarkDaily: 0,
    loadedOct4Hotfix: false,
    loadedNov13Vers: true,
    loadedDec16Vers: true,
    version: '2.5.0~alpha-1',
    rngCode: 0
};
const blankSave = Object.assign({}, player, {
    codes: new Map(Array.from({ length: 31 }, (_, i) => [i + 1, false]))
});
const saveSynergy = (button) => {
    player.offlinetick = Date.now();
    player.loaded1009 = true;
    player.loaded1009hotfix1 = true;
    const p = Object.assign({}, player, {
        codes: Array.from(player.codes)
    });
    localStorage.setItem('Synergysave2', btoa(JSON.stringify(p)));
    if (button) {
        const el = document.getElementById('saveinfo');
        el.textContent = 'Game saved successfully!';
        setTimeout(() => el.textContent = '', 4000);
    }
};
const loadSynergy = () => {
    const save = localStorage.getItem("Synergysave2");
    const data = save ? JSON.parse(atob(save)) : null;
    if (isTesting) {
        Object.defineProperty(window, 'player', {
            value: player
        });
    }
    if (data) {
        const hasOwnProperty = {}.hasOwnProperty;
        const oldCodesUsed = Array.from({ length: 24 }, (_, i) => 'offerpromo' + (i + 1) + 'used');
        const size = player.codes.size;
        const oldPromoKeys = Object.keys(data).filter(k => k.includes('offerpromo'));
        if (oldPromoKeys.length > 0) {
            oldPromoKeys.forEach(k => {
                const value = data[k];
                const num = +k.replace(/[^\d]/g, '');
                player.codes.set(num, Boolean(value));
            });
        }
        Object.keys(data).forEach(function (prop) {
            if (!hasOwnProperty.call(player, prop)) {
                return;
            }
            if ((0,_Utility__WEBPACK_IMPORTED_MODULE_2__.isDecimal)(player[prop])) {
                return (player[prop] = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(data[prop]));
            }
            else if (prop === 'codes') {
                return (player.codes = new Map(data[prop]));
            }
            else if (oldCodesUsed.includes(prop)) {
                return;
            }
            else if (Array.isArray(data[prop])) {
                if (player[prop].length < data[prop].length) {
                    return player[prop] = data[prop].slice(data[prop].length - player[prop].length);
                }
            }
            return (player[prop] = data[prop]);
        });
        if (data.offerpromo24used !== undefined) {
            player.codes.set(25, false);
        }
        if (player.codes.size < size) {
            for (let i = player.codes.size + 1; i <= size; i++) {
                if (!player.codes.has(i)) {
                    player.codes.set(i, false);
                }
            }
        }
        if (player.codes.size < size) {
            for (let i = player.codes.size + 1; i <= size; i++) {
                if (!player.codes.has(i)) {
                    player.codes.set(i, false);
                }
            }
        }
        if (!('rngCode' in data)) {
            player.rngCode = 0;
        }
        if (data.loaded1009 === undefined || !data.loaded1009) {
            player.loaded1009 = false;
        }
        if (data.loaded1009hotfix1 === undefined || !data.loaded1009hotfix1) {
            player.loaded1009hotfix1 = false;
        }
        if (data.loaded10091 === undefined) {
            player.loaded10091 = false;
        }
        if (data.loaded1010 === undefined) {
            player.loaded1010 = false;
        }
        if (data.loaded10101 === undefined) {
            player.loaded10101 = false;
        }
        if (player.researches[76] === undefined) {
            player.codes.set(13, false);
            player.researches.push(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            player.achievements.push(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            player.maxofferings = player.runeshards;
            player.maxobtainium = player.researchPoints;
            player.researchPoints += 51200 * player.researches[50];
            player.researches[50] = 0;
            player.offeringlocktoggle = false;
            player.obtainiumlocktoggle = false;
        }
        player.maxofferings = player.maxofferings || 0;
        player.maxobtainium = player.maxobtainium || 0;
        player.runeshards = player.runeshards || 0;
        player.researchPoints = player.researchPoints || 0;
        if (!data.loaded1009 || data.loaded1009hotfix1 === null || data.shopUpgrades.offeringPotion === undefined) {
            player.firstOwnedParticles = 0;
            player.secondOwnedParticles = 0;
            player.thirdOwnedParticles = 0;
            player.fourthOwnedParticles = 0;
            player.fifthOwnedParticles = 0;
            player.firstCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1");
            player.secondCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e2");
            player.thirdCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e4");
            player.fourthCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e8");
            player.fifthCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e16");
            player.autoSacrificeToggle = false;
            player.autoResearchToggle = false;
            player.autoResearch = 0;
            player.autoSacrifice = 0;
            player.sacrificeTimer = 0;
            player.loaded1009 = true;
            player.codes.set(18, false);
            player.shopUpgrades = Object.assign({}, blankSave.shopUpgrades);
        }
        if (!data.loaded1009hotfix1) {
            player.loaded1009hotfix1 = true;
            player.codes.set(19, true);
            player.firstOwnedParticles = 0;
            player.secondOwnedParticles = 0;
            player.thirdOwnedParticles = 0;
            player.fourthOwnedParticles = 0;
            player.fifthOwnedParticles = 0;
            player.firstCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1");
            player.secondCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e2");
            player.thirdCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e4");
            player.fourthCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e8");
            player.fifthCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e16");
        }
        if (data.loaded10091 === undefined || !data.loaded10091 || player.researches[86] > 100 || player.researches[87] > 100 || player.researches[88] > 100 || player.researches[89] > 100 || player.researches[90] > 10) {
            player.loaded10091 = true;
            player.researchPoints += 7.5e8 * player.researches[82];
            player.researchPoints += 2e8 * player.researches[83];
            player.researchPoints += 4.5e9 * player.researches[84];
            player.researchPoints += 2.5e7 * player.researches[86];
            player.researchPoints += 7.5e7 * player.researches[87];
            player.researchPoints += 3e8 * player.researches[88];
            player.researchPoints += 1e9 * player.researches[89];
            player.researchPoints += 2.5e7 * player.researches[90];
            player.researchPoints += 1e8 * player.researches[91];
            player.researchPoints += 2e9 * player.researches[92];
            player.researchPoints += 9e9 * player.researches[93];
            player.researchPoints += 7.25e10 * player.researches[94];
            player.researches[86] = 0;
            player.researches[87] = 0;
            player.researches[88] = 0;
            player.researches[89] = 0;
            player.researches[90] = 0;
            player.researches[91] = 0;
            player.researches[92] = 0;
        }
        if (data.achievements[169] === undefined || player.achievements[169] === undefined || data.shopUpgrades.antSpeedLevel === undefined || player.shopUpgrades.antSpeedLevel === undefined || data.loaded1010 === undefined || data.loaded1010 === false) {
            player.loaded1010 = true;
            player.codes.set(21, false);
            player.firstOwnedAnts = 0;
            player.firstGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0");
            player.firstCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e800");
            player.firstProduceAnts = .0001;
            player.secondOwnedAnts = 0;
            player.secondGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0");
            player.secondCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("3");
            player.secondProduceAnts = .00005;
            player.thirdOwnedAnts = 0;
            player.thirdGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0");
            player.thirdCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("100");
            player.thirdProduceAnts = .00002;
            player.fourthOwnedAnts = 0;
            player.fourthGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0");
            player.fourthCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e4");
            player.fourthProduceAnts = .00001;
            player.fifthOwnedAnts = 0;
            player.fifthGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0");
            player.fifthCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e12");
            player.fifthProduceAnts = .000005;
            player.sixthOwnedAnts = 0;
            player.sixthGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0");
            player.sixthCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e36");
            player.sixthProduceAnts = .000002;
            player.seventhOwnedAnts = 0;
            player.seventhGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0");
            player.seventhCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e100");
            player.seventhProduceAnts = .000001;
            player.eighthOwnedAnts = 0;
            player.eighthGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0");
            player.eighthCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e300");
            player.eighthProduceAnts = .00000001;
            player.achievements.push(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            player.antPoints = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1");
            player.upgrades[38] = 0;
            player.upgrades[39] = 0;
            player.upgrades[40] = 0;
            player.upgrades[76] = 0;
            player.upgrades[77] = 0;
            player.upgrades[78] = 0;
            player.upgrades[79] = 0;
            player.upgrades[80] = 0;
            player.shopUpgrades.antSpeedLevel = 0;
            player.shopUpgrades.talismanBought = false;
            player.antUpgrades = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            player.unlocks.rrow4 = false;
            player.researchPoints += 3e7 * player.researches[50];
            player.researchPoints += 2e9 * player.researches[96];
            player.researchPoints += 5e9 * player.researches[97];
            player.researchPoints += 3e10 * player.researches[98];
            player.researches[50] = 0;
            player.researches[96] = 0;
            player.researches[97] = 0;
            player.researches[98] = 0;
            player.researches.push(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            player.talismanLevels = [0, 0, 0, 0, 0, 0, 0];
            player.talismanRarity = [1, 1, 1, 1, 1, 1, 1];
            player.talismanShards = 0;
            player.commonFragments = 0;
            player.uncommonFragments = 0;
            player.rareFragments = 0;
            player.epicFragments = 0;
            player.legendaryFragments = 0;
            player.mythicalFragments = 0;
            player.buyTalismanShardPercent = 10;
            player.talismanOne = [null, -1, 1, 1, 1, -1];
            player.talismanTwo = [null, 1, 1, -1, -1, 1];
            player.talismanThree = [null, 1, -1, 1, 1, -1];
            player.talismanFour = [null, -1, -1, 1, 1, 1];
            player.talismanFive = [null, 1, 1, -1, -1, 1];
            player.talismanSix = [null, 1, 1, 1, -1, -1];
            player.talismanSeven = [null, -1, 1, -1, 1, 1];
            player.antSacrificePoints = 0;
            player.antSacrificeTimer = 0;
            player.obtainiumpersecond = 0;
            player.maxobtainiumpersecond = 0;
        }
        if (data.loaded10101 === undefined || data.loaded10101 === false) {
            player.loaded10101 = true;
            const refundThese = [0, 31, 32, 61, 62, 63, 64, 76, 77, 78, 79, 80,
                81, 98, 104, 105, 106, 107, 108,
                109, 110, 111, 112, 113, 114, 115, 116,
                117, 118, 119, 120, 121, 122, 123, 125];
            const refundReward = [0, 2, 20, 5, 10, 80, 5e3, 1e7, 1e7, 2e7, 3e7, 4e7,
                2e8, 3e10, 1e11, 1e12, 2e11, 1e12, 2e10,
                2e11, 1e12, 2e13, 5e13, 1e14, 2e14, 5e14, 1e15,
                2e15, 1e16, 1e15, 1e16, 1e14, 1e15, 1e15, 1e20];
            for (let i = 1; i < refundThese.length; i++) {
                player.researchPoints += player.researches[refundThese[i]] * refundReward[i];
                player.researches[refundThese[i]] = 0;
            }
            player.autoAntSacrifice = false;
            player.antMax = false;
        }
        if (player.firstOwnedAnts < 1 && player.firstCostAnts.gte("1e1200")) {
            player.firstCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1e800");
            player.firstOwnedAnts = 0;
        }
        (0,_CheckVariables__WEBPACK_IMPORTED_MODULE_23__.checkVariablesOnLoad)(data);
        if (data.ascensionCount === undefined || player.ascensionCount === 0) {
            player.ascensionCount = 0;
            if (player.ascensionCounter === undefined || (player.ascensionCounter === 0 && player.prestigeCount > 0)) {
                player.ascensionCounter = 86400 * 90;
            }
            player.cubeUpgrades = [null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            player.wowCubes = 0;
            player.wowTesseracts = 0;
            player.wowHypercubes = 0;
            player.cubeBlessings = {
                accelerator: 0,
                multiplier: 0,
                offering: 0,
                runeExp: 0,
                obtainium: 0,
                antSpeed: 0,
                antSacrifice: 0,
                antELO: 0,
                talismanBonus: 0,
                globalSpeed: 0
            };
            player.cubesThisAscension.challenges = 0;
            player.cubesThisAscension.reincarnation = 0;
            player.cubesThisAscension.ascension = 0;
            player.cubesThisAscension.maxCubesPerSec = 0;
            player.cubesThisAscension.maxAllTime = 0;
            player.cubesThisAscension.cpsOnC10Comp = 0;
            player.cubesThisAscension.tesseracts = 0;
            player.cubesThisAscension.hypercubes = 0;
        }
        if (data.autoAntSacTimer === undefined) {
            player.autoAntSacTimer = 900;
        }
        if (data.autoAntSacrificeMode === undefined) {
            player.autoAntSacrificeMode = 0;
        }
        if (player.cubeUpgrades[7] === 0 && player.toggles[22]) {
            for (let i = 22; i <= 26; i++) {
                player.toggles[i] = false;
            }
        }
        if (player.transcendCount < 0) {
            player.transcendCount = 0;
        }
        if (player.reincarnationCount < 0) {
            player.reincarnationCount = 0;
        }
        if (player.runeshards < 0) {
            player.runeshards = 0;
        }
        if (player.researchPoints < 0) {
            player.researchPoints = 0;
        }
        if (player.resettoggle1 === 0) {
            player.resettoggle1 = 1;
            player.resettoggle2 = 1;
            player.resettoggle3 = 1;
        }
        if (player.tesseractAutoBuyerToggle === 0) {
            player.tesseractAutoBuyerToggle = 1;
        }
        if (player.reincarnationCount < 0.5 && player.unlocks.rrow4 === true) {
            player.unlocks = {
                coinone: false,
                cointwo: false,
                cointhree: false,
                coinfour: false,
                prestige: false,
                generation: false,
                transcend: false,
                reincarnate: false,
                rrow1: false,
                rrow2: false,
                rrow3: false,
                rrow4: false
            };
        }
        if (data.history === undefined || player.history === undefined) {
            player.history = {};
        }
        if (data.historyShowPerSecond === undefined || player.historyShowPerSecond === undefined) {
            player.historyShowPerSecond = false;
            player.historyCountMax = 10;
        }
        if (player.currentChallenge.transcension === undefined) {
            player.currentChallenge = {
                transcension: 0,
                reincarnation: 0,
                ascension: 0,
            };
        }
        if (!Number.isInteger(player.ascendBuilding1.cost)) {
            player.ascendBuilding1.cost = 1;
            player.ascendBuilding1.owned = 0;
            player.ascendBuilding2.cost = 10;
            player.ascendBuilding2.owned = 0;
            player.ascendBuilding3.cost = 100;
            player.ascendBuilding3.owned = 0;
            player.ascendBuilding4.cost = 1000;
            player.ascendBuilding4.owned = 0;
            player.ascendBuilding5.cost = 10000;
            player.ascendBuilding5.owned = 0;
        }
        if (!player.dayCheck) {
            player.dayCheck = new Date(player.dayCheck);
        }
        for (let i = 1; i <= 5; i++) {
            player['ascendBuilding' + i].generated = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(player['ascendBuilding' + i].generated);
        }
        while (player.achievements[252] === undefined) {
            player.achievements.push(0);
        }
        while (player.researches[200] === undefined) {
            player.researches.push(0);
        }
        while (player.upgrades[140] === undefined) {
            player.upgrades.push(0);
        }
        if (player.saveString === undefined || player.saveString === "" || player.saveString === "Synergism-v1011Test.txt") {
            player.saveString = "Synergism-$VERSION$-$TIME$.txt";
        }
        (0,_Utility__WEBPACK_IMPORTED_MODULE_2__.getElementById)("saveStringInput").value = player.saveString;
        player.wowCubes = player.wowCubes || 0;
        if (!player.cubesThisAscension.maxAllTime)
            player.cubesThisAscension.maxAllTime = 0;
        if (!player.cubesThisAscension.cpsOnC10Comp)
            player.cubesThisAscension.cpsOnC10Comp = 0;
        if (!player.cubesThisAscension.tesseracts)
            player.cubesThisAscension.tesseracts = 0;
        if (!player.cubesThisAscension.hypercubes)
            player.cubesThisAscension.hypercubes = 0;
        for (let j = 1; j < 126; j++) {
            (0,_Upgrades__WEBPACK_IMPORTED_MODULE_5__.upgradeupdate)(j);
        }
        for (let j = 1; j <= (200); j++) {
            (0,_Research__WEBPACK_IMPORTED_MODULE_6__.updateResearchBG)(j);
        }
        for (let j = 1; j <= 50; j++) {
            (0,_Cubes__WEBPACK_IMPORTED_MODULE_24__.updateCubeUpgradeBG)(j);
        }
        player.subtabNumber = 0;
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen = "runes";
        document.getElementById("toggleRuneSubTab1").style.backgroundColor = 'crimson';
        document.getElementById("toggleRuneSubTab1").style.border = '2px solid gold';
        const q = ['coin', 'crystal', 'mythos', 'particle', 'offering', 'tesseract'];
        if (player.coinbuyamount !== 1 && player.coinbuyamount !== 10 && player.coinbuyamount !== 100 && player.coinbuyamount !== 1000) {
            player.coinbuyamount = 1;
        }
        if (player.crystalbuyamount !== 1 && player.crystalbuyamount !== 10 && player.crystalbuyamount !== 100 && player.crystalbuyamount !== 1000) {
            player.crystalbuyamount = 1;
        }
        if (player.mythosbuyamount !== 1 && player.mythosbuyamount !== 10 && player.mythosbuyamount !== 100 && player.mythosbuyamount !== 1000) {
            player.mythosbuyamount = 1;
        }
        if (player.particlebuyamount !== 1 && player.particlebuyamount !== 10 && player.particlebuyamount !== 100 && player.particlebuyamount !== 1000) {
            player.particlebuyamount = 1;
        }
        if (player.offeringbuyamount !== 1 && player.offeringbuyamount !== 10 && player.offeringbuyamount !== 100 && player.offeringbuyamount !== 1000) {
            player.offeringbuyamount = 1;
        }
        if (player.tesseractbuyamount !== 1 && player.tesseractbuyamount !== 10 && player.tesseractbuyamount !== 100 && player.tesseractbuyamount !== 1000) {
            player.tesseractbuyamount = 1;
        }
        for (let j = 0; j <= 5; j++) {
            for (let k = 0; k < 4; k++) {
                let d;
                if (k === 0) {
                    d = 'one';
                }
                if (k === 1) {
                    d = 'ten';
                }
                if (k === 2) {
                    d = 'hundred';
                }
                if (k === 3) {
                    d = 'thousand';
                }
                const e = q[j] + d;
                document.getElementById(e).style.backgroundColor = "#000000";
            }
            let c;
            if (player[q[j] + 'buyamount'] === 1) {
                c = 'one';
            }
            if (player[q[j] + 'buyamount'] === 10) {
                c = 'ten';
            }
            if (player[q[j] + 'buyamount'] === 100) {
                c = 'hundred';
            }
            if (player[q[j] + 'buyamount'] === 1000) {
                c = 'thousand';
            }
            const b = q[j] + c;
            document.getElementById(b).style.backgroundColor = "green";
        }
        const testArray = [];
        for (let i = 0; i < _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchBaseCosts.length; i++) {
            testArray.push(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchBaseCosts[i]);
        }
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchOrderByCost = (0,_Utility__WEBPACK_IMPORTED_MODULE_2__.sortWithIndeces)(testArray);
        player.roombaResearchIndex = 0;
        if (player.shoptoggles.coin === false) {
            document.getElementById("shoptogglecoin").textContent = "Auto: OFF";
        }
        if (player.shoptoggles.prestige === false) {
            document.getElementById("shoptoggleprestige").textContent = "Auto: OFF";
        }
        if (player.shoptoggles.transcend === false) {
            document.getElementById("shoptoggletranscend").textContent = "Auto: OFF";
        }
        if (player.shoptoggles.generators === false) {
            document.getElementById("shoptogglegenerator").textContent = "Auto: OFF";
        }
        if (!player.shoptoggles.reincarnate) {
            document.getElementById('particleAutoUpgrade').textContent = "Auto: OFF";
        }
        (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.getChallengeConditions)();
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.updateChallengeDisplay)();
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.revealStuff)();
        (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleauto)();
        document.getElementById("startTimerValue").textContent = format(player.autoChallengeTimer.start, 2, true) + "s";
        (0,_Utility__WEBPACK_IMPORTED_MODULE_2__.getElementById)("startAutoChallengeTimerInput").value = player.autoChallengeTimer.start + '';
        document.getElementById("exitTimerValue").textContent = format(player.autoChallengeTimer.exit, 2, true) + "s";
        (0,_Utility__WEBPACK_IMPORTED_MODULE_2__.getElementById)("exitAutoChallengeTimerInput").value = player.autoChallengeTimer.exit + '';
        document.getElementById("enterTimerValue").textContent = format(player.autoChallengeTimer.enter, 2, true) + "s";
        (0,_Utility__WEBPACK_IMPORTED_MODULE_2__.getElementById)("enterAutoChallengeTimerInput").value = player.autoChallengeTimer.enter + '';
        for (let i = 0; i < 4; i++) {
            (0,_Corruptions__WEBPACK_IMPORTED_MODULE_25__.corruptionLoadoutTableUpdate)(i);
        }
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.showCorruptionStatsLoadouts)();
        for (let j = 1; j <= 5; j++) {
            const ouch = document.getElementById("tesseractAutoToggle" + j);
            (player.autoTesseracts[j]) ?
                (ouch.textContent = "Auto [ON]", ouch.style.border = "2px solid green") :
                (ouch.textContent = "Auto [OFF]", ouch.style.border = "2px solid red");
        }
        document.getElementById("buyRuneBlessingToggleValue").textContent = format(player.runeBlessingBuyAmount, 0, true);
        document.getElementById("buyRuneSpiritToggleValue").textContent = format(player.runeSpiritBuyAmount, 0, true);
        document.getElementById("researchrunebonus").textContent = "Thanks to researches, your effective levels are increased by " + (100 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult - 100).toPrecision(4) + "%";
        document.getElementById("talismanlevelup").style.display = "none";
        document.getElementById("talismanrespec").style.display = "none";
        (0,_PlatonicCubes__WEBPACK_IMPORTED_MODULE_15__.calculatePlatonicBlessings)();
        (0,_Hypercubes__WEBPACK_IMPORTED_MODULE_8__.calculateHypercubeBlessings)();
        (0,_Tesseracts__WEBPACK_IMPORTED_MODULE_9__.calculateTesseractBlessings)();
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateCubeBlessings)();
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.updateTalismanAppearance)(1);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.updateTalismanAppearance)(2);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.updateTalismanAppearance)(3);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.updateTalismanAppearance)(4);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.updateTalismanAppearance)(5);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.updateTalismanAppearance)(6);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.updateTalismanAppearance)(7);
        for (const id in player.ascStatToggles) {
            (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleAscStatPerSecond)(+id);
            (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleAscStatPerSecond)(+id);
        }
        if (player.resettoggle1 === 1) {
            document.getElementById("prestigeautotoggle").textContent = "Mode: AMOUNT";
        }
        if (player.resettoggle2 === 1) {
            document.getElementById("transcendautotoggle").textContent = "Mode: AMOUNT";
        }
        if (player.resettoggle3 === 1) {
            document.getElementById("reincarnateautotoggle").textContent = "Mode: AMOUNT";
        }
        if (player.resettoggle1 === 2) {
            document.getElementById("prestigeautotoggle").textContent = "Mode: TIME";
        }
        if (player.resettoggle2 === 2) {
            document.getElementById("transcendautotoggle").textContent = "Mode: TIME";
        }
        if (player.resettoggle3 === 2) {
            document.getElementById("reincarnateautotoggle").textContent = "Mode: TIME";
        }
        if (player.tesseractAutoBuyerToggle === 1) {
            document.getElementById("tesseractautobuytoggle").textContent = "Auto Buy: ON";
            document.getElementById("tesseractautobuytoggle").style.border = "2px solid green";
        }
        if (player.tesseractAutoBuyerToggle === 2) {
            document.getElementById("tesseractautobuytoggle").textContent = "Auto Buy: OFF";
            document.getElementById("tesseractautobuytoggle").style.border = "2px solid red";
        }
        if (player.autoResearchToggle) {
            document.getElementById("toggleautoresearch").textContent = "Automatic: ON";
        }
        if (!player.autoResearchToggle) {
            document.getElementById("toggleautoresearch").textContent = "Automatic: OFF";
        }
        if (player.autoSacrificeToggle == true) {
            document.getElementById("toggleautosacrifice").textContent = "Auto Rune: ON";
            document.getElementById("toggleautosacrifice").style.border = "2px solid green";
        }
        if (player.autoSacrificeToggle == false) {
            document.getElementById("toggleautosacrifice").textContent = "Auto Rune: OFF";
            document.getElementById("toggleautosacrifice").style.border = "2px solid red";
        }
        if (player.autoFortifyToggle == true) {
            document.getElementById("toggleautofortify").textContent = "Auto Fortify: ON";
            document.getElementById("toggleautofortify").style.border = "2px solid green";
        }
        if (player.autoFortifyToggle == false) {
            document.getElementById("toggleautofortify").textContent = "Auto Fortify: OFF";
            document.getElementById("toggleautofortify").style.border = "2px solid red";
        }
        if (player.autoEnhanceToggle == true) {
            document.getElementById("toggleautoenhance").textContent = "Auto Enhance: ON";
            document.getElementById("toggleautoenhance").style.border = "2px solid green";
        }
        if (player.autoEnhanceToggle == false) {
            document.getElementById("toggleautoenhance").textContent = "Auto Enhance: OFF";
            document.getElementById("toggleautoenhance").style.border = "2px solid red";
        }
        if (!player.autoAscend) {
            document.getElementById("ascensionAutoEnable").textContent = "Auto Ascend [OFF]";
            document.getElementById("ascensionAutoEnable").style.border = "2px solid red";
        }
        for (let i = 1; i <= 2; i++) {
            (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleAntMaxBuy)();
            (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleAntAutoSacrifice)(0);
            (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleAntAutoSacrifice)(1);
        }
        document.getElementById("historyTogglePerSecondButton").textContent = "Per second: " + (player.historyShowPerSecond ? "ON" : "OFF");
        document.getElementById("historyTogglePerSecondButton").style.borderColor = (player.historyShowPerSecond ? "green" : "red");
        if (!player.autoAscend) {
            document.getElementById("ascensionAutoEnable").textContent = "Auto Ascend [OFF]";
            document.getElementById("ascensionAutoEnable").style.border = "2px solid red";
        }
        player.autoResearch = Math.min(200, player.autoResearch);
        player.autoSacrifice = Math.min(5, player.autoSacrifice);
        if (player.autoResearchToggle && player.autoResearch > 0.5) {
            document.getElementById("res" + player.autoResearch).style.backgroundColor = "orange";
        }
        if (player.autoSacrificeToggle && player.autoSacrifice > 0.5) {
            document.getElementById("rune" + player.autoSacrifice).style.backgroundColor = "orange";
        }
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateOffline)();
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.toggleTalismanBuy)(player.buyTalismanShardPercent);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.updateTalismanInventory)();
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateObtainium)();
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateAnts)();
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateRuneLevels)();
        (0,_History__WEBPACK_IMPORTED_MODULE_14__.resetHistoryRenderAllTables)();
        (0,_Statistics__WEBPACK_IMPORTED_MODULE_13__.c15RewardUpdate)();
    }
    (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.CSSAscend)();
    (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.CSSRuneBlessings)();
    (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.updateAchievementBG)();
    const d = new Date();
    const h = d.getHours();
    const m = d.getMinutes();
    const s = d.getSeconds();
    player.dayTimer = (60 * 60 * 24 - (s + 60 * m + 60 * 60 * h));
};
const format = (input, accuracy = 0, long = false) => {
    if (!(input instanceof break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default) && typeof input !== 'number') {
        return '0 [und.]';
    }
    let power;
    let mantissa;
    if ((0,_Utility__WEBPACK_IMPORTED_MODULE_2__.isDecimal)(input)) {
        power = input.e;
        mantissa = input.mantissa;
    }
    else if (typeof input === 'number') {
        if (input === 0) {
            return '0';
        }
        power = Math.floor(Math.log10(Math.abs(input)));
        mantissa = input / Math.pow(10, power);
    }
    if (mantissa > 9.9999999) {
        mantissa = 1;
        ++power;
    }
    if (mantissa < 1 && mantissa > 0.9999999) {
        mantissa = 1;
    }
    if (power < -12) {
        return '0';
    }
    else if (power < 6 || (long && power < 13)) {
        let standard = mantissa * Math.pow(10, power);
        if (standard - Math.floor(standard) > 0.9999999) {
            standard = Math.ceil(standard);
        }
        if ((power < 1 || (long && power < 3)) && accuracy > 0) {
            standard = Number(standard.toFixed(accuracy));
        }
        else {
            standard = Math.floor(standard);
        }
        const standardString = standard.toString();
        const [front, back] = standardString.split('.');
        const frontFormatted = typeof BigInt === 'function'
            ? BigInt(front).toLocaleString()
            : front.replace(/(\d)(?=(\d{3})+$)/g, '$1,');
        return !back
            ? frontFormatted
            : `${frontFormatted}.${back}`;
    }
    else if (power < 1e6) {
        const mantissaLook = (Math.floor(mantissa * 100) / 100).toFixed(2);
        const powerLook = typeof BigInt === 'function'
            ? BigInt(power).toLocaleString()
            : power.toString().replace(/(\d)(?=(\d{3})+$)/g, "$1,");
        return `${mantissaLook}e${powerLook}`;
    }
    else if (power >= 1e6) {
        const mantissaLook = (Math.floor(mantissa * 100) / 100).toFixed(2);
        const powerDigits = Math.ceil(Math.log10(power));
        let powerFront = ((powerDigits - 1) % 3) + 1;
        let powerLook = power / Math.pow(10, powerDigits - powerFront);
        if (powerLook === 1000) {
            powerLook = 1;
            powerFront = 1;
        }
        const powerLookF = powerLook.toFixed(4 - powerFront);
        if (power < 1e9) {
            return `${mantissaLook}e${powerLookF}M`;
        }
        if (power < 1e12) {
            return `${mantissaLook}e${powerLookF}B`;
        }
        if (power < 1e15) {
            return `${mantissaLook}e${powerLookF}T`;
        }
        if (power < 1e18) {
            return `${mantissaLook}e${powerLookF}Qa`;
        }
        if (power < 1e21) {
            return `${mantissaLook}e${powerLookF}Qi`;
        }
        if (power < 1e24) {
            return `${mantissaLook}e${powerLookF}Sx`;
        }
        if (power < 1e27) {
            return `${mantissaLook}e${powerLookF}Sp`;
        }
        if (power < 1e30) {
            return `${mantissaLook}e${powerLookF}Oc`;
        }
        if (power < 1e33) {
            return `${mantissaLook}e${powerLookF}No`;
        }
        if (power < 1e36) {
            return `${mantissaLook}e${powerLookF}Dc`;
        }
        if (power < 1e39) {
            return `${mantissaLook}e${powerLookF}UDc`;
        }
        if (power < 1e42) {
            return `${mantissaLook}e${powerLookF}DDc`;
        }
        if (power < 1e45) {
            return `${mantissaLook}e${powerLookF}TDc`;
        }
        if (power < 1e48) {
            return `${mantissaLook}e${powerLookF}QaDc`;
        }
        if (power < 1e51) {
            return `${mantissaLook}e${powerLookF}QaDc`;
        }
        return `${mantissa}e${power}`;
    }
    else {
        return `0 [und.]`;
    }
};
const formatTimeShort = (seconds, msMaxSeconds) => {
    return ((seconds >= 86400)
        ? format(Math.floor(seconds / 86400)) + "d"
        : '') +
        ((seconds >= 3600)
            ? format(Math.floor(seconds / 3600) % 24) + "h"
            : '') +
        ((seconds >= 60)
            ? format(Math.floor(seconds / 60) % 60) + "m"
            : '') +
        format(Math.floor(seconds) % 60) +
        ((msMaxSeconds && seconds < msMaxSeconds)
            ? "." + (Math.floor((seconds % 1) * 1000).toString().padStart(3, '0'))
            : '') + "s";
};
const updateCubesPerSec = () => {
    const c = player.cubesThisAscension.challenges, r = player.cubesThisAscension.reincarnation, a = player.cubesThisAscension.ascension;
    if (player.challengecompletions[10] > 0) {
        if (player.challengecompletions[10] === 1) {
            player.cubesThisAscension.cpsOnC10Comp = (c + r + a) / player.ascensionCounter;
        }
        player.cubesThisAscension.maxCubesPerSec = Math.max(player.cubesThisAscension.maxCubesPerSec, (c + r + a) / player.ascensionCounter);
        player.cubesThisAscension.maxAllTime = Math.max(player.cubesThisAscension.maxAllTime, player.cubesThisAscension.maxCubesPerSec);
    }
};
const updateAllTick = () => {
    let a = 0;
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalAccelerator = player.acceleratorBought;
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.costDivisor = 1;
    if (player.upgrades[8] !== 0) {
        a += Math.floor(player.multiplierBought / 7);
    }
    if (player.upgrades[21] !== 0) {
        a += 5;
    }
    if (player.upgrades[22] !== 0) {
        a += 4;
    }
    if (player.upgrades[23] !== 0) {
        a += 3;
    }
    if (player.upgrades[24] !== 0) {
        a += 2;
    }
    if (player.upgrades[25] !== 0) {
        a += 1;
    }
    if (player.upgrades[27] !== 0) {
        a += Math.min(250, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.coins.add(1), 1e3))) + Math.min(1750, Math.max(0, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.coins.add(1), 1e15)) - 50));
    }
    if (player.upgrades[29] !== 0) {
        a += Math.floor(Math.min(2000, (player.firstOwnedCoin + player.secondOwnedCoin + player.thirdOwnedCoin + player.fourthOwnedCoin + player.fifthOwnedCoin) / 80));
    }
    if (player.upgrades[32] !== 0) {
        a += Math.min(500, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.prestigePoints.add(1), 1e25)));
    }
    if (player.upgrades[45] !== 0) {
        a += Math.min(2500, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.transcendShards.add(1), 10)));
    }
    if (player.achievements[5] !== 0) {
        a += Math.floor(player.firstOwnedCoin / 500);
    }
    if (player.achievements[12] !== 0) {
        a += Math.floor(player.secondOwnedCoin / 500);
    }
    if (player.achievements[19] !== 0) {
        a += Math.floor(player.thirdOwnedCoin / 500);
    }
    if (player.achievements[26] !== 0) {
        a += Math.floor(player.fourthOwnedCoin / 500);
    }
    if (player.achievements[33] !== 0) {
        a += Math.floor(player.fifthOwnedCoin / 500);
    }
    if (player.achievements[60] !== 0) {
        a += 2;
    }
    if (player.achievements[61] !== 0) {
        a += 2;
    }
    if (player.achievements[62] !== 0) {
        a += 2;
    }
    a += 5 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('transcend', player.challengecompletions[2]);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.freeUpgradeAccelerator = a;
    a += _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalAcceleratorBoost * (4 + 2 * player.researches[18] + 2 * player.researches[19] + 3 * player.researches[20] + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.cubeBonusMultiplier[1]);
    if (player.unlocks.prestige === true) {
        a += Math.floor(Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune1level * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult / 4, 1.25));
        a *= (1 + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune1level * 1 / 400 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult);
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateAcceleratorMultiplier)();
    a *= _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorMultiplier;
    a = Math.pow(a, Math.min(1, (1 + player.platonicUpgrades[6] / 30) * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.maladaptivePower[player.usedCorruptions[2]] / (1 + Math.abs(player.usedCorruptions[1] - player.usedCorruptions[2]))));
    a *= _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challenge15Rewards.accelerator;
    a = Math.floor(a);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.freeAccelerator = a;
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalAccelerator += _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.freeAccelerator;
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.tuSevenMulti = 1;
    if (player.upgrades[46] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.tuSevenMulti = 1.05;
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower = Math.pow(1.1 + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.tuSevenMulti *
        (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalAcceleratorBoost / 100)
        * (1 + (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('transcend', player.challengecompletions[2]) / 20), 1 + 0.04 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('reincarnation', player.challengecompletions[7]));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower += 1 / 200 * Math.floor((0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('transcend', player.challengecompletions[2]) / 2) * 100 / 100;
    for (let i = 1; i <= 5; i++) {
        if (player.achievements[7 * i - 4] > 0) {
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower += 0.0005 * i;
        }
    }
    if (player.currentChallenge.reincarnation !== 7 && player.currentChallenge.reincarnation !== 10) {
        if (player.currentChallenge.transcension === 1) {
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower *= 25 / (50 + player.challengecompletions[1]);
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower += 0.55;
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower = Math.max(1, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower);
        }
        if (player.currentChallenge.transcension === 2) {
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower = 1;
        }
        if (player.currentChallenge.transcension === 3) {
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower =
                1.05 +
                    2 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.tuSevenMulti *
                        (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalAcceleratorBoost / 300) *
                        (1 + (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('transcend', player.challengecompletions[2]) / 20);
        }
    }
    if (player.currentChallenge.reincarnation === 7) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower = 1;
    }
    if (player.currentChallenge.reincarnation === 10) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower = 1;
    }
    if (player.currentChallenge.transcension !== 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorEffect = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalAccelerator);
    }
    if (player.currentChallenge.transcension === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorEffect = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalAccelerator + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalMultiplier);
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorEffectDisplay = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorPower * 100 - 100);
    if (player.currentChallenge.reincarnation === 10) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorEffect = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.generatorPower = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    if (player.upgrades[11] > 0.5 && player.currentChallenge.reincarnation !== 7) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.generatorPower = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.02, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalAccelerator);
    }
};
const updateAllMultiplier = () => {
    let a = 0;
    if (player.upgrades[7] > 0) {
        a += Math.min(4, 1 + Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.fifthOwnedCoin + 1, 10)));
    }
    if (player.upgrades[9] > 0) {
        a += Math.floor(player.acceleratorBought / 10);
    }
    if (player.upgrades[21] > 0) {
        a += 1;
    }
    if (player.upgrades[22] > 0) {
        a += 1;
    }
    if (player.upgrades[23] > 0) {
        a += 1;
    }
    if (player.upgrades[24] > 0) {
        a += 1;
    }
    if (player.upgrades[25] > 0) {
        a += 1;
    }
    if (player.upgrades[28] > 0) {
        a += Math.min(1000, Math.floor((player.firstOwnedCoin + player.secondOwnedCoin + player.thirdOwnedCoin + player.fourthOwnedCoin + player.fifthOwnedCoin) / 160));
    }
    if (player.upgrades[30] > 0) {
        a += Math.min(75, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.coins.add(1), 1e10))) + Math.min(925, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.coins.add(1), 1e30)));
    }
    if (player.upgrades[33] > 0) {
        a += _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalAcceleratorBoost;
    }
    if (player.upgrades[49] > 0) {
        a += Math.min(50, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.transcendPoints.add(1), 1e10)));
    }
    if (player.upgrades[68] > 0) {
        a += Math.min(2500, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.taxdivisor, 10) * 1 / 1000));
    }
    if (player.challengecompletions[1] > 0) {
        a += 1;
    }
    if (player.achievements[6] > 0.5) {
        a += Math.floor(player.firstOwnedCoin / 1000);
    }
    if (player.achievements[13] > 0.5) {
        a += Math.floor(player.secondOwnedCoin / 1000);
    }
    if (player.achievements[20] > 0.5) {
        a += Math.floor(player.thirdOwnedCoin / 1000);
    }
    if (player.achievements[27] > 0.5) {
        a += Math.floor(player.fourthOwnedCoin / 1000);
    }
    if (player.achievements[34] > 0.5) {
        a += Math.floor(player.fifthOwnedCoin / 1000);
    }
    if (player.achievements[57] > 0.5) {
        a += 1;
    }
    if (player.achievements[58] > 0.5) {
        a += 1;
    }
    if (player.achievements[59] > 0.5) {
        a += 1;
    }
    a += 20 * player.researches[94] * Math.floor((_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune1level + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune2level + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune3level + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune4level + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune5level) / 8);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.freeUpgradeMultiplier = a;
    if (player.achievements[38] > 0.5) {
        a += Math.floor(Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune2level / 10 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult) *
            Math.floor(1 + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune2level / 10 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult) / 2) * 100 / 100;
    }
    a *= (1 + player.achievements[57] / 100);
    a *= (1 + player.achievements[58] / 100);
    a *= (1 + player.achievements[59] / 100);
    a *= Math.pow(1.01, player.upgrades[21] + player.upgrades[22] + player.upgrades[23] + player.upgrades[24] + player.upgrades[25]);
    if (player.upgrades[34] > 0.5) {
        a *= 1.03 * 100 / 100;
    }
    if (player.upgrades[35] > 0.5) {
        a *= 1.05 / 1.03 * 100 / 100;
    }
    a *= (1 + 1 / 5 * player.researches[2] * (1 + 1 / 2 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('ascension', player.challengecompletions[14])));
    a *= (1 + 1 / 20 * player.researches[11] + 1 / 25 * player.researches[12] + 1 / 40 * player.researches[13] + 3 / 200 * player.researches[14] + 1 / 200 * player.researches[15]);
    a *= (1 + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune2level / 400 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult);
    a *= (1 + 1 / 20 * player.researches[87]);
    a *= (1 + 1 / 100 * player.researches[128]);
    a *= (1 + 0.8 / 100 * player.researches[143]);
    a *= (1 + 0.6 / 100 * player.researches[158]);
    a *= (1 + 0.4 / 100 * player.researches[173]);
    a *= (1 + 0.2 / 100 * player.researches[188]);
    a *= (1 + 0.01 / 100 * player.researches[200]);
    a *= (1 + 0.01 / 100 * player.cubeUpgrades[50]);
    a *= (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateSigmoidExponential)(40, (player.antUpgrades[5 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.bonusant5) / 1000 * 40 / 39);
    a *= _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.cubeBonusMultiplier[2];
    if ((player.currentChallenge.transcension !== 0 || player.currentChallenge.reincarnation !== 0) && player.upgrades[50] > 0.5) {
        a *= 1.25;
    }
    a = Math.pow(a, Math.min(1, (1 + player.platonicUpgrades[6] / 30) * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.divisivenessPower[player.usedCorruptions[1]] / (1 + Math.abs(player.usedCorruptions[1] - player.usedCorruptions[2]))));
    a *= _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challenge15Rewards.multiplier;
    a = Math.floor(a);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.freeMultiplier = a;
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.freeMultiplier + player.multiplierBought;
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengeOneLog = 3;
    let b = 0;
    let c = 0;
    b += break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.transcendShards.add(1), 3);
    b *= (1 + 11 * player.researches[33] / 100);
    b *= (1 + 11 * player.researches[34] / 100);
    b *= (1 + 11 * player.researches[35] / 100);
    b *= (1 + player.researches[89] / 5);
    b *= (1 + 10 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveRuneBlessingPower[2]);
    c += Math.floor((0.1 * b * (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('transcend', player.challengecompletions[1])));
    c += ((0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('transcend', player.challengecompletions[1]) * 10);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.freeMultiplierBoost = c;
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalMultiplierBoost = Math.pow(Math.floor(b) + c, 1 + (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('reincarnation', player.challengecompletions[7]) * 0.04);
    let c7 = 1;
    if (player.challengecompletions[7] > 0.5) {
        c7 = 1.25;
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.multiplierPower = 2 + 0.005 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalMultiplierBoost * c7;
    if (player.currentChallenge.reincarnation !== 7 && player.currentChallenge.reincarnation !== 10) {
        if (player.currentChallenge.transcension === 1) {
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.multiplierPower = 1;
        }
        if (player.currentChallenge.transcension === 2) {
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.multiplierPower = (1.25 + 0.0012 * (b + c) * c7);
        }
    }
    if (player.currentChallenge.reincarnation === 7) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.multiplierPower = 1;
    }
    if (player.currentChallenge.reincarnation === 10) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.multiplierPower = 1;
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.multiplierEffect = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.multiplierPower, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalMultiplier);
};
const multipliers = () => {
    let s = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    let c = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    let crystalExponent = 1 / 3;
    crystalExponent += Math.min(10 + 0.05 * player.researches[129] * Math.log(player.commonFragments + 1) / Math.log(4) + 20 * (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateCorruptionPoints)() / 400 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveRuneSpiritPower[3], 0.05 * player.crystalUpgrades[3]);
    crystalExponent += 0.04 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('transcend', player.challengecompletions[3]);
    crystalExponent += 0.08 * player.researches[28];
    crystalExponent += 0.08 * player.researches[29];
    crystalExponent += 0.04 * player.researches[30];
    crystalExponent += 8 * player.cubeUpgrades[17];
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.prestigeMultiplier = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.prestigeShards, crystalExponent).add(1);
    let c7 = 1;
    if (player.currentChallenge.reincarnation === 7) {
        c7 = 0.05;
    }
    if (player.currentChallenge.reincarnation === 8) {
        c7 = 0;
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingPower =
        1 + (1 - Math.pow(2, -1 / 160)) * c7 * break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.reincarnationShards.add(1), 10) *
            (1 + 1 / 20 * player.researches[36] +
                1 / 40 * player.researches[37] + 1 / 40 *
                player.researches[38]) +
            (c7 + 0.2) * 0.25 / 1.2 *
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('reincarnation', player.challengecompletions[8]);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingPower = Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingPower, 1 + player.cubeUpgrades[12] * 0.09);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingPower = Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingPower, 1 + player.cubeUpgrades[36] * 0.05);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationMultiplier = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingPower, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalCoinOwned);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antMultiplier = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.max(1, player.antPoints), (0,_Ants__WEBPACK_IMPORTED_MODULE_16__.calculateCrumbToCoinExp)());
    s = s.times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.multiplierEffect);
    s = s.times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorEffect);
    s = s.times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.prestigeMultiplier);
    s = s.times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationMultiplier);
    s = s.times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antMultiplier);
    const first6CoinUp = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalCoinOwned + 1).times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(1e30, break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.008, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalCoinOwned)));
    if (player.upgrades[6] > 0.5) {
        s = s.times(first6CoinUp);
    }
    if (player.upgrades[12] > 0.5) {
        s = s.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(1e4, break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.01, player.prestigeCount)));
    }
    if (player.upgrades[20] > 0.5) {
        s = s.times(Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalCoinOwned / 4 + 1, 10));
    }
    if (player.upgrades[41] > 0.5) {
        s = s.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(1e30, break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.transcendPoints.add(1), 1 / 2)));
    }
    if (player.upgrades[43] > 0.5) {
        s = s.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(1e30, break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.01, player.transcendCount)));
    }
    if (player.upgrades[48] > 0.5) {
        s = s.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow((_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalMultiplier * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalAccelerator / 1000 + 1), 8));
    }
    if (player.currentChallenge.reincarnation === 6) {
        s = s.dividedBy(1e250);
    }
    if (player.currentChallenge.reincarnation === 7) {
        s = s.dividedBy("1e1250");
    }
    if (player.currentChallenge.reincarnation === 9) {
        s = s.dividedBy("1e2000000");
    }
    if (player.currentChallenge.reincarnation === 10) {
        s = s.dividedBy("1e12500000");
    }
    c = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(s, 1 + 0.001 * player.researches[17]);
    let lol = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(c, 1 + 0.025 * player.upgrades[123]);
    if (player.currentChallenge.ascension === 15 && player.platonicUpgrades[5] > 0) {
        lol = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(lol, 1.1);
    }
    if (player.currentChallenge.ascension === 15 && player.platonicUpgrades[14] > 0) {
        lol = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(lol, 1 + 1 / 20 * player.usedCorruptions[9] * break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.coins.add(1), 10) / (1e7 + break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.coins.add(1), 10)));
    }
    lol = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(lol, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challenge15Rewards.coinExponent);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCoinMultiplier = lol;
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCoinMultiplier = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCoinMultiplier, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.financialcollapsePower[player.usedCorruptions[9]]);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinOneMulti = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    if (player.upgrades[1] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinOneMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinOneMulti.times(first6CoinUp);
    }
    if (player.upgrades[10] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinOneMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinOneMulti.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(2, Math.min(50, player.secondOwnedCoin / 15)));
    }
    if (player.upgrades[56] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinOneMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinOneMulti.times("1e5000");
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinTwoMulti = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    if (player.upgrades[2] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinTwoMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinTwoMulti.times(first6CoinUp);
    }
    if (player.upgrades[13] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinTwoMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinTwoMulti.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(1e50, break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.firstGeneratedMythos.add(player.firstOwnedMythos).add(1), 4 / 3).times(1e10)));
    }
    if (player.upgrades[19] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinTwoMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinTwoMulti.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(1e200, player.transcendPoints.times(1e30).add(1)));
    }
    if (player.upgrades[57] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinTwoMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinTwoMulti.times("1e7500");
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinThreeMulti = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    if (player.upgrades[3] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinThreeMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinThreeMulti.times(first6CoinUp);
    }
    if (player.upgrades[18] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinThreeMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinThreeMulti.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(1e125, player.transcendShards.add(1)));
    }
    if (player.upgrades[58] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinThreeMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinThreeMulti.times("1e15000");
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinFourMulti = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    if (player.upgrades[4] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinFourMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinFourMulti.times(first6CoinUp);
    }
    if (player.upgrades[17] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinFourMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinFourMulti.times(1e100);
    }
    if (player.upgrades[59] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinFourMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinFourMulti.times("1e25000");
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinFiveMulti = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    if (player.upgrades[5] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinFiveMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinFiveMulti.times(first6CoinUp);
    }
    if (player.upgrades[60] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinFiveMulti = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.coinFiveMulti.times("1e35000");
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    if (player.achievements[36] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(2);
    }
    if (player.achievements[37] > 0.5 && player.prestigePoints.gte(10)) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.prestigePoints.add(1), 10));
    }
    if (player.achievements[43] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune3level / 2 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult, 2)
            .times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(2, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune3level * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult / 2 - 8))
            .add(1));
    }
    if (player.upgrades[36] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min("1e5000", break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.prestigePoints, 1 / 500)));
    }
    if (player.upgrades[63] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min("1e6000", break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.reincarnationPoints.add(1), 6)));
    }
    if (player.researches[39] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationMultiplier, 1 / 50));
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, 50 + 2 * player.crystalUpgrades[0]), break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.05, player.achievementPoints * player.crystalUpgrades[0])));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, 100 + 5 * player.crystalUpgrades[1]), break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.coins.add(1), 10), player.crystalUpgrades[1] / 3)));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1 + Math.min(0.12 + 0.88 * player.upgrades[122] + 0.001 * player.researches[129] * Math.log(player.commonFragments + 1) / Math.log(4), 0.001 * player.crystalUpgrades[2]), player.firstOwnedDiamonds + player.secondOwnedDiamonds + player.thirdOwnedDiamonds + player.fourthOwnedDiamonds + player.fifthOwnedDiamonds));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.01, (player.challengecompletions[1] + player.challengecompletions[2] + player.challengecompletions[3] + player.challengecompletions[4] + player.challengecompletions[5]) * player.crystalUpgrades[4]));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('transcend', player.challengecompletions[5])));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1e4, player.researches[5] * (1 + 1 / 2 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('ascension', player.challengecompletions[14]))));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(2.5, player.researches[26]));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(2.5, player.researches[27]));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    if (player.upgrades[37] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.prestigePoints.add(10), 10), 2));
    }
    if (player.upgrades[42] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(1e50, break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.prestigePoints.add(1), 1 / 50).dividedBy(2.5).add(1)));
    }
    if (player.upgrades[47] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier.times(Math.pow(1.05, player.achievementPoints)).times(player.achievementPoints + 1);
    }
    if (player.upgrades[51] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalAcceleratorBoost, 2));
    }
    if (player.upgrades[52] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier, 0.025));
    }
    if (player.upgrades[64] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.reincarnationPoints.add(1), 2));
    }
    if (player.researches[40] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationMultiplier, 1 / 250));
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.grandmasterMultiplier = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalMythosOwned = player.firstOwnedMythos + player.secondOwnedMythos + player.thirdOwnedMythos + player.fourthOwnedMythos + player.fifthOwnedMythos;
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosBuildingPower = 1 + ((0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('transcend', player.challengecompletions[3]) / 200);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengeThreeMultiplier = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosBuildingPower, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.totalMythosOwned);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.grandmasterMultiplier = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.grandmasterMultiplier.times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengeThreeMultiplier);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade13 = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade14 = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade15 = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    if (player.upgrades[53] === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade13 = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade13.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min("1e1250", break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorEffect, 1 / 125)));
    }
    if (player.upgrades[54] === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade14 = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade14.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min("1e2000", break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.multiplierEffect, 1 / 180)));
    }
    if (player.upgrades[55] === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade15 = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade15.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow("1e1000", Math.min(1000, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingPower - 1)));
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(1 + 1 / 2500 * Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune5level * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult * (1 + player.researches[84] / 200 * (1 + 1 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveRuneSpiritPower[5] * (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateCorruptionPoints)() / 400)), 2));
    if (player.upgrades[76] === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(5);
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1 + player.upgrades[77] / 250 + player.researches[96] / 5000, player.firstOwnedAnts + player.secondOwnedAnts + player.thirdOwnedAnts + player.fourthOwnedAnts + player.fifthOwnedAnts + player.sixthOwnedAnts + player.seventhOwnedAnts + player.eighthOwnedAnts));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(1 + player.upgrades[78] * 0.005 * Math.pow(Math.log(player.maxofferings + 1) / Math.log(10), 2));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(Math.pow(1.125, player.shopUpgrades.antSpeedLevel));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.11 + player.researches[101] / 1000 + player.researches[162] / 10000, player.antUpgrades[1 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.bonusant1));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times((0,_Ants__WEBPACK_IMPORTED_MODULE_16__.antSacrificePointsToMultiplier)(player.antSacrificePoints));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(Math.max(1, player.researchPoints), _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveRuneBlessingPower[5]));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(Math.pow(1 + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runeSum / 100, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.talisman6Power));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(Math.pow(1.1, (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('reincarnation', player.challengecompletions[9])));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.cubeBonusMultiplier[6]);
    if (player.achievements[169] === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.antPoints.add(10), 10));
    }
    if (player.achievements[171] === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(1.16666);
    }
    if (player.achievements[172] === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(1 + 2 * (1 - Math.pow(2, -Math.min(1, player.reincarnationcounter / 7200))));
    }
    if (player.upgrades[39] === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(1.60);
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1 + 0.1 * break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.ascendShards.add(1), 10), player.constantUpgrades[5]));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1e5, (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('ascension', player.challengecompletions[11])));
    if (player.researches[147] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.antPoints.add(10), 10));
    }
    if (player.researches[177] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.antPoints.add(10), 10), player.researches[177]));
    }
    if (player.currentChallenge.ascension === 12) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult, 0.5);
    }
    if (player.currentChallenge.ascension === 13) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult, 0.23);
    }
    if (player.currentChallenge.ascension === 14) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult, 0.2);
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult, 1 - 0.9 / 90 * Math.min(99, (0,_Utility__WEBPACK_IMPORTED_MODULE_2__.sumContents)(player.usedCorruptions)));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.extinctionMultiplier[player.usedCorruptions[7]]);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challenge15Rewards.antSpeed);
    if (player.platonicUpgrades[12] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1 + 1 / 100 * player.platonicUpgrades[12], (0,_Utility__WEBPACK_IMPORTED_MODULE_2__.sumContents)(player.highestchallengecompletions)));
    }
    if (player.currentChallenge.ascension === 15 && player.platonicUpgrades[10] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult, 1.25);
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1");
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.05, player.constantUpgrades[1]));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1 + 0.001 * Math.min(100, player.constantUpgrades[2]), player.ascendBuilding1.owned + player.ascendBuilding2.owned + player.ascendBuilding3.owned + player.ascendBuilding4.owned + player.ascendBuilding5.owned));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult.times(1 + 2 / 100 * player.researches[139]);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult.times(1 + 3 / 100 * player.researches[154]);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult.times(1 + 4 / 100 * player.researches[169]);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult.times(1 + 5 / 100 * player.researches[184]);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult.times(1 + 10 / 100 * player.researches[199]);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult.times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challenge15Rewards.constantBonus);
    if (player.platonicUpgrades[5] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult.times(2);
    }
    if (player.platonicUpgrades[10] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult.times(10);
    }
    if (player.platonicUpgrades[15] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult.times(1e5);
    }
};
const resourceGain = (dt) => {
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateTotalCoinOwned)();
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateTotalAcceleratorBoost)();
    updateAllTick();
    updateAllMultiplier();
    multipliers();
    (0,_Tax__WEBPACK_IMPORTED_MODULE_17__.calculatetax)();
    if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceTotal.gte(0.001)) {
        const addcoin = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceTotal.dividedBy(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.taxdivisor), break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.maxexponent - break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.taxdivisorcheck, 10)));
        player.coins = player.coins.add(addcoin.times(dt / 0.025));
        player.coinsThisPrestige = player.coinsThisPrestige.add(addcoin.times(dt / 0.025));
        player.coinsThisTranscension = player.coinsThisTranscension.add(addcoin.times(dt / 0.025));
        player.coinsThisReincarnation = player.coinsThisReincarnation.add(addcoin.times(dt / 0.025));
        player.coinsTotal = player.coinsTotal.add(addcoin.times(dt / 0.025));
    }
    resetCurrency();
    if (player.upgrades[93] === 1 && player.coinsThisPrestige.gte(1e16)) {
        player.prestigePoints = player.prestigePoints.add(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.floor(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.prestigePointGain.dividedBy(4000).times(dt / 0.025)));
    }
    if (player.upgrades[100] === 1 && player.coinsThisTranscension.gte(1e100)) {
        player.transcendPoints = player.transcendPoints.add(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.floor(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.transcendPointGain.dividedBy(4000).times(dt / 0.025)));
    }
    if (player.cubeUpgrades[28] > 0 && player.transcendShards.gte(1e300)) {
        player.reincarnationPoints = player.reincarnationPoints.add(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.floor(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationPointGain.dividedBy(4000).times(dt / 0.025)));
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFirstDiamonds = player.firstGeneratedDiamonds.add(player.firstOwnedDiamonds).times(player.firstProduceDiamonds).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceSecondDiamonds = player.secondGeneratedDiamonds.add(player.secondOwnedDiamonds).times(player.secondProduceDiamonds).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceThirdDiamonds = player.thirdGeneratedDiamonds.add(player.thirdOwnedDiamonds).times(player.thirdProduceDiamonds).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFourthDiamonds = player.fourthGeneratedDiamonds.add(player.fourthOwnedDiamonds).times(player.fourthProduceDiamonds).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFifthDiamonds = player.fifthGeneratedDiamonds.add(player.fifthOwnedDiamonds).times(player.fifthProduceDiamonds).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalCrystalMultiplier);
    player.fourthGeneratedDiamonds = player.fourthGeneratedDiamonds.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFifthDiamonds.times(dt / 0.025));
    player.thirdGeneratedDiamonds = player.thirdGeneratedDiamonds.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFourthDiamonds.times(dt / 0.025));
    player.secondGeneratedDiamonds = player.secondGeneratedDiamonds.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceThirdDiamonds.times(dt / 0.025));
    player.firstGeneratedDiamonds = player.firstGeneratedDiamonds.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceSecondDiamonds.times(dt / 0.025));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceDiamonds = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFirstDiamonds;
    if (player.currentChallenge.transcension !== 3 && player.currentChallenge.reincarnation !== 10) {
        player.prestigeShards = player.prestigeShards.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceDiamonds.times(dt / 0.025));
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFifthMythos = player.fifthGeneratedMythos.add(player.fifthOwnedMythos).times(player.fifthProduceMythos).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.grandmasterMultiplier).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade15);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFourthMythos = player.fourthGeneratedMythos.add(player.fourthOwnedMythos).times(player.fourthProduceMythos).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceThirdMythos = player.thirdGeneratedMythos.add(player.thirdOwnedMythos).times(player.thirdProduceMythos).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade14);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceSecondMythos = player.secondGeneratedMythos.add(player.secondOwnedMythos).times(player.secondProduceMythos).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFirstMythos = player.firstGeneratedMythos.add(player.firstOwnedMythos).times(player.firstProduceMythos).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade13);
    player.fourthGeneratedMythos = player.fourthGeneratedMythos.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFifthMythos.times(dt / 0.025));
    player.thirdGeneratedMythos = player.thirdGeneratedMythos.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFourthMythos.times(dt / 0.025));
    player.secondGeneratedMythos = player.secondGeneratedMythos.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceThirdMythos.times(dt / 0.025));
    player.firstGeneratedMythos = player.firstGeneratedMythos.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceSecondMythos.times(dt / 0.025));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceMythos = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0");
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceMythos = (player.firstGeneratedMythos.add(player.firstOwnedMythos)).times(player.firstProduceMythos).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalMythosMultiplier).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.mythosupgrade13);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.producePerSecondMythos = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceMythos.times(40);
    let pm = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default('1');
    if (player.upgrades[67] > 0.5) {
        pm = pm.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.03, player.firstOwnedParticles + player.secondOwnedParticles + player.thirdOwnedParticles + player.fourthOwnedParticles + player.fifthOwnedParticles));
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFifthParticles = player.fifthGeneratedParticles.add(player.fifthOwnedParticles).times(player.fifthProduceParticles);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFourthParticles = player.fourthGeneratedParticles.add(player.fourthOwnedParticles).times(player.fourthProduceParticles);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceThirdParticles = player.thirdGeneratedParticles.add(player.thirdOwnedParticles).times(player.thirdProduceParticles);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceSecondParticles = player.secondGeneratedParticles.add(player.secondOwnedParticles).times(player.secondProduceParticles);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFirstParticles = player.firstGeneratedParticles.add(player.firstOwnedParticles).times(player.firstProduceParticles).times(pm);
    player.fourthGeneratedParticles = player.fourthGeneratedParticles.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFifthParticles.times(dt / 0.025));
    player.thirdGeneratedParticles = player.thirdGeneratedParticles.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceFourthParticles.times(dt / 0.025));
    player.secondGeneratedParticles = player.secondGeneratedParticles.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceThirdParticles.times(dt / 0.025));
    player.firstGeneratedParticles = player.firstGeneratedParticles.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceSecondParticles.times(dt / 0.025));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0");
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceParticles = (player.firstGeneratedParticles.add(player.firstOwnedParticles)).times(player.firstProduceParticles).times(pm);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.producePerSecondParticles = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceParticles.times(40);
    if (player.currentChallenge.transcension !== 3 && player.currentChallenge.reincarnation !== 10) {
        player.transcendShards = player.transcendShards.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceMythos.times(dt / 0.025));
    }
    if (player.currentChallenge.reincarnation !== 10) {
        player.reincarnationShards = player.reincarnationShards.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.produceParticles.times(dt / 0.025));
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antEightProduce = player.eighthGeneratedAnts.add(player.eighthOwnedAnts).times(player.eighthProduceAnts).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antSevenProduce = player.seventhGeneratedAnts.add(player.seventhOwnedAnts).times(player.seventhProduceAnts).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antSixProduce = player.sixthGeneratedAnts.add(player.sixthOwnedAnts).times(player.sixthProduceAnts).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antFiveProduce = player.fifthGeneratedAnts.add(player.fifthOwnedAnts).times(player.fifthProduceAnts).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antFourProduce = player.fourthGeneratedAnts.add(player.fourthOwnedAnts).times(player.fourthProduceAnts).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antThreeProduce = player.thirdGeneratedAnts.add(player.thirdOwnedAnts).times(player.thirdProduceAnts).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antTwoProduce = player.secondGeneratedAnts.add(player.secondOwnedAnts).times(player.secondProduceAnts).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antOneProduce = player.firstGeneratedAnts.add(player.firstOwnedAnts).times(player.firstProduceAnts).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalAntMult);
    player.seventhGeneratedAnts = player.seventhGeneratedAnts.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antEightProduce.times(dt / 1));
    player.sixthGeneratedAnts = player.sixthGeneratedAnts.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antSevenProduce.times(dt / 1));
    player.fifthGeneratedAnts = player.fifthGeneratedAnts.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antSixProduce.times(dt / 1));
    player.fourthGeneratedAnts = player.fourthGeneratedAnts.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antFiveProduce.times(dt / 1));
    player.thirdGeneratedAnts = player.thirdGeneratedAnts.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antFourProduce.times(dt / 1));
    player.secondGeneratedAnts = player.secondGeneratedAnts.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antThreeProduce.times(dt / 1));
    player.firstGeneratedAnts = player.firstGeneratedAnts.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antTwoProduce.times(dt / 1));
    player.antPoints = player.antPoints.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.antOneProduce.times(dt / 1));
    for (let i = 1; i <= 5; i++) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.ascendBuildingProduction[_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.ordinals[5 - i]] = (player['ascendBuilding' + (6 - i)]['generated']).add(player['ascendBuilding' + (6 - i)]['owned']).times(player['ascendBuilding' + i]['multiplier']).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.globalConstantMult);
        if (i !== 5) {
            player['ascendBuilding' + (5 - i)]['generated'] = player['ascendBuilding' + (5 - i)]['generated']
                .add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.ascendBuildingProduction[_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.ordinals[5 - i]].times(dt));
        }
    }
    player.ascendShards = player.ascendShards.add(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.ascendBuildingProduction.first.times(dt));
    if (player.ascensionCount > 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.ascensionAchievementCheck)(2);
    }
    if (player.researches[71] > 0.5 && player.challengecompletions[1] < (Math.min(player.highestchallengecompletions[1], 25 + 5 * player.researches[66] + 925 * player.researches[105])) && player.coins.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, 1.25 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengeBaseRequirements[0] * Math.pow(1 + player.challengecompletions[1], 2)))) {
        player.challengecompletions[1] += 1;
        (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(1, false);
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.challengeachievementcheck)(1, true);
    }
    if (player.researches[72] > 0.5 && player.challengecompletions[2] < (Math.min(player.highestchallengecompletions[2], 25 + 5 * player.researches[67] + 925 * player.researches[105])) && player.coins.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, 1.6 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengeBaseRequirements[1] * Math.pow(1 + player.challengecompletions[2], 2)))) {
        player.challengecompletions[2] += 1;
        (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(2, false);
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.challengeachievementcheck)(2, true);
    }
    if (player.researches[73] > 0.5 && player.challengecompletions[3] < (Math.min(player.highestchallengecompletions[3], 25 + 5 * player.researches[68] + 925 * player.researches[105])) && player.coins.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, 1.7 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengeBaseRequirements[2] * Math.pow(1 + player.challengecompletions[3], 2)))) {
        player.challengecompletions[3] += 1;
        (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(3, false);
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.challengeachievementcheck)(3, true);
    }
    if (player.researches[74] > 0.5 && player.challengecompletions[4] < (Math.min(player.highestchallengecompletions[4], 25 + 5 * player.researches[69] + 925 * player.researches[105])) && player.coins.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, 1.45 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengeBaseRequirements[3] * Math.pow(1 + player.challengecompletions[4], 2)))) {
        player.challengecompletions[4] += 1;
        (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(4, false);
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.challengeachievementcheck)(4, true);
    }
    if (player.researches[75] > 0.5 && player.challengecompletions[5] < (Math.min(player.highestchallengecompletions[5], 25 + 5 * player.researches[70] + 925 * player.researches[105])) && player.coins.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, 2 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengeBaseRequirements[4] * Math.pow(1 + player.challengecompletions[5], 2)))) {
        player.challengecompletions[5] += 1;
        (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(5, false);
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.challengeachievementcheck)(5, true);
    }
    if (player.coins.gte(1000) && player.unlocks.coinone === false) {
        player.unlocks.coinone = true;
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.revealStuff)();
    }
    if (player.coins.gte(20000) && player.unlocks.cointwo === false) {
        player.unlocks.cointwo = true;
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.revealStuff)();
    }
    if (player.coins.gte(100000) && player.unlocks.cointhree === false) {
        player.unlocks.cointhree = true;
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.revealStuff)();
    }
    if (player.coins.gte(8e6) && player.unlocks.coinfour === false) {
        player.unlocks.coinfour = true;
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.revealStuff)();
    }
    if (player.antPoints.gte(3) && player.achievements[169] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.achievementaward)(169);
    }
    if (player.antPoints.gte(1e5) && player.achievements[170] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.achievementaward)(170);
    }
    if (player.antPoints.gte(666666666) && player.achievements[171] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.achievementaward)(171);
    }
    if (player.antPoints.gte(1e20) && player.achievements[172] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.achievementaward)(172);
    }
    if (player.antPoints.gte(1e40) && player.achievements[173] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.achievementaward)(173);
    }
    if (player.antPoints.gte("1e500") && player.achievements[174] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.achievementaward)(174);
    }
    if (player.antPoints.gte("1e2500") && player.achievements[175] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.achievementaward)(175);
    }
    const chal = player.currentChallenge.transcension;
    const reinchal = player.currentChallenge.reincarnation;
    const ascendchal = player.currentChallenge.ascension;
    if (chal !== 0) {
        if (player.coinsThisTranscension.gte((0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeRequirement)(chal, player.challengecompletions[chal], chal))) {
            resetCheck('challenge', false);
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoChallengeTimerIncrement = 0;
        }
    }
    if (reinchal < 9 && reinchal !== 0) {
        if (player.transcendShards.gte((0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeRequirement)(reinchal, player.challengecompletions[reinchal], reinchal))) {
            resetCheck('reincarnationchallenge', false);
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoChallengeTimerIncrement = 0;
            if (player.challengecompletions[reinchal] >= (25 + 5 * player.cubeUpgrades[29] + 2 * player.shopUpgrades.challengeExtension)) {
                player.autoChallengeIndex += 1;
            }
        }
    }
    if (reinchal >= 9) {
        if (player.coins.gte((0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeRequirement)(reinchal, player.challengecompletions[reinchal], reinchal))) {
            resetCheck('reincarnationchallenge', false);
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoChallengeTimerIncrement = 0;
            if (player.challengecompletions[reinchal] >= (25 + 5 * player.cubeUpgrades[29] + 2 * player.shopUpgrades.challengeExtension)) {
                player.autoChallengeIndex += 1;
                if (player.autoChallengeIndex > 10) {
                    player.autoChallengeIndex = 1;
                }
            }
        }
    }
    if (ascendchal !== 0 && ascendchal < 15) {
        if (player.challengecompletions[10] >= (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeRequirement)(ascendchal, player.challengecompletions[ascendchal], ascendchal)) {
            resetCheck('ascensionChallenge', false);
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.challengeachievementcheck)(ascendchal, true);
        }
    }
    if (ascendchal === 15) {
        if (player.coins.gte((0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeRequirement)(ascendchal, player.challengecompletions[ascendchal], ascendchal))) {
            resetCheck('ascensionChallenge', false);
        }
    }
};
const resetCurrency = () => {
    let prestigePow = 0.5 + (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('transcend', player.challengecompletions[5]) / 100;
    let transcendPow = 0.03;
    if (player.currentChallenge.transcension === 5) {
        prestigePow = 0.01 / (1 + player.challengecompletions[5]);
        transcendPow = 0.001;
    }
    if (player.currentChallenge.reincarnation === 10) {
        prestigePow = (1e-4) / (1 + player.challengecompletions[10]);
        transcendPow = 0.001;
    }
    prestigePow *= _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.deflationMultiplier[player.usedCorruptions[6]];
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.prestigePointGain = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.coinsThisPrestige.dividedBy(1e12), prestigePow));
    if (player.upgrades[16] > 0.5 && player.currentChallenge.transcension !== 5 && player.currentChallenge.reincarnation !== 10) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.prestigePointGain = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.prestigePointGain.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, 1e33), break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.acceleratorEffect, 1 / 3 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.deflationMultiplier[player.usedCorruptions[6]])));
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.transcendPointGain = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.coinsThisTranscension.dividedBy(1e100), transcendPow));
    if (player.upgrades[44] > 0.5 && player.currentChallenge.transcension !== 5 && player.currentChallenge.reincarnation !== 10) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.transcendPointGain = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.transcendPointGain.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.min(1e6, break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.01, player.transcendCount)));
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationPointGain = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.transcendShards.dividedBy(1e300), 0.01));
    if (player.currentChallenge.reincarnation !== 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationPointGain = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationPointGain, 0.01);
    }
    if (player.achievements[50] === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationPointGain = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationPointGain.times(2);
    }
    if (player.upgrades[65] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationPointGain = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationPointGain.times(5);
    }
    if (player.currentChallenge.ascension === 12) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationPointGain = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("0");
    }
};
const resetCheck = (i, manual = true, leaving = false) => {
    if (i === 'prestige') {
        if (player.coinsThisPrestige.gte(1e16) || _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.prestigePointGain.gte(100)) {
            if (manual) {
                resetConfirmation('prestige');
            }
            else {
                (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(1);
                (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("prestige");
            }
        }
    }
    if (i === 'transcend') {
        if ((player.coinsThisTranscension.gte(1e100) || _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.transcendPointGain.gte(0.5)) && player.currentChallenge.transcension === 0) {
            if (manual) {
                resetConfirmation('transcend');
            }
            if (!manual) {
                (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(2);
                (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("transcension");
            }
        }
    }
    if (i === 'challenge') {
        const q = player.currentChallenge.transcension;
        const x = q + 65;
        if (player.currentChallenge.transcension !== 0) {
            const reqCheck = (comp) => player.coinsThisTranscension.gte((0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeRequirement)(q, comp, q));
            const maxCompletions = 25 + 5 * player.researches[x] + 925 * player.researches[105];
            if (reqCheck(player.challengecompletions[q]) && player.challengecompletions[q] < maxCompletions) {
                const maxInc = player.shopUpgrades.instantChallengeBought && player.currentChallenge.ascension !== 13 ? 10 : 1;
                let counter = 0;
                let comp = player.challengecompletions[q];
                while (counter < maxInc) {
                    if (reqCheck(comp) && comp < maxCompletions) {
                        comp++;
                    }
                    counter++;
                }
                player.challengecompletions[q] = comp;
                const y = x - 65;
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(y, false);
                (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.updateChallengeLevel)(y);
            }
            if (player.challengecompletions[q] > player.highestchallengecompletions[q]) {
                while (player.challengecompletions[q] > player.highestchallengecompletions[q]) {
                    player.highestchallengecompletions[q] += 1;
                    const y = x - 65;
                    (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(y, false);
                    (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.updateChallengeLevel)(y);
                    (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.highestChallengeRewards)(q, player.highestchallengecompletions[q]);
                    updateCubesPerSec();
                    (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateCubeBlessings)();
                }
            }
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.challengeachievementcheck)(q);
            if (!player.shopUpgrades.instantChallengeBought || leaving) {
                (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("transcensionChallenge", false, "leaveChallenge");
                player.transcendCount -= 1;
            }
        }
        if (!player.retrychallenges || manual || player.challengecompletions[q] >= (25 + 5 * player.researches[x] + 925 * player.researches[105])) {
            player.currentChallenge.transcension = 0;
            (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.updateChallengeDisplay)();
        }
    }
    if (i === "reincarnate") {
        if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationPointGain.gt(0.5) && player.currentChallenge.transcension === 0 && player.currentChallenge.reincarnation === 0) {
            if (manual) {
                resetConfirmation('reincarnate');
            }
            if (!manual) {
                (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(3);
                (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("reincarnation");
            }
        }
    }
    if (i === "reincarnationchallenge" && player.currentChallenge.reincarnation !== 0) {
        const q = player.currentChallenge.reincarnation;
        if (player.currentChallenge.transcension !== 0) {
            player.currentChallenge.transcension = 0;
        }
        const reqCheck = (comp) => {
            if (q <= 8) {
                return player.transcendShards.gte((0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeRequirement)(q, comp, q));
            }
            else {
                return player.coins.gte((0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeRequirement)(q, comp, q));
            }
        };
        const maxCompletions = 25 + 5 * player.cubeUpgrades[29] + 2 * player.shopUpgrades.challengeExtension + 5 * player.platonicUpgrades[5] + 5 * player.platonicUpgrades[10] + 10 * player.platonicUpgrades[15];
        if (reqCheck(player.challengecompletions[q]) && player.challengecompletions[q] < maxCompletions) {
            const maxInc = player.shopUpgrades.instantChallengeBought && player.currentChallenge.ascension !== 13 ? 10 : 1;
            let counter = 0;
            let comp = player.challengecompletions[q];
            while (counter < maxInc) {
                if (reqCheck(comp) && comp < maxCompletions) {
                    comp++;
                }
                counter++;
            }
            player.challengecompletions[q] = comp;
            (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(q, true);
            (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.updateChallengeLevel)(q);
        }
        if (!player.shopUpgrades.instantChallengeBought || leaving) {
            (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("reincarnationChallenge", false, "leaveChallenge");
            player.reincarnationCount -= 1;
        }
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.challengeachievementcheck)(q);
        if (player.challengecompletions[q] > player.highestchallengecompletions[q]) {
            while (player.challengecompletions[q] > player.highestchallengecompletions[q]) {
                player.highestchallengecompletions[q] += 1;
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.highestChallengeRewards)(q, player.highestchallengecompletions[q]);
                updateCubesPerSec();
                (0,_Hypercubes__WEBPACK_IMPORTED_MODULE_8__.calculateHypercubeBlessings)();
                (0,_Tesseracts__WEBPACK_IMPORTED_MODULE_9__.calculateTesseractBlessings)();
                (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateCubeBlessings)();
            }
        }
        if (!player.retrychallenges || manual || player.challengecompletions[q] > 24 + 5 * player.cubeUpgrades[29] + 2 * player.shopUpgrades.challengeExtension + 5 * player.platonicUpgrades[5] + 5 * player.platonicUpgrades[10] + 10 * player.platonicUpgrades[15]) {
            (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("reincarnationChallenge", false, "leaveChallenge");
            player.currentChallenge.reincarnation = 0;
            if (player.shopUpgrades.instantChallengeBought) {
                for (let i = 1; i <= 5; i++) {
                    player.challengecompletions[i] = player.highestchallengecompletions[i];
                }
            }
            (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.updateChallengeDisplay)();
            (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateRuneLevels)();
            (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateAnts)();
        }
    }
    if (i === "ascend") {
        if (player.challengecompletions[10] > 0) {
            if (manual) {
                resetConfirmation('ascend');
            }
        }
    }
    if (i === "ascensionChallenge" && player.currentChallenge.ascension !== 0) {
        let conf = true;
        if (manual) {
            conf = confirm('Are you absolutely sure that you want to exit the Ascension Challenge? You will need to clear challenge 10 again before you can attempt the challenge again!');
        }
        if (!conf) {
            return;
        }
        const a = player.currentChallenge.ascension;
        const r = player.currentChallenge.reincarnation;
        const t = player.currentChallenge.transcension;
        if (player.challengecompletions[10] >= 50 && a === 11 && player.usedCorruptions[7] >= 5 && player.achievements[247] < 1) {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.achievementaward)(247);
        }
        const maxCompletions = a < 15 ? 30 + 3 * player.platonicUpgrades[5] + 3 * player.platonicUpgrades[10] + 4 * player.platonicUpgrades[15] : 1;
        if (a !== 0 && a < 15) {
            if (player.challengecompletions[10] >= (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeRequirement)(a, player.challengecompletions[a], a) && player.challengecompletions[a] < maxCompletions) {
                player.challengecompletions[a] += 1;
            }
        }
        if (a === 15) {
            if (player.coins.gte((0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeRequirement)(a, player.challengecompletions[a], a)) && player.challengecompletions[a] < maxCompletions) {
                player.challengecompletions[a] += 1;
            }
            else {
                if (player.coins.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, player.challenge15Exponent))) {
                    player.challenge15Exponent = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(player.coins.add(1), 10);
                    (0,_Statistics__WEBPACK_IMPORTED_MODULE_13__.c15RewardUpdate)();
                }
            }
        }
        if (r !== 0) {
            player.currentChallenge.reincarnation = 0;
        }
        if (t !== 0) {
            player.currentChallenge.transcension = 0;
        }
        (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(a, true);
        (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("ascensionChallenge");
        if (player.challengecompletions[a] > player.highestchallengecompletions[a]) {
            player.highestchallengecompletions[a] += 1;
            player.wowHypercubes += 1;
        }
        if (!player.retrychallenges || manual || player.challengecompletions[a] >= maxCompletions || a === 15) {
            player.currentChallenge.ascension = 0;
        }
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.updateChallengeDisplay)();
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.challengeachievementcheck)(a, true);
    }
};
const resetConfirmation = (i) => {
    if (i === 'prestige') {
        if (player.toggles[28] === true) {
            const r = confirm("Prestige will reset coin upgrades, coin producers AND crystals. The first prestige unlocks new features. Would you like to prestige? [Toggle this message in settings.]");
            if (r === true) {
                (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(1);
                (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("prestige");
            }
        }
        else {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(1);
            (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("prestige");
        }
    }
    if (i === 'transcend') {
        if (player.toggles[29] === true) {
            const z = confirm("Transcends will reset coin and prestige upgrades, coin producers, crystal producers AND diamonds. The first transcension unlocks new features. Would you like to prestige? [Toggle this message in settings.]");
            if (z === true) {
                (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(2);
                (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("transcension");
            }
        }
        else {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(2);
            (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("transcension");
        }
    }
    if (i === 'reincarnate') {
        if (player.currentChallenge.ascension !== 12) {
            if (player.toggles[30] === true) {
                const z = confirm("Reincarnating will reset EVERYTHING but in return you will get extraordinarily powerful Particles, and unlock some very strong upgrades and some new features. would you like to Reincarnate? [Disable this message in settings]");
                if (z === true) {
                    (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(3);
                    (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("reincarnation");
                }
            }
            else {
                (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(3);
                (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("reincarnation");
            }
        }
    }
    if (i === 'ascend') {
        const z = !player.toggles[31] || confirm("Ascending will reset all buildings, rune levels [NOT CAP!], talismans, most researches, and the anthill feature for Cubes of Power. Continue? [It is strongly advised you get R5x24 first.]");
        if (z) {
            (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("ascension");
        }
    }
};
const updateAll = () => {
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.uFourteenMulti = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.uFifteenMulti = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
    if (player.upgrades[14] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.uFourteenMulti = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.15, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.freeAccelerator);
    }
    if (player.upgrades[15] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.uFifteenMulti = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.15, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.freeAccelerator);
    }
    if (player.researches[200] >= 1e5 && player.achievements[250] < 1) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.achievementaward)(250);
    }
    if (player.cubeUpgrades[50] >= 1e5 && player.achievements[251] < 1) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.achievementaward)(251);
    }
    if (player.toggles[1] === true && player.upgrades[81] === 1 && player.coins.gte(player.firstCostCoin)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('first', 'Coin', 1, 100);
    }
    if (player.toggles[2] === true && player.upgrades[82] === 1 && player.coins.gte(player.secondCostCoin)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('second', 'Coin', 2, 2e3);
    }
    if (player.toggles[3] === true && player.upgrades[83] === 1 && player.coins.gte(player.thirdCostCoin)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('third', 'Coin', 3, 4e4);
    }
    if (player.toggles[4] === true && player.upgrades[84] === 1 && player.coins.gte(player.fourthCostCoin)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('fourth', 'Coin', 4, 8e5);
    }
    if (player.toggles[5] === true && player.upgrades[85] === 1 && player.coins.gte(player.fifthCostCoin)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('fifth', 'Coin', 5, 1.6e7);
    }
    if (player.toggles[6] === true && player.upgrades[86] === 1 && player.coins.gte(player.acceleratorCost)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyAccelerator)(true);
    }
    if (player.toggles[7] === true && player.upgrades[87] === 1 && player.coins.gte(player.multiplierCost)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMultiplier)(true);
    }
    if (player.toggles[8] === true && player.upgrades[88] === 1 && player.prestigePoints.gte(player.acceleratorBoostCost)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.boostAccelerator)(true);
    }
    if (player.toggles[10] === true && player.achievements[78] === 1 && player.prestigePoints.gte(player.firstCostDiamonds)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('first', 'Diamonds', 1, 1e2);
    }
    if (player.toggles[11] === true && player.achievements[85] === 1 && player.prestigePoints.gte(player.secondCostDiamonds)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('second', 'Diamonds', 3, 1e5);
    }
    if (player.toggles[12] === true && player.achievements[92] === 1 && player.prestigePoints.gte(player.thirdCostDiamonds)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('third', 'Diamonds', 6, 1e15);
    }
    if (player.toggles[13] === true && player.achievements[99] === 1 && player.prestigePoints.gte(player.fourthCostDiamonds)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('fourth', 'Diamonds', 10, 1e40);
    }
    if (player.toggles[14] === true && player.achievements[106] === 1 && player.prestigePoints.gte(player.fifthCostDiamonds)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('fifth', 'Diamonds', 15, 1e100);
    }
    let c = 0;
    c += Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune3level / 16 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult) * 100 / 100;
    if (player.upgrades[73] > 0.5 && player.currentChallenge.reincarnation !== 0) {
        c += 10;
    }
    if (player.achievements[79] > 0.5 && player.prestigeShards.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.crystalUpgradesCost[0] + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.crystalUpgradeCostIncrement[0] * Math.floor(Math.pow(player.crystalUpgrades[0] - 0.5 - c, 2) / 2))))) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyCrystalUpgrades)(1, true);
    }
    if (player.achievements[86] > 0.5 && player.prestigeShards.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.crystalUpgradesCost[1] + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.crystalUpgradeCostIncrement[1] * Math.floor(Math.pow(player.crystalUpgrades[1] - 0.5 - c, 2) / 2))))) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyCrystalUpgrades)(2, true);
    }
    if (player.achievements[93] > 0.5 && player.prestigeShards.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.crystalUpgradesCost[2] + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.crystalUpgradeCostIncrement[2] * Math.floor(Math.pow(player.crystalUpgrades[2] - 0.5 - c, 2) / 2))))) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyCrystalUpgrades)(3, true);
    }
    if (player.achievements[100] > 0.5 && player.prestigeShards.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.crystalUpgradesCost[3] + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.crystalUpgradeCostIncrement[3] * Math.floor(Math.pow(player.crystalUpgrades[3] - 0.5 - c, 2) / 2))))) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyCrystalUpgrades)(4, true);
    }
    if (player.achievements[107] > 0.5 && player.prestigeShards.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.crystalUpgradesCost[4] + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.crystalUpgradeCostIncrement[4] * Math.floor(Math.pow(player.crystalUpgrades[4] - 0.5 - c, 2) / 2))))) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyCrystalUpgrades)(5, true);
    }
    if (player.toggles[16] === true && player.upgrades[94] === 1 && player.transcendPoints.gte(player.firstCostMythos)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('first', 'Mythos', 1, 1);
    }
    if (player.toggles[17] === true && player.upgrades[95] === 1 && player.transcendPoints.gte(player.secondCostMythos)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('second', 'Mythos', 3, 1e2);
    }
    if (player.toggles[18] === true && player.upgrades[96] === 1 && player.transcendPoints.gte(player.thirdCostMythos)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('third', 'Mythos', 6, 1e4);
    }
    if (player.toggles[19] === true && player.upgrades[97] === 1 && player.transcendPoints.gte(player.fourthCostMythos)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('fourth', 'Mythos', 10, 1e8);
    }
    if (player.toggles[20] === true && player.upgrades[98] === 1 && player.transcendPoints.gte(player.fifthCostMythos)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)('fifth', 'Mythos', 15, 1e16);
    }
    if (player.toggles[22] === true && player.reincarnationPoints.gte(player.firstCostParticles)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyParticleBuilding)('first', 1, true);
    }
    if (player.toggles[23] === true && player.reincarnationPoints.gte(player.secondCostParticles)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyParticleBuilding)('second', 1e2, true);
    }
    if (player.toggles[24] === true && player.reincarnationPoints.gte(player.thirdCostParticles)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyParticleBuilding)('third', 1e4, true);
    }
    if (player.toggles[25] === true && player.reincarnationPoints.gte(player.fourthCostParticles)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyParticleBuilding)('fourth', 1e8, true);
    }
    if (player.toggles[26] === true && player.reincarnationPoints.gte(player.fifthCostParticles)) {
        (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyParticleBuilding)('fifth', 1e16, true);
    }
    if (player.researches[175] > 0) {
        for (let i = 1; i <= 10; i++) {
            if (player.ascendShards.gte((0,_Upgrades__WEBPACK_IMPORTED_MODULE_5__.getConstUpgradeMetadata)(i).pop())) {
                (0,_Upgrades__WEBPACK_IMPORTED_MODULE_5__.buyConstantUpgrades)(i, true);
            }
        }
    }
    if ((player.researches[190] > 0) && (player.tesseractAutoBuyerToggle == 1)) {
        const cheapestTesseractBuilding = { cost: 0, intCost: 0, index: 0, intCostArray: [1, 10, 100, 1000, 10000] };
        for (let i = 0; i < cheapestTesseractBuilding.intCostArray.length; i++) {
            if ((player.wowTesseracts >= cheapestTesseractBuilding.intCostArray[i] * Math.pow(1 + player['ascendBuilding' + (i + 1)]['owned'], 3) + player.tesseractAutoBuyerAmount) && player.autoTesseracts[i + 1]) {
                if (((0,_Buy__WEBPACK_IMPORTED_MODULE_20__.getTesseractCost)(cheapestTesseractBuilding.intCostArray[i], i + 1)[1] < cheapestTesseractBuilding.cost) || (cheapestTesseractBuilding.cost == 0)) {
                    cheapestTesseractBuilding.cost = (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.getTesseractCost)(cheapestTesseractBuilding.intCostArray[i], i + 1)[1];
                    cheapestTesseractBuilding.intCost = cheapestTesseractBuilding.intCostArray[i];
                    cheapestTesseractBuilding.index = i + 1;
                }
            }
        }
        if (cheapestTesseractBuilding.index > 0) {
            (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyTesseractBuilding)(cheapestTesseractBuilding.intCost, cheapestTesseractBuilding.index);
        }
    }
    if (player.upgrades[101] > 0.5) {
        player.fourthGeneratedCoin = player.fourthGeneratedCoin.add((player.fifthGeneratedCoin.add(player.fifthOwnedCoin)).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.uFifteenMulti).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.generatorPower));
    }
    if (player.upgrades[102] > 0.5) {
        player.thirdGeneratedCoin = player.thirdGeneratedCoin.add((player.fourthGeneratedCoin.add(player.fourthOwnedCoin)).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.uFourteenMulti).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.generatorPower));
    }
    if (player.upgrades[103] > 0.5) {
        player.secondGeneratedCoin = player.secondGeneratedCoin.add((player.thirdGeneratedCoin.add(player.thirdOwnedCoin)).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.generatorPower));
    }
    if (player.upgrades[104] > 0.5) {
        player.firstGeneratedCoin = player.firstGeneratedCoin.add((player.secondGeneratedCoin.add(player.secondOwnedCoin)).times(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.generatorPower));
    }
    if (player.upgrades[105] > 0.5) {
        player.fifthGeneratedCoin = player.fifthGeneratedCoin.add(player.firstOwnedCoin);
    }
    let p = 1;
    p += 1 / 100 * (player.achievements[71] + player.achievements[72] + player.achievements[73] + player.achievements[74] + player.achievements[75] + player.achievements[76] + player.achievements[77]);
    let a = 0;
    if (player.upgrades[106] > 0.5) {
        a += 0.10;
    }
    if (player.upgrades[107] > 0.5) {
        a += 0.15;
    }
    if (player.upgrades[108] > 0.5) {
        a += 0.25;
    }
    if (player.upgrades[109] > 0.5) {
        a += 0.25;
    }
    if (player.upgrades[110] > 0.5) {
        a += 0.25;
    }
    a *= p;
    let b = 0;
    if (player.upgrades[111] > 0.5) {
        b += 0.08;
    }
    if (player.upgrades[112] > 0.5) {
        b += 0.08;
    }
    if (player.upgrades[113] > 0.5) {
        b += 0.08;
    }
    if (player.upgrades[114] > 0.5) {
        b += 0.08;
    }
    if (player.upgrades[115] > 0.5) {
        b += 0.08;
    }
    b *= p;
    c = 0;
    if (player.upgrades[116] > 0.5) {
        c += 0.05;
    }
    if (player.upgrades[117] > 0.5) {
        c += 0.05;
    }
    if (player.upgrades[118] > 0.5) {
        c += 0.05;
    }
    if (player.upgrades[119] > 0.5) {
        c += 0.05;
    }
    if (player.upgrades[120] > 0.5) {
        c += 0.05;
    }
    c *= p;
    if (a !== 0) {
        player.fifthGeneratedCoin = player.fifthGeneratedCoin.add(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.firstGeneratedDiamonds.add(player.firstOwnedDiamonds).add(1), a));
    }
    if (b !== 0) {
        player.fifthGeneratedDiamonds = player.fifthGeneratedDiamonds.add(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.firstGeneratedMythos.add(player.firstOwnedMythos).add(1), b));
    }
    if (c !== 0) {
        player.fifthGeneratedMythos = player.fifthGeneratedMythos.add(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(player.firstGeneratedParticles.add(player.firstOwnedParticles).add(1), c));
    }
    if (player.runeshards > player.maxofferings) {
        player.maxofferings = player.runeshards;
    }
    if (player.researchPoints > player.maxobtainium) {
        player.maxobtainium = player.researchPoints;
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult = 1;
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult *= (1 + player.researches[4] / 10 * (1 + 1 / 2 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('ascension', player.challengecompletions[14])));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult *= (1 + player.researches[21] / 100);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult *= (1 + player.researches[90] / 100);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult *= (1 + player.researches[131] / 200);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult *= (1 + player.researches[161] / 200 * 3 / 5);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult *= (1 + player.researches[176] / 200 * 2 / 5);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult *= (1 + player.researches[191] / 200 * 1 / 5);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult *= (1 + player.researches[146] / 200 * 4 / 5);
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult *= (1 + 0.01 * Math.log(player.talismanShards + 1) / Math.log(4) * Math.min(1, player.constantUpgrades[9]));
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.effectiveLevelMult *= _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challenge15Rewards.runeBonus;
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.optimalOfferingTimer = 600 + 30 * player.researches[85] + 0.4 * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune5level + 120 * player.shopUpgrades.offeringTimerLevel;
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.optimalObtainiumTimer = 3600 + 120 * player.shopUpgrades.obtainiumTimerLevel;
    (0,_Ants__WEBPACK_IMPORTED_MODULE_16__.autoBuyAnts)();
    if (player.autoAscend) {
        if (player.autoAscendMode === "c10Completions" && player.challengecompletions[10] >= Math.max(1, player.autoAscendThreshold)) {
            (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("ascension", true);
        }
    }
    let metaData = null;
    if (player.researches[175] > 0) {
        for (let i = 1; i <= 10; i++) {
            metaData = (0,_Upgrades__WEBPACK_IMPORTED_MODULE_5__.getConstUpgradeMetadata)(i);
            if (player.ascendShards.gte(metaData[1])) {
                (0,_Upgrades__WEBPACK_IMPORTED_MODULE_5__.buyConstantUpgrades)(i, true);
            }
        }
    }
    const reductionValue = (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.getReductionValue)();
    if (reductionValue !== _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.prevReductionValue) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.prevReductionValue = reductionValue;
        const resources = ["Coin", "Diamonds", "Mythos"];
        const scalings = [
            (value) => value,
            (value) => value * (value + 1) / 2,
            (value) => value * (value + 1) / 2
        ];
        const originalCosts = [
            [100, 2e3, 4e4, 8e5, 1.6e7],
            [1e2, 1e5, 1e15, 1e40, 1e100],
            [1, 1e2, 1e4, 1e8, 1e16],
        ];
        for (let res = 0; res < resources.length; ++res) {
            const resource = resources[res];
            for (let ord = 0; ord < 5; ++ord) {
                const num = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.ordinals[ord];
                player[num + "Cost" + resource] = (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.getCost)(originalCosts[res][ord], player[num + "Owned" + resource] + 1, resource, scalings[res](ord + 1), reductionValue);
            }
        }
        for (let i = 0; i <= 4; i++) {
            const particleOriginalCost = [1, 1e2, 1e4, 1e8, 1e16];
            const array = ['first', 'second', 'third', 'fourth', 'fifth'];
            const buyTo = player[array[i] + 'OwnedParticles'] + 1;
            player[array[i] + 'CostParticles'] = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(2, buyTo - 1).times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1.001, Math.max(0, (buyTo - 325000)) * Math.max(0, (buyTo - 325000) + 1) / 2))).times(particleOriginalCost[i]);
        }
    }
};
const constantIntervals = () => {
    interval(saveSynergy, 5000);
    interval(_Automation__WEBPACK_IMPORTED_MODULE_21__.autoUpgrades, 200);
    interval(_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.buttoncolorchange, 200);
    interval(_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.htmlInserts, 16);
    interval(updateAll, 100);
    interval(_Achievements__WEBPACK_IMPORTED_MODULE_18__.buildingAchievementCheck, 200);
    if (!_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.timeWarp) {
        document.getElementById("preload").style.display = "none";
        document.getElementById("offlineprogress").style.display = "none";
        document.getElementById("game").style.display = "block";
    }
};
let lastUpdate = 0;
const createTimer = () => {
    lastUpdate = performance.now();
    interval(tick, 5);
};
const dt = 5;
const filterStrength = 20;
let deltaMean = 0;
const tick = () => {
    const now = performance.now();
    let delta = now - lastUpdate;
    deltaMean += (delta - deltaMean) / filterStrength;
    let dtEffective;
    while (delta > 5) {
        dtEffective = dt;
        dtEffective += deltaMean > 16 ? Math.min(3600 * 1000, deltaMean - dt) : 0;
        dtEffective = Math.min(delta, dtEffective);
        tack(dtEffective / 1000);
        lastUpdate += dtEffective;
        delta -= dtEffective;
    }
};
function tack(dt) {
    if (!_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.timeWarp) {
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.dailyResetCheck)();
        const timeMult = (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateTimeAcceleration)();
        resourceGain(dt * timeMult);
        (0,_Helper__WEBPACK_IMPORTED_MODULE_28__.addTimers)("prestige", dt);
        (0,_Helper__WEBPACK_IMPORTED_MODULE_28__.addTimers)("transcension", dt);
        (0,_Helper__WEBPACK_IMPORTED_MODULE_28__.addTimers)("reincarnation", dt);
        (0,_Helper__WEBPACK_IMPORTED_MODULE_28__.addTimers)("ascension", dt);
        (0,_Helper__WEBPACK_IMPORTED_MODULE_28__.addTimers)("quarks", dt);
        if (player.shopUpgrades.offeringAutoLevel > 0.5 && player.autoSacrificeToggle) {
            (0,_Helper__WEBPACK_IMPORTED_MODULE_28__.automaticTools)("runeSacrifice", dt);
        }
        if (player.achievements[173] === 1) {
            (0,_Helper__WEBPACK_IMPORTED_MODULE_28__.automaticTools)("antSacrifice", dt);
        }
        if (player.researches[61] === 1) {
            (0,_Helper__WEBPACK_IMPORTED_MODULE_28__.automaticTools)("addObtainium", dt);
        }
        if (player.autoResearchToggle && player.autoResearch <= (0,_Research__WEBPACK_IMPORTED_MODULE_6__.maxRoombaResearchIndex)(player)) {
            let counter = 0;
            const maxCount = 1 + player.challengecompletions[14];
            while (counter < maxCount) {
                if (player.autoResearch > 0) {
                    const linGrowth = (player.autoResearch === 200) ? 0.01 : 0;
                    (0,_Research__WEBPACK_IMPORTED_MODULE_6__.buyResearch)(player.autoResearch, true, linGrowth);
                }
                else {
                    break;
                }
                counter++;
            }
        }
    }
    if (player.highestchallengecompletions[3] > 0) {
        (0,_Helper__WEBPACK_IMPORTED_MODULE_28__.automaticTools)("addOfferings", dt / 2);
    }
    if (player.cubeUpgrades[2] > 0) {
        (0,_Helper__WEBPACK_IMPORTED_MODULE_28__.automaticTools)("addOfferings", dt * player.cubeUpgrades[2]);
    }
    if (player.researches[130] > 0 || player.researches[135] > 0) {
        if (player.researches[135] > 0 && player.autoEnhanceToggle == true) {
            if (player.achievements[119] > 0) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanEnhance)(1, true);
            }
            if (player.achievements[126] > 0) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanEnhance)(2, true);
            }
            if (player.achievements[133] > 0) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanEnhance)(3, true);
            }
            if (player.achievements[140] > 0) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanEnhance)(4, true);
            }
            if (player.achievements[147] > 0) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanEnhance)(5, true);
            }
            if (player.antUpgrades[12 - 1] > 0 || player.ascensionCount > 0) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanEnhance)(6, true);
            }
            if (player.shopUpgrades.talismanBought) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanEnhance)(7, true);
            }
        }
        if (player.researches[130] > 0 && player.autoFortifyToggle == true) {
            if (player.achievements[119] > 0) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanLevels)(1, true);
            }
            if (player.achievements[126] > 0) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanLevels)(2, true);
            }
            if (player.achievements[133] > 0) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanLevels)(3, true);
            }
            if (player.achievements[140] > 0) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanLevels)(4, true);
            }
            if (player.achievements[147] > 0) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanLevels)(5, true);
            }
            if (player.antUpgrades[12 - 1] > 0 || player.ascensionCount > 0) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanLevels)(6, true);
            }
            if (player.shopUpgrades.talismanBought) {
                (0,_Talismans__WEBPACK_IMPORTED_MODULE_11__.buyTalismanLevels)(7, true);
            }
        }
    }
    (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.runChallengeSweep)(dt);
    if (player.resettoggle1 === 1 || player.resettoggle1 === 0) {
        if (player.toggles[15] === true && player.achievements[43] === 1 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.prestigePointGain.gte(player.prestigePoints.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, player.prestigeamount))) && player.coinsThisPrestige.gte(1e16)) {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(1);
            (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("prestige", true);
        }
    }
    if (player.resettoggle1 === 2) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoResetTimers.prestige += dt;
        const time = Math.max(0.01, player.prestigeamount);
        if (player.toggles[15] === true && player.achievements[43] === 1 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoResetTimers.prestige >= time && player.coinsThisPrestige.gte(1e16)) {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(1);
            (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("prestige", true);
        }
    }
    if (player.resettoggle2 === 1 || player.resettoggle2 === 0) {
        if (player.toggles[21] === true && player.upgrades[89] === 1 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.transcendPointGain.gte(player.transcendPoints.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, player.transcendamount))) && player.coinsThisTranscension.gte(1e100) && player.currentChallenge.transcension === 0) {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(2);
            (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("transcension", true);
        }
    }
    if (player.resettoggle2 === 2) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoResetTimers.transcension += dt;
        const time = Math.max(0.01, player.transcendamount);
        if (player.toggles[21] === true && player.upgrades[89] === 1 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoResetTimers.transcension >= time && player.coinsThisTranscension.gte(1e100) && player.currentChallenge.transcension === 0) {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(2);
            (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("transcension", true);
        }
    }
    if (player.currentChallenge.ascension !== 12) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoResetTimers.reincarnation += dt;
        if (player.resettoggle3 === 2) {
            const time = Math.max(0.01, player.reincarnationamount);
            if (player.toggles[27] === true && player.researches[46] > 0.5 && player.transcendShards.gte("1e300") && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoResetTimers.reincarnation >= time && player.currentChallenge.transcension === 0 && player.currentChallenge.reincarnation === 0) {
                (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(3);
                (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("reincarnation", true);
            }
        }
        if (player.resettoggle3 === 1 || player.resettoggle3 === 0) {
            if (player.toggles[27] === true && player.researches[46] > 0.5 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationPointGain.gte(player.reincarnationPoints.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, player.reincarnationamount))) && player.transcendShards.gte(1e300) && player.currentChallenge.transcension === 0 && player.currentChallenge.reincarnation === 0) {
                (0,_Achievements__WEBPACK_IMPORTED_MODULE_18__.resetachievementcheck)(3);
                (0,_Reset__WEBPACK_IMPORTED_MODULE_19__.reset)("reincarnation", true);
            }
        }
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_10__.calculateOfferings)("reincarnation");
}
document.addEventListener('keydown', (event) => {
    if (document.activeElement && document.activeElement.localName === 'input') {
        event.stopPropagation();
        return;
    }
    let type = "";
    let pos = "";
    let num = 0;
    let cost = [null, 1, 100, 1e4, 1e8, 1e16];
    if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "coin") {
        cost = [null, 100, 2000, 4e4, 8e5, 1.6e7];
        type = "Coin";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "diamond") {
        cost = [null, 100, 1e5, 1e15, 1e40, 1e100];
        type = "Diamonds";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "mythos") {
        type = "Mythos";
    }
    const key = event.key.toUpperCase();
    switch (key) {
        case "1":
            pos = 'first';
            num = 1;
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "buildings") {
                _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "particle" ? (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyParticleBuilding)(pos, cost[1]) : (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)(pos, type, num, cost[1]);
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "runes") {
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "runes") {
                    (0,_Runes__WEBPACK_IMPORTED_MODULE_22__.redeemShards)(1);
                }
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "blessings") {
                    (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyRuneBonusLevels)('Blessings', 1);
                }
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "spirits") {
                    (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyRuneBonusLevels)('Spirits', 1);
                }
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "challenges") {
                (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleChallenges)(1);
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(1);
            }
            break;
        case "2":
            pos = 'second';
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "coin" ? num = 2 : num = 3;
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "buildings") {
                _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "particle" ? (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyParticleBuilding)(pos, cost[2]) : (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)(pos, type, num, cost[2]);
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "runes") {
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "runes") {
                    (0,_Runes__WEBPACK_IMPORTED_MODULE_22__.redeemShards)(2);
                }
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "blessings") {
                    (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyRuneBonusLevels)('Blessings', 2);
                }
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "spirits") {
                    (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyRuneBonusLevels)('Spirits', 2);
                }
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "challenges") {
                (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleChallenges)(2);
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(2);
            }
            break;
        case "3":
            pos = 'third';
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "coin" ? num = 3 : num = 6;
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "buildings") {
                _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "particle" ? (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyParticleBuilding)(pos, cost[3]) : (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)(pos, type, num, cost[3]);
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "runes") {
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "runes") {
                    (0,_Runes__WEBPACK_IMPORTED_MODULE_22__.redeemShards)(3);
                }
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "blessings") {
                    (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyRuneBonusLevels)('Blessings', 3);
                }
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "spirits") {
                    (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyRuneBonusLevels)('Spirits', 3);
                }
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "challenges") {
                (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleChallenges)(3);
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(3);
            }
            break;
        case "4":
            pos = 'fourth';
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "coin" ? num = 4 : num = 10;
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "buildings") {
                _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "particle" ? (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyParticleBuilding)(pos, cost[4]) : (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)(pos, type, num, cost[4]);
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "runes") {
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "runes") {
                    (0,_Runes__WEBPACK_IMPORTED_MODULE_22__.redeemShards)(4);
                }
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "blessings") {
                    (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyRuneBonusLevels)('Blessings', 4);
                }
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "spirits") {
                    (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyRuneBonusLevels)('Spirits', 4);
                }
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "challenges") {
                (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleChallenges)(4);
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(4);
            }
            break;
        case "5":
            pos = 'fifth';
            _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "coin" ? num = 5 : num = 15;
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "buildings") {
                _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "particle" ? (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyParticleBuilding)(pos, cost[5]) : (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMax)(pos, type, num, cost[5]);
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "runes") {
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "runes") {
                    (0,_Runes__WEBPACK_IMPORTED_MODULE_22__.redeemShards)(5);
                }
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "blessings") {
                    (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyRuneBonusLevels)('Blessings', 5);
                }
                if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.runescreen === "spirits") {
                    (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyRuneBonusLevels)('Spirits', 5);
                }
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "challenges") {
                (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleChallenges)(5);
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(5);
            }
            break;
        case "6":
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "buildings" && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "diamond") {
                (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyCrystalUpgrades)(1);
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "challenges" && player.reincarnationCount > 0) {
                (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleChallenges)(6);
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(6);
            }
            break;
        case "7":
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "buildings" && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "diamond") {
                (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyCrystalUpgrades)(2);
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "challenges" && player.achievements[113] === 1) {
                (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleChallenges)(7);
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(7);
            }
            break;
        case "8":
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "buildings" && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "diamond") {
                (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyCrystalUpgrades)(3);
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "challenges" && player.achievements[120] === 1) {
                (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleChallenges)(8);
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(8);
            }
            break;
        case "9":
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "buildings" && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "diamond") {
                (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyCrystalUpgrades)(4);
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "challenges" && player.achievements[127] === 1) {
                (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleChallenges)(9);
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(9);
            }
            break;
        case "0":
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "buildings" && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.buildingSubTab === "diamond") {
                (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyCrystalUpgrades)(5);
            }
            if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.currentTab === "challenges" && player.achievements[134] === 1) {
                (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleChallenges)(10);
                (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.challengeDisplay)(10);
            }
            break;
        case "A":
            (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyAccelerator)();
            break;
        case "B":
            (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.boostAccelerator)();
            break;
        case "E":
            if (player.currentChallenge.reincarnation !== 0) {
                resetCheck('reincarnationchallenge', undefined, true);
            }
            if (player.currentChallenge.transcension !== 0) {
                resetCheck('challenge', undefined, true);
            }
            break;
        case "M":
            (0,_Buy__WEBPACK_IMPORTED_MODULE_20__.buyMultiplier)();
            break;
        case "P":
            resetCheck('prestige');
            break;
        case "R":
            resetCheck('reincarnate');
            break;
        case "S":
            (0,_Ants__WEBPACK_IMPORTED_MODULE_16__.sacrificeAnts)();
            break;
        case "T":
            resetCheck('transcend');
            break;
        case "ARROWLEFT":
            event.preventDefault();
            (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.keyboardTabChange)(-1);
            break;
        case "ARROWRIGHT":
            event.preventDefault();
            (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.keyboardTabChange)(1);
            break;
        case "ARROWUP":
            event.preventDefault();
            (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.keyboardTabChange)(-1, false);
            break;
        case "ARROWDOWN":
            event.preventDefault();
            (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.keyboardTabChange)(1, false);
            break;
    }
});
window.addEventListener('load', () => {
    if (location.href.includes('kong')) {
        const script = document.createElement('script');
        script.setAttribute('src', 'https://cdn1.kongregate.com/javascripts/kongregate_api.js');
        document.head.appendChild(script);
    }
    const ver = document.getElementById('versionnumber');
    ver && (ver.textContent = `You're Testing v${player.version} - Seal of the Merchant [Last Update: 2:40AM UTC-8 30-Jan-2021]. Savefiles cannot be used in live!`);
    document.title = 'Synergism v' + player.version;
    const dec = lz_string__WEBPACK_IMPORTED_MODULE_1___default().decompressFromBase64(localStorage.getItem('Synergysave2'));
    const isLZString = dec !== '';
    if (isLZString) {
        localStorage.clear();
        localStorage.setItem('Synergysave2', btoa(dec));
        alert('Transferred save to new format successfully!');
    }
    (0,_Corruptions__WEBPACK_IMPORTED_MODULE_25__.corruptionButtonsAdd)();
    (0,_Corruptions__WEBPACK_IMPORTED_MODULE_25__.corruptionLoadoutTableCreate)();
    setTimeout(() => {
        (0,_EventListeners__WEBPACK_IMPORTED_MODULE_26__.generateEventHandlers)();
        loadSynergy();
        saveSynergy();
        (0,_Toggles__WEBPACK_IMPORTED_MODULE_12__.toggleauto)();
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.revealStuff)();
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.hideStuff)();
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_7__.htmlInserts)();
        createTimer();
        constantIntervals();
        (0,_Plugins_Plugins__WEBPACK_IMPORTED_MODULE_27__.loadPlugins)();
    }, 0);
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (player);


/***/ }),
/* 1 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var pad_end__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var pad_end__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pad_end__WEBPACK_IMPORTED_MODULE_0__);


// consider adding them together pointless, just return the larger one

var MAX_SIGNIFICANT_DIGITS = 17; // Highest value you can safely put here is Number.MAX_SAFE_INTEGER-MAX_SIGNIFICANT_DIGITS

var EXP_LIMIT = 9e15; // The largest exponent that can appear in a Number, though not all mantissas are valid here.

var NUMBER_EXP_MAX = 308; // The smallest exponent that can appear in a Number, though not all mantissas are valid here.

var NUMBER_EXP_MIN = -324; // Tolerance which is used for Number conversion to compensate floating-point error.

var ROUND_TOLERANCE = 1e-10;

var powerOf10 = function () {
  // We need this lookup table because Math.pow(10, exponent)
  // when exponent's absolute value is large is slightly inaccurate.
  // You can fix it with the power of math... or just make a lookup table.
  // Faster AND simpler
  var powersOf10 = [];

  for (var i = NUMBER_EXP_MIN + 1; i <= NUMBER_EXP_MAX; i++) {
    powersOf10.push(Number("1e" + i));
  }

  var indexOf0InPowersOf10 = 323;
  return function (power) {
    return powersOf10[power + indexOf0InPowersOf10];
  };
}();

var D = function D(value) {
  return value instanceof Decimal ? value : new Decimal(value);
};

var ME = function ME(mantissa, exponent) {
  return new Decimal().fromMantissaExponent(mantissa, exponent);
};

var ME_NN = function ME_NN(mantissa, exponent) {
  return new Decimal().fromMantissaExponent_noNormalize(mantissa, exponent);
};

function affordGeometricSeries(resourcesAvailable, priceStart, priceRatio, currentOwned) {
  var actualStart = priceStart.mul(priceRatio.pow(currentOwned));
  return Decimal.floor(resourcesAvailable.div(actualStart).mul(priceRatio.sub(1)).add(1).log10() / priceRatio.log10());
}

function sumGeometricSeries(numItems, priceStart, priceRatio, currentOwned) {
  return priceStart.mul(priceRatio.pow(currentOwned)).mul(Decimal.sub(1, priceRatio.pow(numItems))).div(Decimal.sub(1, priceRatio));
}

function affordArithmeticSeries(resourcesAvailable, priceStart, priceAdd, currentOwned) {
  // n = (-(a-d/2) + sqrt((a-d/2)^2+2dS))/d
  // where a is actualStart, d is priceAdd and S is resourcesAvailable
  // then floor it and you're done!
  var actualStart = priceStart.add(currentOwned.mul(priceAdd));
  var b = actualStart.sub(priceAdd.div(2));
  var b2 = b.pow(2);
  return b.neg().add(b2.add(priceAdd.mul(resourcesAvailable).mul(2)).sqrt()).div(priceAdd).floor();
}

function sumArithmeticSeries(numItems, priceStart, priceAdd, currentOwned) {
  var actualStart = priceStart.add(currentOwned.mul(priceAdd)); // (n/2)*(2*a+(n-1)*d)

  return numItems.div(2).mul(actualStart.mul(2).plus(numItems.sub(1).mul(priceAdd)));
}

function efficiencyOfPurchase(cost, currentRpS, deltaRpS) {
  return cost.div(currentRpS).add(cost.div(deltaRpS));
}
/**
 * The Decimal's value is simply mantissa * 10^exponent.
 */


var Decimal =
/** @class */
function () {
  function Decimal(value) {
    /**
     * A number (double) with absolute value between [1, 10) OR exactly 0.
     * If mantissa is ever 10 or greater, it should be normalized
     * (divide by 10 and add 1 to exponent until it is less than 10,
     * or multiply by 10 and subtract 1 from exponent until it is 1 or greater).
     * Infinity/-Infinity/NaN will cause bad things to happen.
     */
    this.mantissa = NaN;
    /**
     * A number (integer) between -EXP_LIMIT and EXP_LIMIT.
     * Non-integral/out of bounds will cause bad things to happen.
     */

    this.exponent = NaN;

    if (value === undefined) {
      this.m = 0;
      this.e = 0;
    } else if (value instanceof Decimal) {
      this.fromDecimal(value);
    } else if (typeof value === "number") {
      this.fromNumber(value);
    } else {
      this.fromString(value);
    }
  }

  Object.defineProperty(Decimal.prototype, "m", {
    get: function get() {
      return this.mantissa;
    },
    set: function set(value) {
      this.mantissa = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Decimal.prototype, "e", {
    get: function get() {
      return this.exponent;
    },
    set: function set(value) {
      this.exponent = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Decimal.prototype, "s", {
    get: function get() {
      return this.sign();
    },
    set: function set(value) {
      if (value === 0) {
        this.e = 0;
        this.m = 0;
        return;
      }

      if (this.sgn() !== value) {
        this.m = -this.m;
      }
    },
    enumerable: true,
    configurable: true
  });

  Decimal.fromMantissaExponent = function (mantissa, exponent) {
    return new Decimal().fromMantissaExponent(mantissa, exponent);
  };

  Decimal.fromMantissaExponent_noNormalize = function (mantissa, exponent) {
    return new Decimal().fromMantissaExponent_noNormalize(mantissa, exponent);
  };

  Decimal.fromDecimal = function (value) {
    return new Decimal().fromDecimal(value);
  };

  Decimal.fromNumber = function (value) {
    return new Decimal().fromNumber(value);
  };

  Decimal.fromString = function (value) {
    return new Decimal().fromString(value);
  };

  Decimal.fromValue = function (value) {
    return new Decimal().fromValue(value);
  };

  Decimal.fromValue_noAlloc = function (value) {
    return value instanceof Decimal ? value : new Decimal(value);
  };

  Decimal.abs = function (value) {
    return D(value).abs();
  };

  Decimal.neg = function (value) {
    return D(value).neg();
  };

  Decimal.negate = function (value) {
    return D(value).neg();
  };

  Decimal.negated = function (value) {
    return D(value).neg();
  };

  Decimal.sign = function (value) {
    return D(value).sign();
  };

  Decimal.sgn = function (value) {
    return D(value).sign();
  };

  Decimal.round = function (value) {
    return D(value).round();
  };

  Decimal.floor = function (value) {
    return D(value).floor();
  };

  Decimal.ceil = function (value) {
    return D(value).ceil();
  };

  Decimal.trunc = function (value) {
    return D(value).trunc();
  };

  Decimal.add = function (value, other) {
    return D(value).add(other);
  };

  Decimal.plus = function (value, other) {
    return D(value).add(other);
  };

  Decimal.sub = function (value, other) {
    return D(value).sub(other);
  };

  Decimal.subtract = function (value, other) {
    return D(value).sub(other);
  };

  Decimal.minus = function (value, other) {
    return D(value).sub(other);
  };

  Decimal.mul = function (value, other) {
    return D(value).mul(other);
  };

  Decimal.multiply = function (value, other) {
    return D(value).mul(other);
  };

  Decimal.times = function (value, other) {
    return D(value).mul(other);
  };

  Decimal.div = function (value, other) {
    return D(value).div(other);
  };

  Decimal.divide = function (value, other) {
    return D(value).div(other);
  };

  Decimal.recip = function (value) {
    return D(value).recip();
  };

  Decimal.reciprocal = function (value) {
    return D(value).recip();
  };

  Decimal.reciprocate = function (value) {
    return D(value).reciprocate();
  };

  Decimal.cmp = function (value, other) {
    return D(value).cmp(other);
  };

  Decimal.compare = function (value, other) {
    return D(value).cmp(other);
  };

  Decimal.eq = function (value, other) {
    return D(value).eq(other);
  };

  Decimal.equals = function (value, other) {
    return D(value).eq(other);
  };

  Decimal.neq = function (value, other) {
    return D(value).neq(other);
  };

  Decimal.notEquals = function (value, other) {
    return D(value).notEquals(other);
  };

  Decimal.lt = function (value, other) {
    return D(value).lt(other);
  };

  Decimal.lte = function (value, other) {
    return D(value).lte(other);
  };

  Decimal.gt = function (value, other) {
    return D(value).gt(other);
  };

  Decimal.gte = function (value, other) {
    return D(value).gte(other);
  };

  Decimal.max = function (value, other) {
    return D(value).max(other);
  };

  Decimal.min = function (value, other) {
    return D(value).min(other);
  };

  Decimal.clamp = function (value, min, max) {
    return D(value).clamp(min, max);
  };

  Decimal.clampMin = function (value, min) {
    return D(value).clampMin(min);
  };

  Decimal.clampMax = function (value, max) {
    return D(value).clampMax(max);
  };

  Decimal.cmp_tolerance = function (value, other, tolerance) {
    return D(value).cmp_tolerance(other, tolerance);
  };

  Decimal.compare_tolerance = function (value, other, tolerance) {
    return D(value).cmp_tolerance(other, tolerance);
  };

  Decimal.eq_tolerance = function (value, other, tolerance) {
    return D(value).eq_tolerance(other, tolerance);
  };

  Decimal.equals_tolerance = function (value, other, tolerance) {
    return D(value).eq_tolerance(other, tolerance);
  };

  Decimal.neq_tolerance = function (value, other, tolerance) {
    return D(value).neq_tolerance(other, tolerance);
  };

  Decimal.notEquals_tolerance = function (value, other, tolerance) {
    return D(value).notEquals_tolerance(other, tolerance);
  };

  Decimal.lt_tolerance = function (value, other, tolerance) {
    return D(value).lt_tolerance(other, tolerance);
  };

  Decimal.lte_tolerance = function (value, other, tolerance) {
    return D(value).lte_tolerance(other, tolerance);
  };

  Decimal.gt_tolerance = function (value, other, tolerance) {
    return D(value).gt_tolerance(other, tolerance);
  };

  Decimal.gte_tolerance = function (value, other, tolerance) {
    return D(value).gte_tolerance(other, tolerance);
  };

  Decimal.log10 = function (value) {
    return D(value).log10();
  };

  Decimal.absLog10 = function (value) {
    return D(value).absLog10();
  };

  Decimal.pLog10 = function (value) {
    return D(value).pLog10();
  };

  Decimal.log = function (value, base) {
    return D(value).log(base);
  };

  Decimal.log2 = function (value) {
    return D(value).log2();
  };

  Decimal.ln = function (value) {
    return D(value).ln();
  };

  Decimal.logarithm = function (value, base) {
    return D(value).logarithm(base);
  };

  Decimal.pow10 = function (value) {
    if (Number.isInteger(value)) {
      return ME_NN(1, value);
    }

    return ME(Math.pow(10, value % 1), Math.trunc(value));
  };

  Decimal.pow = function (value, other) {
    // Fast track: 10^integer
    if (typeof value === "number" && value === 10 && typeof other === "number" && Number.isInteger(other)) {
      return ME_NN(1, other);
    }

    return D(value).pow(other);
  };

  Decimal.exp = function (value) {
    return D(value).exp();
  };

  Decimal.sqr = function (value) {
    return D(value).sqr();
  };

  Decimal.sqrt = function (value) {
    return D(value).sqrt();
  };

  Decimal.cube = function (value) {
    return D(value).cube();
  };

  Decimal.cbrt = function (value) {
    return D(value).cbrt();
  };

  Decimal.dp = function (value) {
    return D(value).dp();
  };

  Decimal.decimalPlaces = function (value) {
    return D(value).dp();
  };
  /**
   * If you're willing to spend 'resourcesAvailable' and want to buy something
   * with exponentially increasing cost each purchase (start at priceStart,
   * multiply by priceRatio, already own currentOwned), how much of it can you buy?
   * Adapted from Trimps source code.
   */


  Decimal.affordGeometricSeries = function (resourcesAvailable, priceStart, priceRatio, currentOwned) {
    return affordGeometricSeries(D(resourcesAvailable), D(priceStart), D(priceRatio), currentOwned);
  };
  /**
   * How much resource would it cost to buy (numItems) items if you already have currentOwned,
   * the initial price is priceStart and it multiplies by priceRatio each purchase?
   */


  Decimal.sumGeometricSeries = function (numItems, priceStart, priceRatio, currentOwned) {
    return sumGeometricSeries(numItems, D(priceStart), D(priceRatio), currentOwned);
  };
  /**
   * If you're willing to spend 'resourcesAvailable' and want to buy something with additively
   * increasing cost each purchase (start at priceStart, add by priceAdd, already own currentOwned),
   * how much of it can you buy?
   */


  Decimal.affordArithmeticSeries = function (resourcesAvailable, priceStart, priceAdd, currentOwned) {
    return affordArithmeticSeries(D(resourcesAvailable), D(priceStart), D(priceAdd), D(currentOwned));
  };
  /**
   * How much resource would it cost to buy (numItems) items if you already have currentOwned,
   * the initial price is priceStart and it adds priceAdd each purchase?
   * Adapted from http://www.mathwords.com/a/arithmetic_series.htm
   */


  Decimal.sumArithmeticSeries = function (numItems, priceStart, priceAdd, currentOwned) {
    return sumArithmeticSeries(D(numItems), D(priceStart), D(priceAdd), D(currentOwned));
  };
  /**
   * When comparing two purchases that cost (resource) and increase your resource/sec by (deltaRpS),
   * the lowest efficiency score is the better one to purchase.
   * From Frozen Cookies:
   * http://cookieclicker.wikia.com/wiki/Frozen_Cookies_(JavaScript_Add-on)#Efficiency.3F_What.27s_that.3F
   */


  Decimal.efficiencyOfPurchase = function (cost, currentRpS, deltaRpS) {
    return efficiencyOfPurchase(D(cost), D(currentRpS), D(deltaRpS));
  };

  Decimal.randomDecimalForTesting = function (absMaxExponent) {
    // NOTE: This doesn't follow any kind of sane random distribution, so use this for testing purposes only.
    // 5% of the time, have a mantissa of 0
    if (Math.random() * 20 < 1) {
      return ME_NN(0, 0);
    }

    var mantissa = Math.random() * 10; // 10% of the time, have a simple mantissa

    if (Math.random() * 10 < 1) {
      mantissa = Math.round(mantissa);
    }

    mantissa *= Math.sign(Math.random() * 2 - 1);
    var exponent = Math.floor(Math.random() * absMaxExponent * 2) - absMaxExponent;
    return ME(mantissa, exponent);
    /*
      Examples:
            randomly test pow:
            var a = Decimal.randomDecimalForTesting(1000);
      var pow = Math.random()*20-10;
      if (Math.random()*2 < 1) { pow = Math.round(pow); }
      var result = Decimal.pow(a, pow);
      ["(" + a.toString() + ")^" + pow.toString(), result.toString()]
            randomly test add:
            var a = Decimal.randomDecimalForTesting(1000);
      var b = Decimal.randomDecimalForTesting(17);
      var c = a.mul(b);
      var result = a.add(c);
      [a.toString() + "+" + c.toString(), result.toString()]
    */
  };
  /**
   * When mantissa is very denormalized, use this to normalize much faster.
   */


  Decimal.prototype.normalize = function () {
    if (this.m >= 1 && this.m < 10) {
      return this;
    } // TODO: I'm worried about mantissa being negative 0 here which is why I set it again, but it may never matter


    if (this.m === 0) {
      this.m = 0;
      this.e = 0;
      return this;
    }

    var tempExponent = Math.floor(Math.log10(Math.abs(this.m)));
    this.m = tempExponent === NUMBER_EXP_MIN ? this.m * 10 / 1e-323 : this.m / powerOf10(tempExponent);
    this.e += tempExponent;
    return this;
  };

  Decimal.prototype.fromMantissaExponent = function (mantissa, exponent) {
    // SAFETY: don't let in non-numbers
    if (!isFinite(mantissa) || !isFinite(exponent)) {
      mantissa = Number.NaN;
      exponent = Number.NaN;
      return this;
    }

    this.m = mantissa;
    this.e = exponent; // Non-normalized mantissas can easily get here, so this is mandatory.

    this.normalize();
    return this;
  };
  /**
   * Well, you know what you're doing!
   */


  Decimal.prototype.fromMantissaExponent_noNormalize = function (mantissa, exponent) {
    this.m = mantissa;
    this.e = exponent;
    return this;
  };

  Decimal.prototype.fromDecimal = function (value) {
    this.m = value.m;
    this.e = value.e;
    return this;
  };

  Decimal.prototype.fromNumber = function (value) {
    // SAFETY: Handle Infinity and NaN in a somewhat meaningful way.
    if (isNaN(value)) {
      this.m = Number.NaN;
      this.e = Number.NaN;
    } else if (value === Number.POSITIVE_INFINITY) {
      this.m = 1;
      this.e = EXP_LIMIT;
    } else if (value === Number.NEGATIVE_INFINITY) {
      this.m = -1;
      this.e = EXP_LIMIT;
    } else if (value === 0) {
      this.m = 0;
      this.e = 0;
    } else {
      this.e = Math.floor(Math.log10(Math.abs(value))); // SAFETY: handle 5e-324, -5e-324 separately

      this.m = this.e === NUMBER_EXP_MIN ? value * 10 / 1e-323 : value / powerOf10(this.e); // SAFETY: Prevent weirdness.

      this.normalize();
    }

    return this;
  };

  Decimal.prototype.fromString = function (value) {
    if (value.indexOf("e") !== -1) {
      var parts = value.split("e");
      this.m = parseFloat(parts[0]);
      this.e = parseFloat(parts[1]); // Non-normalized mantissas can easily get here, so this is mandatory.

      this.normalize();
    } else if (value === "NaN") {
      this.m = Number.NaN;
      this.e = Number.NaN;
    } else {
      this.fromNumber(parseFloat(value));

      if (isNaN(this.m)) {
        throw Error("[DecimalError] Invalid argument: " + value);
      }
    }

    return this;
  };

  Decimal.prototype.fromValue = function (value) {
    if (value instanceof Decimal) {
      return this.fromDecimal(value);
    }

    if (typeof value === "number") {
      return this.fromNumber(value);
    }

    if (typeof value === "string") {
      return this.fromString(value);
    }

    this.m = 0;
    this.e = 0;
    return this;
  };

  Decimal.prototype.toNumber = function () {
    // Problem: new Decimal(116).toNumber() returns 115.99999999999999.
    // TODO: How to fix in general case? It's clear that if toNumber() is
    //  VERY close to an integer, we want exactly the integer.
    //  But it's not clear how to specifically write that.
    //  So I'll just settle with 'exponent >= 0 and difference between rounded
    //  and not rounded < 1e-9' as a quick fix.
    // var result = this.m*Math.pow(10, this.e);
    if (!isFinite(this.e)) {
      return Number.NaN;
    }

    if (this.e > NUMBER_EXP_MAX) {
      return this.m > 0 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
    }

    if (this.e < NUMBER_EXP_MIN) {
      return 0;
    } // SAFETY: again, handle 5e-324, -5e-324 separately


    if (this.e === NUMBER_EXP_MIN) {
      return this.m > 0 ? 5e-324 : -5e-324;
    }

    var result = this.m * powerOf10(this.e);

    if (!isFinite(result) || this.e < 0) {
      return result;
    }

    var resultRounded = Math.round(result);

    if (Math.abs(resultRounded - result) < ROUND_TOLERANCE) {
      return resultRounded;
    }

    return result;
  };

  Decimal.prototype.mantissaWithDecimalPlaces = function (places) {
    // https://stackoverflow.com/a/37425022
    if (isNaN(this.m) || isNaN(this.e)) {
      return Number.NaN;
    }

    if (this.m === 0) {
      return 0;
    }

    var len = places + 1;
    var numDigits = Math.ceil(Math.log10(Math.abs(this.m)));
    var rounded = Math.round(this.m * Math.pow(10, len - numDigits)) * Math.pow(10, numDigits - len);
    return parseFloat(rounded.toFixed(Math.max(len - numDigits, 0)));
  };

  Decimal.prototype.toString = function () {
    if (isNaN(this.m) || isNaN(this.e)) {
      return "NaN";
    }

    if (this.e >= EXP_LIMIT) {
      return this.m > 0 ? "Infinity" : "-Infinity";
    }

    if (this.e <= -EXP_LIMIT || this.m === 0) {
      return "0";
    }

    if (this.e < 21 && this.e > -7) {
      return this.toNumber().toString();
    }

    return this.m + "e" + (this.e >= 0 ? "+" : "") + this.e;
  };

  Decimal.prototype.toExponential = function (places) {
    // https://stackoverflow.com/a/37425022
    // TODO: Some unfixed cases:
    //  new Decimal("1.2345e-999").toExponential()
    //  "1.23450000000000015e-999"
    //  new Decimal("1e-999").toExponential()
    //  "1.000000000000000000e-999"
    // TBH I'm tempted to just say it's a feature.
    // If you're doing pretty formatting then why don't you know how many decimal places you want...?
    if (isNaN(this.m) || isNaN(this.e)) {
      return "NaN";
    }

    if (this.e >= EXP_LIMIT) {
      return this.m > 0 ? "Infinity" : "-Infinity";
    }

    if (this.e <= -EXP_LIMIT || this.m === 0) {
      return "0" + (places > 0 ? pad_end__WEBPACK_IMPORTED_MODULE_0___default()(".", places + 1, "0") : "") + "e+0";
    } // two cases:
    // 1) exponent is < 308 and > -324: use basic toFixed
    // 2) everything else: we have to do it ourselves!


    if (this.e > NUMBER_EXP_MIN && this.e < NUMBER_EXP_MAX) {
      return this.toNumber().toExponential(places);
    }

    if (!isFinite(places)) {
      places = MAX_SIGNIFICANT_DIGITS;
    }

    var len = places + 1;
    var numDigits = Math.max(1, Math.ceil(Math.log10(Math.abs(this.m))));
    var rounded = Math.round(this.m * Math.pow(10, len - numDigits)) * Math.pow(10, numDigits - len);
    return rounded.toFixed(Math.max(len - numDigits, 0)) + "e" + (this.e >= 0 ? "+" : "") + this.e;
  };

  Decimal.prototype.toFixed = function (places) {
    if (isNaN(this.m) || isNaN(this.e)) {
      return "NaN";
    }

    if (this.e >= EXP_LIMIT) {
      return this.m > 0 ? "Infinity" : "-Infinity";
    }

    if (this.e <= -EXP_LIMIT || this.m === 0) {
      return "0" + (places > 0 ? pad_end__WEBPACK_IMPORTED_MODULE_0___default()(".", places + 1, "0") : "");
    } // two cases:
    // 1) exponent is 17 or greater: just print out mantissa with the appropriate number of zeroes after it
    // 2) exponent is 16 or less: use basic toFixed


    if (this.e >= MAX_SIGNIFICANT_DIGITS) {
      return this.m.toString().replace(".", "").padEnd(this.e + 1, "0") + (places > 0 ? pad_end__WEBPACK_IMPORTED_MODULE_0___default()(".", places + 1, "0") : "");
    }

    return this.toNumber().toFixed(places);
  };

  Decimal.prototype.toPrecision = function (places) {
    if (this.e <= -7) {
      return this.toExponential(places - 1);
    }

    if (places > this.e) {
      return this.toFixed(places - this.e - 1);
    }

    return this.toExponential(places - 1);
  };

  Decimal.prototype.valueOf = function () {
    return this.toString();
  };

  Decimal.prototype.toJSON = function () {
    return this.toString();
  };

  Decimal.prototype.toStringWithDecimalPlaces = function (places) {
    return this.toExponential(places);
  };

  Decimal.prototype.abs = function () {
    return ME_NN(Math.abs(this.m), this.e);
  };

  Decimal.prototype.neg = function () {
    return ME_NN(-this.m, this.e);
  };

  Decimal.prototype.negate = function () {
    return this.neg();
  };

  Decimal.prototype.negated = function () {
    return this.neg();
  };

  Decimal.prototype.sign = function () {
    return Math.sign(this.m);
  };

  Decimal.prototype.sgn = function () {
    return this.sign();
  };

  Decimal.prototype.round = function () {
    if (this.e < -1) {
      return new Decimal(0);
    }

    if (this.e < MAX_SIGNIFICANT_DIGITS) {
      return new Decimal(Math.round(this.toNumber()));
    }

    return this;
  };

  Decimal.prototype.floor = function () {
    if (this.e < -1) {
      return Math.sign(this.m) >= 0 ? new Decimal(0) : new Decimal(-1);
    }

    if (this.e < MAX_SIGNIFICANT_DIGITS) {
      return new Decimal(Math.floor(this.toNumber()));
    }

    return this;
  };

  Decimal.prototype.ceil = function () {
    if (this.e < -1) {
      return Math.sign(this.m) > 0 ? new Decimal(1) : new Decimal(0);
    }

    if (this.e < MAX_SIGNIFICANT_DIGITS) {
      return new Decimal(Math.ceil(this.toNumber()));
    }

    return this;
  };

  Decimal.prototype.trunc = function () {
    if (this.e < 0) {
      return new Decimal(0);
    }

    if (this.e < MAX_SIGNIFICANT_DIGITS) {
      return new Decimal(Math.trunc(this.toNumber()));
    }

    return this;
  };

  Decimal.prototype.add = function (value) {
    // figure out which is bigger, shrink the mantissa of the smaller
    // by the difference in exponents, add mantissas, normalize and return
    // TODO: Optimizations and simplification may be possible, see https://github.com/Patashu/break_infinity.js/issues/8
    var decimal = D(value);

    if (this.m === 0) {
      return decimal;
    }

    if (decimal.m === 0) {
      return this;
    }

    var biggerDecimal;
    var smallerDecimal;

    if (this.e >= decimal.e) {
      biggerDecimal = this;
      smallerDecimal = decimal;
    } else {
      biggerDecimal = decimal;
      smallerDecimal = this;
    }

    if (biggerDecimal.e - smallerDecimal.e > MAX_SIGNIFICANT_DIGITS) {
      return biggerDecimal;
    } // Have to do this because adding numbers that were once integers but scaled down is imprecise.
    // Example: 299 + 18


    return ME(Math.round(1e14 * biggerDecimal.m + 1e14 * smallerDecimal.m * powerOf10(smallerDecimal.e - biggerDecimal.e)), biggerDecimal.e - 14);
  };

  Decimal.prototype.plus = function (value) {
    return this.add(value);
  };

  Decimal.prototype.sub = function (value) {
    return this.add(D(value).neg());
  };

  Decimal.prototype.subtract = function (value) {
    return this.sub(value);
  };

  Decimal.prototype.minus = function (value) {
    return this.sub(value);
  };

  Decimal.prototype.mul = function (value) {
    // This version avoids an extra conversion to Decimal, if possible. Since the
    // mantissa is -10...10, any number short of MAX/10 can be safely multiplied in
    if (typeof value === "number") {
      if (value < 1e307 && value > -1e307) {
        return ME(this.m * value, this.e);
      } // If the value is larger than 1e307, we can divide that out of mantissa (since it's
      // greater than 1, it won't underflow)


      return ME(this.m * 1e-307 * value, this.e + 307);
    }

    var decimal = typeof value === "string" ? new Decimal(value) : value;
    return ME(this.m * decimal.m, this.e + decimal.e);
  };

  Decimal.prototype.multiply = function (value) {
    return this.mul(value);
  };

  Decimal.prototype.times = function (value) {
    return this.mul(value);
  };

  Decimal.prototype.div = function (value) {
    return this.mul(D(value).recip());
  };

  Decimal.prototype.divide = function (value) {
    return this.div(value);
  };

  Decimal.prototype.divideBy = function (value) {
    return this.div(value);
  };

  Decimal.prototype.dividedBy = function (value) {
    return this.div(value);
  };

  Decimal.prototype.recip = function () {
    return ME(1 / this.m, -this.e);
  };

  Decimal.prototype.reciprocal = function () {
    return this.recip();
  };

  Decimal.prototype.reciprocate = function () {
    return this.recip();
  };
  /**
   * -1 for less than value, 0 for equals value, 1 for greater than value
   */


  Decimal.prototype.cmp = function (value) {
    var decimal = D(value); // TODO: sign(a-b) might be better? https://github.com/Patashu/break_infinity.js/issues/12

    /*
    from smallest to largest:
          -3e100
    -1e100
    -3e99
    -1e99
    -3e0
    -1e0
    -3e-99
    -1e-99
    -3e-100
    -1e-100
    0
    1e-100
    3e-100
    1e-99
    3e-99
    1e0
    3e0
    1e99
    3e99
    1e100
    3e100
          */

    if (this.m === 0) {
      if (decimal.m === 0) {
        return 0;
      }

      if (decimal.m < 0) {
        return 1;
      }

      if (decimal.m > 0) {
        return -1;
      }
    }

    if (decimal.m === 0) {
      if (this.m < 0) {
        return -1;
      }

      if (this.m > 0) {
        return 1;
      }
    }

    if (this.m > 0) {
      if (decimal.m < 0) {
        return 1;
      }

      if (this.e > decimal.e) {
        return 1;
      }

      if (this.e < decimal.e) {
        return -1;
      }

      if (this.m > decimal.m) {
        return 1;
      }

      if (this.m < decimal.m) {
        return -1;
      }

      return 0;
    }

    if (this.m < 0) {
      if (decimal.m > 0) {
        return -1;
      }

      if (this.e > decimal.e) {
        return -1;
      }

      if (this.e < decimal.e) {
        return 1;
      }

      if (this.m > decimal.m) {
        return 1;
      }

      if (this.m < decimal.m) {
        return -1;
      }

      return 0;
    }

    throw Error("Unreachable code");
  };

  Decimal.prototype.compare = function (value) {
    return this.cmp(value);
  };

  Decimal.prototype.eq = function (value) {
    var decimal = D(value);
    return this.e === decimal.e && this.m === decimal.m;
  };

  Decimal.prototype.equals = function (value) {
    return this.eq(value);
  };

  Decimal.prototype.neq = function (value) {
    return !this.eq(value);
  };

  Decimal.prototype.notEquals = function (value) {
    return this.neq(value);
  };

  Decimal.prototype.lt = function (value) {
    var decimal = D(value);

    if (this.m === 0) {
      return decimal.m > 0;
    }

    if (decimal.m === 0) {
      return this.m <= 0;
    }

    if (this.e === decimal.e) {
      return this.m < decimal.m;
    }

    if (this.m > 0) {
      return decimal.m > 0 && this.e < decimal.e;
    }

    return decimal.m > 0 || this.e > decimal.e;
  };

  Decimal.prototype.lte = function (value) {
    return !this.gt(value);
  };

  Decimal.prototype.gt = function (value) {
    var decimal = D(value);

    if (this.m === 0) {
      return decimal.m < 0;
    }

    if (decimal.m === 0) {
      return this.m > 0;
    }

    if (this.e === decimal.e) {
      return this.m > decimal.m;
    }

    if (this.m > 0) {
      return decimal.m < 0 || this.e > decimal.e;
    }

    return decimal.m < 0 && this.e < decimal.e;
  };

  Decimal.prototype.gte = function (value) {
    return !this.lt(value);
  };

  Decimal.prototype.max = function (value) {
    var decimal = D(value);
    return this.lt(decimal) ? decimal : this;
  };

  Decimal.prototype.min = function (value) {
    var decimal = D(value);
    return this.gt(decimal) ? decimal : this;
  };

  Decimal.prototype.clamp = function (min, max) {
    return this.max(min).min(max);
  };

  Decimal.prototype.clampMin = function (min) {
    return this.max(min);
  };

  Decimal.prototype.clampMax = function (max) {
    return this.min(max);
  };

  Decimal.prototype.cmp_tolerance = function (value, tolerance) {
    var decimal = D(value);
    return this.eq_tolerance(decimal, tolerance) ? 0 : this.cmp(decimal);
  };

  Decimal.prototype.compare_tolerance = function (value, tolerance) {
    return this.cmp_tolerance(value, tolerance);
  };
  /**
   * Tolerance is a relative tolerance, multiplied by the greater of the magnitudes of the two arguments.
   * For example, if you put in 1e-9, then any number closer to the
   * larger number than (larger number)*1e-9 will be considered equal.
   */


  Decimal.prototype.eq_tolerance = function (value, tolerance) {
    var decimal = D(value); // https://stackoverflow.com/a/33024979
    // return abs(a-b) <= tolerance * max(abs(a), abs(b))

    return Decimal.lte(this.sub(decimal).abs(), Decimal.max(this.abs(), decimal.abs()).mul(tolerance));
  };

  Decimal.prototype.equals_tolerance = function (value, tolerance) {
    return this.eq_tolerance(value, tolerance);
  };

  Decimal.prototype.neq_tolerance = function (value, tolerance) {
    return !this.eq_tolerance(value, tolerance);
  };

  Decimal.prototype.notEquals_tolerance = function (value, tolerance) {
    return this.neq_tolerance(value, tolerance);
  };

  Decimal.prototype.lt_tolerance = function (value, tolerance) {
    var decimal = D(value);
    return !this.eq_tolerance(decimal, tolerance) && this.lt(decimal);
  };

  Decimal.prototype.lte_tolerance = function (value, tolerance) {
    var decimal = D(value);
    return this.eq_tolerance(decimal, tolerance) || this.lt(decimal);
  };

  Decimal.prototype.gt_tolerance = function (value, tolerance) {
    var decimal = D(value);
    return !this.eq_tolerance(decimal, tolerance) && this.gt(decimal);
  };

  Decimal.prototype.gte_tolerance = function (value, tolerance) {
    var decimal = D(value);
    return this.eq_tolerance(decimal, tolerance) || this.gt(decimal);
  };

  Decimal.prototype.log10 = function () {
    return this.e + Math.log10(this.m);
  };

  Decimal.prototype.absLog10 = function () {
    return this.e + Math.log10(Math.abs(this.m));
  };

  Decimal.prototype.pLog10 = function () {
    return this.m <= 0 || this.e < 0 ? 0 : this.log10();
  };

  Decimal.prototype.log = function (base) {
    // UN-SAFETY: Most incremental game cases are log(number := 1 or greater, base := 2 or greater).
    // We assume this to be true and thus only need to return a number, not a Decimal,
    return Math.LN10 / Math.log(base) * this.log10();
  };

  Decimal.prototype.log2 = function () {
    return 3.32192809488736234787 * this.log10();
  };

  Decimal.prototype.ln = function () {
    return 2.30258509299404568402 * this.log10();
  };

  Decimal.prototype.logarithm = function (base) {
    return this.log(base);
  };

  Decimal.prototype.pow = function (value) {
    // UN-SAFETY: Accuracy not guaranteed beyond ~9~11 decimal places.
    // TODO: Decimal.pow(new Decimal(0.5), 0); or Decimal.pow(new Decimal(1), -1);
    //  makes an exponent of -0! Is a negative zero ever a problem?
    var numberValue = value instanceof Decimal ? value.toNumber() : value; // TODO: Fast track seems about neutral for performance.
    //  It might become faster if an integer pow is implemented,
    //  or it might not be worth doing (see https://github.com/Patashu/break_infinity.js/issues/4 )
    // Fast track: If (this.e*value) is an integer and mantissa^value
    // fits in a Number, we can do a very fast method.

    var temp = this.e * numberValue;
    var newMantissa;

    if (Number.isSafeInteger(temp)) {
      newMantissa = Math.pow(this.m, numberValue);

      if (isFinite(newMantissa) && newMantissa !== 0) {
        return ME(newMantissa, temp);
      }
    } // Same speed and usually more accurate.


    var newExponent = Math.trunc(temp);
    var residue = temp - newExponent;
    newMantissa = Math.pow(10, numberValue * Math.log10(this.m) + residue);

    if (isFinite(newMantissa) && newMantissa !== 0) {
      return ME(newMantissa, newExponent);
    } // return Decimal.exp(value*this.ln());
    // UN-SAFETY: This should return NaN when mantissa is negative and value is non-integer.


    var result = Decimal.pow10(numberValue * this.absLog10()); // this is 2x faster and gives same values AFAIK

    if (this.sign() === -1 && numberValue % 2 === 1) {
      return result.neg();
    }

    return result;
  };

  Decimal.prototype.pow_base = function (value) {
    return D(value).pow(this);
  };

  Decimal.prototype.factorial = function () {
    // Using Stirling's Approximation.
    // https://en.wikipedia.org/wiki/Stirling%27s_approximation#Versions_suitable_for_calculators
    var n = this.toNumber() + 1;
    return Decimal.pow(n / Math.E * Math.sqrt(n * Math.sinh(1 / n) + 1 / (810 * Math.pow(n, 6))), n).mul(Math.sqrt(2 * Math.PI / n));
  };

  Decimal.prototype.exp = function () {
    var x = this.toNumber(); // Fast track: if -706 < this < 709, we can use regular exp.

    if (-706 < x && x < 709) {
      return Decimal.fromNumber(Math.exp(x));
    }

    return Decimal.pow(Math.E, x);
  };

  Decimal.prototype.sqr = function () {
    return ME(Math.pow(this.m, 2), this.e * 2);
  };

  Decimal.prototype.sqrt = function () {
    if (this.m < 0) {
      return new Decimal(Number.NaN);
    }

    if (this.e % 2 !== 0) {
      return ME(Math.sqrt(this.m) * 3.16227766016838, Math.floor(this.e / 2));
    } // Mod of a negative number is negative, so != means '1 or -1'


    return ME(Math.sqrt(this.m), Math.floor(this.e / 2));
  };

  Decimal.prototype.cube = function () {
    return ME(Math.pow(this.m, 3), this.e * 3);
  };

  Decimal.prototype.cbrt = function () {
    var sign = 1;
    var mantissa = this.m;

    if (mantissa < 0) {
      sign = -1;
      mantissa = -mantissa;
    }

    var newMantissa = sign * Math.pow(mantissa, 1 / 3);
    var mod = this.e % 3;

    if (mod === 1 || mod === -1) {
      return ME(newMantissa * 2.1544346900318837, Math.floor(this.e / 3));
    }

    if (mod !== 0) {
      return ME(newMantissa * 4.6415888336127789, Math.floor(this.e / 3));
    } // mod != 0 at this point means 'mod == 2 || mod == -2'


    return ME(newMantissa, Math.floor(this.e / 3));
  }; // Some hyperbolic trig functions that happen to be easy


  Decimal.prototype.sinh = function () {
    return this.exp().sub(this.negate().exp()).div(2);
  };

  Decimal.prototype.cosh = function () {
    return this.exp().add(this.negate().exp()).div(2);
  };

  Decimal.prototype.tanh = function () {
    return this.sinh().div(this.cosh());
  };

  Decimal.prototype.asinh = function () {
    return Decimal.ln(this.add(this.sqr().add(1).sqrt()));
  };

  Decimal.prototype.acosh = function () {
    return Decimal.ln(this.add(this.sqr().sub(1).sqrt()));
  };

  Decimal.prototype.atanh = function () {
    if (this.abs().gte(1)) {
      return Number.NaN;
    }

    return Decimal.ln(this.add(1).div(new Decimal(1).sub(this))) / 2;
  };
  /**
   * Joke function from Realm Grinder
   */


  Decimal.prototype.ascensionPenalty = function (ascensions) {
    if (ascensions === 0) {
      return this;
    }

    return this.pow(Math.pow(10, -ascensions));
  };
  /**
   * Joke function from Cookie Clicker. It's 'egg'
   */


  Decimal.prototype.egg = function () {
    return this.add(9);
  };

  Decimal.prototype.lessThanOrEqualTo = function (other) {
    return this.cmp(other) < 1;
  };

  Decimal.prototype.lessThan = function (other) {
    return this.cmp(other) < 0;
  };

  Decimal.prototype.greaterThanOrEqualTo = function (other) {
    return this.cmp(other) > -1;
  };

  Decimal.prototype.greaterThan = function (other) {
    return this.cmp(other) > 0;
  };

  Decimal.prototype.decimalPlaces = function () {
    return this.dp();
  };

  Decimal.prototype.dp = function () {
    if (!isFinite(this.mantissa)) {
      return NaN;
    }

    if (this.exponent >= MAX_SIGNIFICANT_DIGITS) {
      return 0;
    }

    var mantissa = this.mantissa;
    var places = -this.exponent;
    var e = 1;

    while (Math.abs(Math.round(mantissa * e) / e - mantissa) > ROUND_TOLERANCE) {
      e *= 10;
      places++;
    }

    return places > 0 ? places : 0;
  };

  Object.defineProperty(Decimal, "MAX_VALUE", {
    get: function get() {
      return MAX_VALUE;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Decimal, "MIN_VALUE", {
    get: function get() {
      return MIN_VALUE;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Decimal, "NUMBER_MAX_VALUE", {
    get: function get() {
      return NUMBER_MAX_VALUE;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Decimal, "NUMBER_MIN_VALUE", {
    get: function get() {
      return NUMBER_MIN_VALUE;
    },
    enumerable: true,
    configurable: true
  });
  return Decimal;
}();
var MAX_VALUE = ME_NN(1, EXP_LIMIT);
var MIN_VALUE = ME_NN(1, -EXP_LIMIT);
var NUMBER_MAX_VALUE = D(Number.MAX_VALUE);
var NUMBER_MIN_VALUE = D(Number.MIN_VALUE);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Decimal);


/***/ }),
/* 2 */
/***/ ((module) => {

"use strict";


module.exports = function (string, maxLength, fillString) {

  if (string == null || maxLength == null) {
    return string;
  }

  var result    = String(string);
  var targetLen = typeof maxLength === 'number'
    ? maxLength
    : parseInt(maxLength, 10);

  if (isNaN(targetLen) || !isFinite(targetLen)) {
    return result;
  }


  var length = result.length;
  if (length >= targetLen) {
    return result;
  }


  var filled = fillString == null ? '' : String(fillString);
  if (filled === '') {
    filled = ' ';
  }


  var fillLen = targetLen - length;

  while (filled.length < fillLen) {
    filled += filled;
  }

  var truncated = filled.length > fillLen ? filled.substr(0, fillLen) : filled;

  return result + truncated;
};


/***/ }),
/* 3 */
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>
// This work is free. You can redistribute it and/or modify it
// under the terms of the WTFPL, Version 2
// For more information see LICENSE.txt or http://www.wtfpl.net/
//
// For more information, the home page:
// http://pieroxy.net/blog/pages/lz-string/testing.html
//
// LZ-based compression algorithm, version 1.4.4
var LZString = (function() {

// private property
var f = String.fromCharCode;
var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
var baseReverseDic = {};

function getBaseValue(alphabet, character) {
  if (!baseReverseDic[alphabet]) {
    baseReverseDic[alphabet] = {};
    for (var i=0 ; i<alphabet.length ; i++) {
      baseReverseDic[alphabet][alphabet.charAt(i)] = i;
    }
  }
  return baseReverseDic[alphabet][character];
}

var LZString = {
  compressToBase64 : function (input) {
    if (input == null) return "";
    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});
    switch (res.length % 4) { // To produce valid Base64
    default: // When could this happen ?
    case 0 : return res;
    case 1 : return res+"===";
    case 2 : return res+"==";
    case 3 : return res+"=";
    }
  },

  decompressFromBase64 : function (input) {
    if (input == null) return "";
    if (input == "") return null;
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });
  },

  compressToUTF16 : function (input) {
    if (input == null) return "";
    return LZString._compress(input, 15, function(a){return f(a+32);}) + " ";
  },

  decompressFromUTF16: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });
  },

  //compress into uint8array (UCS-2 big endian format)
  compressToUint8Array: function (uncompressed) {
    var compressed = LZString.compress(uncompressed);
    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character

    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {
      var current_value = compressed.charCodeAt(i);
      buf[i*2] = current_value >>> 8;
      buf[i*2+1] = current_value % 256;
    }
    return buf;
  },

  //decompress from uint8array (UCS-2 big endian format)
  decompressFromUint8Array:function (compressed) {
    if (compressed===null || compressed===undefined){
        return LZString.decompress(compressed);
    } else {
        var buf=new Array(compressed.length/2); // 2 bytes per character
        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {
          buf[i]=compressed[i*2]*256+compressed[i*2+1];
        }

        var result = [];
        buf.forEach(function (c) {
          result.push(f(c));
        });
        return LZString.decompress(result.join(''));

    }

  },


  //compress into a string that is already URI encoded
  compressToEncodedURIComponent: function (input) {
    if (input == null) return "";
    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});
  },

  //decompress from an output of compressToEncodedURIComponent
  decompressFromEncodedURIComponent:function (input) {
    if (input == null) return "";
    if (input == "") return null;
    input = input.replace(/ /g, "+");
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });
  },

  compress: function (uncompressed) {
    return LZString._compress(uncompressed, 16, function(a){return f(a);});
  },
  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {
    if (uncompressed == null) return "";
    var i, value,
        context_dictionary= {},
        context_dictionaryToCreate= {},
        context_c="",
        context_wc="",
        context_w="",
        context_enlargeIn= 2, // Compensate for the first entry which should not count
        context_dictSize= 3,
        context_numBits= 2,
        context_data=[],
        context_data_val=0,
        context_data_position=0,
        ii;

    for (ii = 0; ii < uncompressed.length; ii += 1) {
      context_c = uncompressed.charAt(ii);
      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
        context_dictionary[context_c] = context_dictSize++;
        context_dictionaryToCreate[context_c] = true;
      }

      context_wc = context_w + context_c;
      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
        context_w = context_wc;
      } else {
        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
          if (context_w.charCodeAt(0)<256) {
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<8 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          } else {
            value = 1;
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1) | value;
              if (context_data_position ==bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = 0;
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<16 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
          delete context_dictionaryToCreate[context_w];
        } else {
          value = context_dictionary[context_w];
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }


        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        // Add wc to the dictionary.
        context_dictionary[context_wc] = context_dictSize++;
        context_w = String(context_c);
      }
    }

    // Output the code for w.
    if (context_w !== "") {
      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
        if (context_w.charCodeAt(0)<256) {
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<8 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        } else {
          value = 1;
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | value;
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = 0;
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<16 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        delete context_dictionaryToCreate[context_w];
      } else {
        value = context_dictionary[context_w];
        for (i=0 ; i<context_numBits ; i++) {
          context_data_val = (context_data_val << 1) | (value&1);
          if (context_data_position == bitsPerChar-1) {
            context_data_position = 0;
            context_data.push(getCharFromInt(context_data_val));
            context_data_val = 0;
          } else {
            context_data_position++;
          }
          value = value >> 1;
        }


      }
      context_enlargeIn--;
      if (context_enlargeIn == 0) {
        context_enlargeIn = Math.pow(2, context_numBits);
        context_numBits++;
      }
    }

    // Mark the end of the stream
    value = 2;
    for (i=0 ; i<context_numBits ; i++) {
      context_data_val = (context_data_val << 1) | (value&1);
      if (context_data_position == bitsPerChar-1) {
        context_data_position = 0;
        context_data.push(getCharFromInt(context_data_val));
        context_data_val = 0;
      } else {
        context_data_position++;
      }
      value = value >> 1;
    }

    // Flush the last char
    while (true) {
      context_data_val = (context_data_val << 1);
      if (context_data_position == bitsPerChar-1) {
        context_data.push(getCharFromInt(context_data_val));
        break;
      }
      else context_data_position++;
    }
    return context_data.join('');
  },

  decompress: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });
  },

  _decompress: function (length, resetValue, getNextValue) {
    var dictionary = [],
        next,
        enlargeIn = 4,
        dictSize = 4,
        numBits = 3,
        entry = "",
        result = [],
        i,
        w,
        bits, resb, maxpower, power,
        c,
        data = {val:getNextValue(0), position:resetValue, index:1};

    for (i = 0; i < 3; i += 1) {
      dictionary[i] = i;
    }

    bits = 0;
    maxpower = Math.pow(2,2);
    power=1;
    while (power!=maxpower) {
      resb = data.val & data.position;
      data.position >>= 1;
      if (data.position == 0) {
        data.position = resetValue;
        data.val = getNextValue(data.index++);
      }
      bits |= (resb>0 ? 1 : 0) * power;
      power <<= 1;
    }

    switch (next = bits) {
      case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 2:
        return "";
    }
    dictionary[3] = c;
    w = c;
    result.push(c);
    while (true) {
      if (data.index > length) {
        return "";
      }

      bits = 0;
      maxpower = Math.pow(2,numBits);
      power=1;
      while (power!=maxpower) {
        resb = data.val & data.position;
        data.position >>= 1;
        if (data.position == 0) {
          data.position = resetValue;
          data.val = getNextValue(data.index++);
        }
        bits |= (resb>0 ? 1 : 0) * power;
        power <<= 1;
      }

      switch (c = bits) {
        case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }

          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 2:
          return result.join('');
      }

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

      if (dictionary[c]) {
        entry = dictionary[c];
      } else {
        if (c === dictSize) {
          entry = w + w.charAt(0);
        } else {
          return null;
        }
      }
      result.push(entry);

      // Add w+entry[0] to the dictionary.
      dictionary[dictSize++] = w + entry.charAt(0);
      enlargeIn--;

      w = entry;

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

    }
  }
};
  return LZString;
})();

if (true) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return LZString; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {}


/***/ }),
/* 4 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isDecimal": () => /* binding */ isDecimal,
/* harmony export */   "smallestInc": () => /* binding */ smallestInc,
/* harmony export */   "sumContents": () => /* binding */ sumContents,
/* harmony export */   "productContents": () => /* binding */ productContents,
/* harmony export */   "sortWithIndeces": () => /* binding */ sortWithIndeces,
/* harmony export */   "getElementById": () => /* binding */ getElementById,
/* harmony export */   "stripIndents": () => /* binding */ stripIndents
/* harmony export */ });
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);

const isDecimal = (o) => o instanceof break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default ||
    (typeof o === 'object' &&
        o !== null &&
        Object.keys(o).length === 2 &&
        'mantissa' in o &&
        'exponent' in o);
const smallestInc = (x = 0) => {
    if (x <= Number.MAX_SAFE_INTEGER) {
        return 1;
    }
    else {
        return Math.pow(2, Math.ceil(Math.log2(x) - 53));
    }
};
const sumContents = (array) => {
    array = Array.isArray(array)
        ? array
        : Object.values(array);
    return array.reduce((a, b) => a + b, 0);
};
const productContents = (array) => array.reduce((a, b) => a * b);
const sortWithIndeces = (toSort) => {
    return Array
        .from([...toSort.keys()])
        .sort((a, b) => toSort[a] < toSort[b] ? -1 : +(toSort[b] < toSort[a]));
};
const getElementById = (id) => document.getElementById(id);
const stripIndents = (...temp) => {
    var _a;
    const [s, ...args] = temp;
    let f = '';
    for (let i = 0; i < s.length; i++) {
        f += `${s[i].replace(/\n +/g, '\n')}${(_a = args.shift()) !== null && _a !== void 0 ? _a : ''}`;
    }
    return f.trim();
};


/***/ }),
/* 5 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Globals": () => /* binding */ Globals,
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);

const Globals = {
    runediv: [1.5, 2, 3, 5, 8],
    runeexpbase: [1, 4, 9, 16, 1000],
    upgradeCosts: [0, 6, 7, 8, 10, 12, 20, 25, 30, 35, 45, 55, 75, 110, 150, 200, 250, 500, 750, 1000, 1500,
        2, 3, 4, 5, 6, 7, 10, 13, 20, 30, 150, 400, 800, 1600, 3200, 10000, 20000, 50000, 100000, 200000,
        1, 2, 3, 5, 6, 7, 42, 65, 87, 150, 300, 500, 1000, 1500, 2000, 3000, 6000, 12000, 25000, 75000,
        0, 1, 2, 2, 3, 5, 6, 10, 15, 22, 30, 37, 45, 52, 60, 1900, 2500, 3000, 7482, 21397,
        3, 6, 9, 12, 15, 20, 30, 6, 8, 8, 10, 13, 60, 1, 2, 4, 8, 16, 25, 40,
        12, 16, 20, 30, 50, 500, 1250, 5000, 25000, 125000, 1500, 7500, 30000, 150000, 1000000, 250, 1000, 5000, 25000, 125000,
        1e3, 1e6, 1e9, 1e12, 1e15],
    crystalUpgradesCost: [6, 15, 20, 40, 100, 200, 500, 1000],
    crystalUpgradeCostIncrement: [8, 15, 20, 40, 100, 200, 500, 1000],
    researchBaseCosts: [1e200,
        1, 1, 1, 1, 1,
        1, 1e2, 1e4, 1e6, 1e8,
        2, 2e2, 2e4, 2e6, 2e8,
        4e4, 4e8, 10, 1e5, 1e9,
        100, 100, 1e4, 2e3, 2e5,
        40, 200, 50, 5000, 20000000,
        777, 7777, 50000, 500000, 5000000,
        2e3, 2e6, 2e9, 1e5, 1e9,
        1, 1, 5, 25, 125,
        2, 5, 320, 1280, 2.5e9,
        10, 2e3, 4e5, 8e7, 2e9,
        5, 400, 1e4, 3e6, 9e8,
        100, 2500, 100, 2000, 2e5,
        1, 20, 3e3, 4e5, 5e7,
        10, 40, 160, 1000, 10000,
        4e9, 7e9, 1e10, 1.2e10, 1.5e10,
        1e12, 1e13, 3e12, 2e13, 2e13,
        2e14, 6e14, 2e15, 6e15, 2e16,
        1e16, 2e16, 2e17, 4e17, 1e18,
        1e13, 1e14, 1e15, 7.777e18, 7.777e20,
        1e16, 3e16, 1e17, 3e17, 1e20,
        1e18, 3e18, 1e19, 3e19, 1e20,
        1e20, 2e20, 4e20, 8e20, 1e21,
        2e21, 4e21, 8e21, 2e22, 4e22,
        3.2e21, 2e23, 4e23, 1e21, 7.777e32,
        5e8, 5e12, 5e16, 5e20, 5e24,
        1e25, 2e25, 4e25, 8e25, 1e26,
        4e26, 8e26, 1e27, 2e27, 1e28,
        5e9, 5e15, 5e21, 5e27, 1e28,
        1e29, 2e29, 4e29, 8e29, 1e27,
        2e30, 4e30, 8e30, 1e31, 2e31,
        5e31, 1e32, 2e32, 4e32, 8e32,
        1e33, 2e33, 4e33, 8e33, 1e34,
        3e34, 1e35, 3e35, 6e35, 1e36,
        3e36, 1e37, 3e37, 1e38, 3e38,
        1e39, 3e39, 1e40, 3e40, 1e50,
        3e41, 1e42, 3e42, 6e42, 1e43,
        3e43, 1e44, 3e44, 1e45, 3e45,
        2e46, 6e46, 2e47, 6e47, 1e64,
        6e48, 2e49, 1e50, 1e51, 4e56
    ],
    researchMaxLevels: [0, 1, 1, 1, 1, 1,
        10, 10, 10, 10, 10,
        10, 10, 10, 10, 10,
        10, 10, 1, 1, 1,
        25, 25, 25, 20, 20,
        10, 10, 10, 10, 10,
        12, 12, 10, 10, 10,
        10, 10, 10, 1, 1,
        1, 1, 1, 1, 1,
        1, 1, 1, 1, 1,
        10, 10, 10, 10, 10,
        20, 20, 20, 20, 20,
        1, 5, 4, 5, 5,
        10, 10, 10, 10, 10,
        1, 1, 1, 1, 1,
        10, 50, 50, 50, 50,
        10, 1, 20, 20, 20,
        20, 20, 20, 20, 10,
        20, 20, 20, 20, 1,
        20, 5, 5, 2, 1,
        10, 10, 10, 10, 1,
        10, 10, 20, 25, 25,
        50, 50, 50, 50, 100,
        10, 10, 10, 100, 100,
        25, 25, 25, 1, 1,
        10, 10, 10, 10, 1,
        10, 10, 10, 1, 1,
        25, 25, 25, 15, 1,
        10, 10, 10, 10, 1,
        10, 1, 6, 10, 1,
        25, 25, 1, 15, 1,
        10, 10, 10, 1, 1,
        10, 10, 10, 10, 1,
        25, 25, 25, 15, 1,
        10, 10, 10, 1, 1,
        10, 3, 6, 10, 1,
        25, 25, 1, 15, 1,
        20, 20, 20, 1, 1,
        20, 1, 50, 50, 2,
        25, 25, 25, 15, 100000
    ],
    ticker: 0,
    costDivisor: 1,
    freeAccelerator: 0,
    totalAccelerator: 0,
    freeAcceleratorBoost: 0,
    totalAcceleratorBoost: 0,
    acceleratorPower: 1.10,
    acceleratorEffect: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    acceleratorEffectDisplay: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    generatorPower: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    freeMultiplier: 0,
    totalMultiplier: 0,
    multiplierPower: 2,
    multiplierEffect: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    challengeOneLog: 3,
    freeMultiplierBoost: 0,
    totalMultiplierBoost: 0,
    globalCoinMultiplier: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    totalCoinOwned: 0,
    prestigeMultiplier: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    buildingPower: 1,
    reincarnationMultiplier: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    coinOneMulti: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    coinTwoMulti: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    coinThreeMulti: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    coinFourMulti: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    coinFiveMulti: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    globalCrystalMultiplier: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    globalMythosMultiplier: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0.01),
    grandmasterMultiplier: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    atomsMultiplier: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    mythosBuildingPower: 1,
    challengeThreeMultiplier: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    totalMythosOwned: 0,
    prestigePointGain: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    challengeFivePower: 1 / 3,
    transcendPointGain: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    reincarnationPointGain: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceFirst: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceSecond: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceThird: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceFourth: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceFifth: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceTotal: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceFirstDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceSecondDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceThirdDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceFourthDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceFifthDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceFirstMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceSecondMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceThirdMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceFourthMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceFifthMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceFirstParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceSecondParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceThirdParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceFourthParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceFifthParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    produceParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    producePerSecond: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    producePerSecondDiamonds: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    producePerSecondMythos: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    producePerSecondParticles: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(0),
    uFourteenMulti: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    uFifteenMulti: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1),
    tuSevenMulti: 1,
    currentTab: 'buildings',
    researchfiller1: "Hover over the grid to get details about researches!",
    researchfiller2: "Level: ",
    ordinals: ["first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth", "twentieth"],
    cardinals: ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty", "twentyone", "twentytwo", "twentythree", "twentyfour", "twentyfive", "twentysix", "twentyseven", "twentyeight", "twentynine", "thirty", "thirtyone", "thirtytwo", "thirtythree", "thirtyfour"],
    challengeBaseRequirements: [10, 20, 60, 100, 200, 125, 500, 10000, 2.5e8, 3.5e9],
    prestigeamount: 1,
    taxdivisor: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    taxdivisorcheck: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    runemultiplierincrease: {
        one: 1,
        two: 1,
        three: 1,
        four: 1,
        five: 1
    },
    mythosupgrade13: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    mythosupgrade14: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    mythosupgrade15: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    challengefocus: 0,
    maxexponent: 10000,
    maxbuyresearch: false,
    effectiveLevelMult: 1,
    optimalOfferingTimer: 600,
    optimalObtainiumTimer: 3600,
    runeSum: 0,
    shopBaseCosts: {
        offerPotion: 100,
        obtainiumPotion: 100,
        offerTimer: 150,
        obtainiumTimer: 150,
        offerAuto: 150,
        obtainiumAuto: 150,
        instantChallenge: 300,
        cashGrab: 100,
        antSpeed: 200,
        seasonPass: 500,
        challengeExtension: 500,
        challenge10Upgrade: 500,
        cubeToQuark: 2000,
        tesseractToQuark: 3500,
        hypercubeToQuark: 5000,
    },
    shopConfirmation: true,
    globalAntMult: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    antMultiplier: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    antOneProduce: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    antTwoProduce: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    antThreeProduce: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    antFourProduce: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    antFiveProduce: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    antSixProduce: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    antSevenProduce: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    antEightProduce: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    antCostGrowth: [1e41, 3, 10, 1e2, 1e4, 1e8, 1e16, 1e32],
    antUpgradeBaseCost: [100, 100, 1000, 1000, 1e5, 1e6, 1e8, 1e11, 1e15, 1e20, 1e40, 1e100],
    antUpgradeCostIncreases: [10, 10, 10, 10, 100, 100, 100, 100, 1000, 1000, 1000, 1e100],
    bonusant1: 0,
    bonusant2: 0,
    bonusant3: 0,
    bonusant4: 0,
    bonusant5: 0,
    bonusant6: 0,
    bonusant7: 0,
    bonusant8: 0,
    bonusant9: 0,
    bonusant10: 0,
    bonusant11: 0,
    bonusant12: 0,
    rune1level: 1,
    rune2level: 1,
    rune3level: 1,
    rune4level: 1,
    rune5level: 1,
    rune1Talisman: 0,
    rune2Talisman: 0,
    rune3Talisman: 0,
    rune4Talisman: 0,
    rune5Talisman: 0,
    talisman1Effect: [null, 0, 0, 0, 0, 0],
    talisman2Effect: [null, 0, 0, 0, 0, 0],
    talisman3Effect: [null, 0, 0, 0, 0, 0],
    talisman4Effect: [null, 0, 0, 0, 0, 0],
    talisman5Effect: [null, 0, 0, 0, 0, 0],
    talisman6Effect: [null, 0, 0, 0, 0, 0],
    talisman7Effect: [null, 0, 0, 0, 0, 0],
    talisman6Power: 0,
    talisman7Quarks: 0,
    runescreen: "runes",
    settingscreen: "settings",
    talismanResourceObtainiumCosts: [1e13, 1e14, 1e16, 1e18, 1e20, 1e22, 1e24],
    talismanResourceOfferingCosts: [100, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9],
    talismanLevelCostMultiplier: [null, 1, 4, 1e4, 1e8, 1e13, 10, 100],
    talismanPositiveModifier: [null, 0.75, 1.5, 2.25, 3, 3.75, 4.5],
    talismanNegativeModifier: [null, 0, 0, 0, 0, 0, 0],
    commonTalismanEnhanceCost: [null, 0, 3000, 1000, 0, 0, 0, 0],
    uncommonTalismanEnchanceCost: [null, 0, 10000, 3000, 1000, 0, 0, 0],
    rareTalismanEnchanceCost: [null, 0, 100000, 20000, 2000, 500, 0, 0],
    epicTalismanEnhanceCost: [null, 0, 2e6, 2e5, 2e4, 2000, 1000, 0],
    legendaryTalismanEnchanceCost: [null, 0, 4e7, 2e6, 1e5, 20000, 2500, 200],
    mythicalTalismanEnchanceCost: [null, 0, 0, 0, 0, 0, 0, 0],
    talismanRespec: 1,
    obtainiumGain: 0,
    mirrorTalismanStats: [null, 1, 1, 1, 1, 1],
    antELO: 0,
    effectiveELO: 0,
    timeWarp: false,
    blessingMultiplier: 1,
    spiritMultiplier: 1,
    runeBlessings: [0, 0, 0, 0, 0, 0],
    runeSpirits: [0, 0, 0, 0, 0, 0],
    effectiveRuneBlessingPower: [0, 0, 0, 0, 0, 0],
    effectiveRuneSpiritPower: [0, 0, 0, 0, 0, 0],
    blessingBaseCost: 1e6,
    spiritBaseCost: 1e20,
    triggerChallenge: 0,
    prevReductionValue: -1,
    buildingSubTab: "coin",
    blessingbase: [null, 1 / 500, 1 / 5000, 1 / 2000, 1 / 750, 1 / 200, 1 / 10000, 1 / 5000, 1 / 10, 1 / 10000, 1 / 1000],
    blessingDRPower: [null, 1 / 3, 1 / 3, 2 / 3, 1 / 2, 2 / 3, 2, 1 / 3, 1 / 3, 1 / 16, 1 / 16],
    giftbase: [1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000],
    giftDRPower: [1 / 6, 1 / 6, 1 / 3, 1 / 4, 1 / 3, 1, 1 / 6, 1 / 6, 1 / 32, 1 / 32],
    benedictionbase: [null, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000, 1 / 1000],
    benedictionDRPower: [null, 1 / 12, 1 / 12, 1 / 6, 1 / 8, 1 / 6, 1 / 2, 1 / 12, 1 / 12, 1 / 64, 1 / 64],
    platonicCubeBase: [2 / 4e6, 1.5 / 4e6, 1 / 4e6, 1 / 8e4, 1 / 1e4, 1 / 1e5, 1 / 1e4, 1 / 1e4],
    platonicDRPower: [1 / 5, 1 / 5, 1 / 5, 1 / 5, 1 / 16, 1 / 16, 1 / 4, 1 / 8],
    cubeBonusMultiplier: [null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    tesseractBonusMultiplier: [null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    hypercubeBonusMultiplier: [null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    platonicBonusMultiplier: [1, 1, 1, 1, 1, 1, 1, 1],
    buyMaxCubeUpgrades: false,
    autoOfferingCounter: 0,
    researchOrderByCost: [],
    divisivenessPower: [1, 0.87, 0.80, 0.75, 0.70, 0.6, 0.54, 0.45, 0.39, 0.33, 0.3, 0.2, 0.1],
    maladaptivePower: [1, 0.87, 0.80, 0.75, 0.70, 0.6, 0.54, 0.45, 0.39, 0.33, 0.3, 0.2, 0.1],
    lazinessMultiplier: [1, 1 / 3, 1 / 10, 1 / 40, 1 / 200, 1 / 1e5, 1 / 1e7, 1 / 1e10, 1 / 1e13, 1 / 1e16, 1 / 1e20, 1 / 1e25, 1 / 1e35],
    hyperchallengedMultiplier: [1, 1.2, 1.5, 1.7, 3, 5, 8, 13, 21, 34, 55, 100, 400],
    illiteracyPower: [1, 0.8, 0.7, 0.6, 0.5, 0.3, 0.2, 0.15, 0.10, 0.06, 0.04, 0.02, 0.01],
    deflationMultiplier: [1, 0.3, 0.1, 0.03, 0.01, 1 / 1e6, 1 / 1e8, 1 / 1e10, 1 / 1e12, 1 / 1e15, 1 / 1e18, 1 / 1e25, 0],
    extinctionMultiplier: [1, 0.92, 0.86, 0.8, 0.74, 0.65, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0],
    droughtMultiplier: [1, 5, 25, 200, 1e4, 1e7, 1e11, 1e16, 1e22, 1e30, 1e40, 1e55, 1e80],
    financialcollapsePower: [1, 0.9, 0.7, 0.6, 0.5, 0.37, 0.30, 0.23, 0.18, 0.15, 0.12, 0.09, 0.03],
    corruptionPointMultipliers: [1, 2, 2.75, 3.5, 4.25, 5, 5.75, 6.5, 7, 7.5, 8, 9, 10],
    ascendBuildingProduction: {
        first: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default('0'),
        second: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default('0'),
        third: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default('0'),
        fourth: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default('0'),
        fifth: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default('0'),
    },
    freeUpgradeAccelerator: 0,
    freeUpgradeMultiplier: 0,
    acceleratorMultiplier: 1,
    multiplierMultiplier: 1,
    constUpgradeCosts: [null, 1, 13, 17, 237, 316, 4216, 5623, 74989, 1e10, 1e24],
    globalConstantMult: new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default("1"),
    autoTalismanTimer: 0,
    autoChallengeTimerIncrement: 0,
    corruptionTrigger: 1,
    challenge15Rewards: {
        cube1: 1,
        ascensions: 1,
        coinExponent: 1,
        taxes: 1,
        obtainium: 1,
        offering: 1,
        accelerator: 1,
        multiplier: 1,
        runeExp: 1,
        runeBonus: 1,
        cube2: 1,
        transcendChallengeReduction: 1,
        reincarnationChallengeReduction: 1,
        antSpeed: 1,
        bonusAntLevel: 1,
        cube3: 1,
        talismanBonus: 1,
        globalSpeed: 1,
        blessingBonus: 1,
        constantBonus: 1,
        cube4: 1,
        spiritBonus: 1,
        score: 1,
    },
    autoResetTimers: {
        prestige: 0,
        transcension: 0,
        reincarnation: 0,
        ascension: 0
    },
    timeMultiplier: 1,
    upgradeMultiplier: 1
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Globals);


/***/ }),
/* 6 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "challengeDisplay": () => /* binding */ challengeDisplay,
/* harmony export */   "getChallengeConditions": () => /* binding */ getChallengeConditions,
/* harmony export */   "toggleRetryChallenges": () => /* binding */ toggleRetryChallenges,
/* harmony export */   "highestChallengeRewards": () => /* binding */ highestChallengeRewards,
/* harmony export */   "CalcECC": () => /* binding */ CalcECC,
/* harmony export */   "challengeRequirement": () => /* binding */ challengeRequirement,
/* harmony export */   "runChallengeSweep": () => /* binding */ runChallengeSweep,
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var _Toggles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);





const challengeDisplay = (i, changefocus) => {
    changefocus = (changefocus === null || changefocus === undefined) ? true : changefocus;
    if (changefocus) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus = i;
        document.getElementById("oneChallengeDetails").style.display = "block";
    }
    let quarksMultiplier = 1;
    if (changefocus) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus = i;
        document.getElementById("oneChallengeDetails").style.display = "block";
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.triggerChallenge = i;
    }
    let maxChallenges = 0;
    if (i <= 5 && changefocus) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i] >= 100) {
            document.getElementById('completionSoftcap').textContent = "|| Softcapped past 100! Effective completion count: " + CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i]);
        }
        else {
            document.getElementById('completionSoftcap').textContent = "";
        }
    }
    if (i > 5 && i <= 10) {
        maxChallenges = 25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.cubeUpgrades[29] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.shopUpgrades.challengeExtension + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.platonicUpgrades[5] + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.platonicUpgrades[10] + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.platonicUpgrades[15];
        quarksMultiplier = 10;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i] >= 25 && changefocus) {
            document.getElementById('completionSoftcap').textContent = "|| Softcapped past 25! Effective completion count: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i]), 2, true);
        }
        else {
            document.getElementById('completionSoftcap').textContent = "";
        }
    }
    if (i > 10) {
        maxChallenges = 30 + 3 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.platonicUpgrades[5] + 3 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.platonicUpgrades[10] + 4 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.platonicUpgrades[15];
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i] >= 10) {
            document.getElementById('completionSoftcap').textContent = "|| Softcapped past 10! Effective completion count: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(CalcECC('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i]), 2, true);
        }
        else {
            document.getElementById('completionSoftcap').textContent = "";
        }
    }
    let descriptor = "";
    const a = document.getElementById("challengeName");
    const b = document.getElementById("challengeFlavor");
    const c = document.getElementById("challengeRestrictions");
    const d = document.getElementById("challengeGoal");
    const e = document.getElementById("challengePer1").childNodes[0];
    const f = document.getElementById("challengePer2").childNodes[0];
    const g = document.getElementById("challengePer3").childNodes[0];
    const h = document.getElementById("challengeFirst1");
    const j = document.getElementById("challengeQuarkBonus");
    const k = document.getElementById("startChallenge");
    const l = document.getElementById("challengeCurrent1");
    const m = document.getElementById("challengeCurrent2");
    const n = document.getElementById("challengeCurrent3");
    if (i === 1 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 1) {
        maxChallenges = 25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[66] + 925 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[105];
        a.textContent = "No Multipliers Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[1] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "Multipliers make the game a little too fast. Let's take them out!";
        c.textContent = "Transcend and reach the goal except Multipliers do nothing but act like Accelerators, which are nerfed by 50%!";
        d.textContent = "Goal: Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i])) + " Coins in challenge.";
        e.textContent = "+10 base Multiplier Boosts! [+0.05 to power!] Current: ";
        f.textContent = "+10% total Multiplier Boosts! Current: ";
        g.textContent = "+0.04 base Rune exp per Offering! Current: ";
        h.textContent = "+1 free Multiplier! +1 Base EXP per offering used!";
        k.textContent = "Start [No Multipliers]";
        l.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(10 * CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[1])) + " Boosts";
        m.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(10 * CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[1])) + "% more Boosts";
        n.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(0.04 * CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[1]), 2, true) + " Rune EXP [Highest Completion]";
    }
    if (i === 2 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 2) {
        maxChallenges = 25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[67] + 925 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[105];
        a.textContent = "No Accelerators Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[2] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "Who needs accelerators? They do basically nothing now.";
        c.textContent = "Transcend and reach the goal except Accelerators do nothing! Multipliers are nerfed a bit as well.";
        d.textContent = "Goal: Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i])) + " Coins in challenge.";
        e.textContent = "+5 Free Accelerators! Current: ";
        f.textContent = "+5% Accelerator Boost Power! Current: ";
        g.textContent = "+0.25% Accelerator Power! Current: ";
        h.textContent = "+1 base offering for Prestige and Transcensions.";
        k.textContent = "Start [No Accelerators]";
        l.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(5 * CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[2])) + " Accelerators";
        m.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(5 * CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[2])) + "% A.Boost Power";
        n.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(0.25 * CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[2]), 2, true) + "% Accelerator Power";
    }
    if (i === 3 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 3) {
        maxChallenges = 25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[68] + 925 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[105];
        a.textContent = "No Shards Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[3] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "Alright, now you're thinking, how else can I make the game harder?";
        c.textContent = "Transcend and reach the goal except you do not produce Crystals or Mythos Shards.";
        d.textContent = "Goal: Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i])) + " Coins in challenge.";
        e.textContent = "Crystal --> Coin conversion exponent +0.04! Current: ";
        f.textContent = "+0.5% to Grandmaster production per Mythos producer bought. Current: ";
        g.textContent = "When you use a rune, all other runes gain +0.01 EXP. Current: ";
        h.textContent = "Gain an offering automatically every 2 seconds!";
        k.textContent = "Start [No Shards]";
        l.textContent = "Exponent +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(0.04 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[3], 2, true);
        m.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(0.5 * CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[3]), 2, true) + "%";
        n.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(0.01 * CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[3]), 2, true) + " EXP";
    }
    if (i === 4 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 4) {
        maxChallenges = 25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[69] + 925 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[105];
        a.textContent = "Cost+ Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[4] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "You're getting rich now, but inflation hasn't happened yet? I don't think so!";
        c.textContent = "Transcend and reach the goal except Coin/Crystal producers, Accelerators and Multipliers cost more. [Gets harder each time!]";
        d.textContent = "Goal: Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i])) + " Coins in challenge.";
        e.textContent = "Accelerator Cost scale slows down by +5 purchases. Current: ";
        f.textContent = "Multiplier Cost scale slows down by +2 purchases. Current: ";
        g.textContent = "Building Cost Delay +0.5%. Current: ";
        h.textContent = "None";
        k.textContent = "Start [Cost+]";
        l.textContent = "Accelerator Delay +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(5 * CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[4]));
        m.textContent = "Multiplier Delay +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(2 * CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[4]));
        n.textContent = "Building Cost Delay +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(0.5 * CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[4]), 2, true) + "%";
    }
    if (i === 5 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 5) {
        maxChallenges = 25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[70] + 925 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[105];
        a.textContent = "Reduced Diamonds Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[5] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "You ever wonder how you get so many diamonds?";
        c.textContent = "Transcend and reach the goal except you gain far fewer Diamonds from all sources [Gets harder each time!]";
        d.textContent = "Goal: Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i])) + " Coins in challenge.";
        e.textContent = "+0.01 Coin --> Diamond conversion exponent on Prestige! Current: ";
        f.textContent = "Multiply Crystal production by 10! Current: ";
        g.textContent = "";
        h.textContent = "None";
        k.textContent = "Start [Reduced Diamonds]";
        l.textContent = "Exponent = ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(0.5 + CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[5]) / 100, 2, true);
        m.textContent = "Crystal production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(Math.pow(10, CalcECC('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[5])));
        n.textContent = "";
    }
    if (i === 6 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 6) {
        a.textContent = "Higher Tax Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[6] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "The tax man caught wind that you reincarnated recently...";
        c.textContent = "Reincarnate and reach the goal except tax has a lower cap, and Coin production is divided by 1e250.";
        d.textContent = "Goal: Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i], 6)) + " Mythos Shards in challenge.";
        e.textContent = "-3.5% Taxes [Multiplicative]! Current: ";
        f.textContent = "Thrift Rune Exp +10%! Current: ";
        g.textContent = "Prestige Offerings +2%! Current: ";
        h.textContent = "-7.5% Taxes!";
        k.textContent = "Start <Higher Tax>";
        l.textContent = "Tax multiplier x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(Math.pow(0.965, CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[6])), 3, true);
        m.textContent = "EXP +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(10 * CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[6])) + "%";
        n.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(2 * CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[6])) + "% Prestige-based Offerings";
    }
    if (i === 7 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 7) {
        a.textContent = "No Multipliers/Accelerators Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[7] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "You're really going to hate this one.";
        c.textContent = "Reincarnate and reach the goal except Accelerators and Multipliers do nothing. Coin Production is divided by 1e1,250.";
        d.textContent = "Goal: Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i], 7)) + " Mythos Shards in challenge.";
        e.textContent = "Accelerator/Multiplier boost power exponent +0.04! Current: ";
        f.textContent = "Speed Rune Exp +10%! Current: ";
        g.textContent = "Duplication Rune Exp +10%! Current: ";
        h.textContent = "Multiplier Boost power +25%! The first Discord-Booster Global Diamond Upgrade.";
        k.textContent = "Start <No Multipliers/Accelerators>";
        l.textContent = "Exponent = ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(1 + 0.04 * CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[7]), 2, true);
        m.textContent = "EXP +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(10 * CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[7])) + "%";
        n.textContent = "EXP +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(10 * CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[7])) + "%";
    }
    if (i === 8 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 8) {
        a.textContent = "Cost++ Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[8] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "You thought you could outgrow inflation by Reincarnating?";
        c.textContent = "Reincarnate and reach the goal except Cost Scaling for producers and Accelerators/Multipliers scale much, much faster.";
        d.textContent = "Goal: Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i], 8)) + " Mythos Shards in challenge.";
        e.textContent = "Base Building Power +0.25! Current: ";
        f.textContent = "Prism Rune Exp +20%! Current: ";
        g.textContent = "Transcend Offerings +4%! Current: ";
        h.textContent = "Unlock the Anthill feature! Includes 20 new Researches. A Global Diamond Upgrade.";
        k.textContent = "Start <Cost++>";
        l.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(0.25 * CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[8]), 2, true);
        m.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(20 * CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[8]), 2, true) + "% EXP";
        n.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(4 * CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[8]), 2, true) + "% Transcend-based offerings";
    }
    if (i === 9 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 9) {
        a.textContent = "No Runes Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[9] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "You'll never complain about Prism being bad again.";
        c.textContent = "Reincarnate and reach the goal except runes always have level 1 effects. All coin production is divided by e2,000,000.";
        d.textContent = "Goal: Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i])) + " Coins in challenge.";
        e.textContent = "+1 free Ant level! Current: ";
        f.textContent = "+10% Ant speed [Multiplicative!] Current: ";
        g.textContent = "SI Rune Exp +20%! Current: ";
        h.textContent = "Unlock the Talismans feature! [In Runes tab]. A Global Diamond Upgrade.";
        k.textContent = "Start <No Runes>";
        l.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[9])) + " free levels";
        m.textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(Math.pow(1.1, CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[9])), 2, true) + " Ant Speed";
        n.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(20 * CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[9]), 2, true) + "% EXP";
    }
    if (i === 10 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 10) {
        a.textContent = "Sadistic Challenge I || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[10] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "I'm sorry for what I've unleashed onto the world.";
        c.textContent = "Reincarnate and reach the goal except run the first five challenges AT THE SAME TIME! Coin Production /e12,500,000.";
        d.textContent = "Goal: Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i])) + " Coins in challenge.";
        e.textContent = "+100 base ELO for sacrificing ants! Current: ";
        f.textContent = "+2% Ant Sacrifice Reward! Current: ";
        g.textContent = "Reincarnation Offerings +10%! Current: ";
        h.textContent = "Unlock the Ascension Reset Tier!";
        k.textContent = "Start <Sadistic I>";
        l.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(100 * CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[10])) + " Ant ELO";
        m.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(2 * CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[10])) + "% Ant Sacrifice reward";
        n.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(10 * CalcECC('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[10]), 2, true) + "% Reincarnate-based offerings";
    }
    if (i === 11 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 11) {
        a.textContent = "Reduced Ants Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[11] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "The great Ant War of '21 wiped off all of the skilled ants.";
        c.textContent = "Ascend and reach the goal but only get free ant upgrades and from Challenge8/9 completions. FOR ASCENSION CHALLENGES YOU MUST CLEAR CHALLENGE 10 TO ATTEMPT THEM.";
        d.textContent = "Goal: Complete Challenge 10 [Sadistic Challenge I] " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i])) + " times.";
        e.textContent = "+12 free Ant Levels! Current: ";
        f.textContent = "Ant Speed x(1e5)^completions! Current: ";
        g.textContent = "+80 to Rune Caps! Current: ";
        h.textContent = "Unlock 15 Researches, and unlock the ability to open Tesseracts!";
        k.textContent = "Start <[(Reduced Ants)]>";
        l.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(12 * CalcECC('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[11])) + " free ant levels";
        m.textContent = "Ant Speed x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(1e5, CalcECC('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[11])));
        n.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(80 * CalcECC('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[11])) + " to Rune Caps";
    }
    if (i === 12 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 12) {
        a.textContent = "No Reincarnation Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[12] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "For some reason, you just can't do it.";
        c.textContent = "Ascend and reach the goal but you do not gain Particles and you cannot Reincarnate at all! Ant production ^0.5.";
        d.textContent = "Goal: Complete Challenge 10 [Sadistic Challenge I] " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i])) + " times.";
        e.textContent = "+50% Obtainium! Current: ";
        f.textContent = "+12% Offerings! Current: ";
        g.textContent = "+1 Cube Tribute per opening! Current: ";
        h.textContent = "Unlock 15 Researches, and unlock the mystical Spirit Power! Find these in the Runes tab.";
        k.textContent = "Start <[(No Reincarnation)]>";
        l.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(50 * CalcECC('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[12])) + "% Obtainium";
        m.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(12 * CalcECC('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[12])) + "% Offerings";
        n.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(CalcECC('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[12])) + " additional Cube Tributes";
    }
    if (i === 13 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 13) {
        a.textContent = "Tax+++ Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[13] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "Good luck with the IRS, buddy.";
        c.textContent = "Ascend and reach the goal, but taxes are much higher and grow with challenge completions. Ant production ^0.23";
        d.textContent = "Goal: Complete Challenge 10 [Sadistic Challenge I] " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i])) + " times.";
        e.textContent = "Taxes -3.33%! Multiplicative! Current: ";
        f.textContent = "+6 maximum to Talisman Level Cap! Current: ";
        g.textContent = "+3% Spirit Power effectiveness! Current: ";
        h.textContent = "Unlock 15 Researches, and unlock the power of the Hypercube!";
        k.textContent = "Start <[(Tax+++)]>";
        l.textContent = "-" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(100 - 100 * Math.pow(0.966, CalcECC('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[13])), 3, true) + "% Corruption Tax";
        m.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(6 * CalcECC('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[13])) + " Talisman Level Cap";
        n.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(3 * CalcECC('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[13])) + "% Effectiveness";
    }
    if (i === 14 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 14) {
        a.textContent = "No Research Challenge || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[14] + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(maxChallenges) + " Completions";
        b.textContent = "The dimension that never progressed past the dark ages. Many fear to even step foot.";
        c.textContent = "Ascend and reach the goal but you do not gain Obtainium nor are any researches purchasable. Ant production ^0.2.";
        d.textContent = "Goal: Complete Challenge 10 [Sadistic Challenge I] " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(challengeRequirement(i, _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i])) + " times.";
        e.textContent = "+50% stronger effect on researches 1x1 through 1x5. Current: ";
        f.textContent = "+1 research purchased per roomba tick! Current: ";
        g.textContent = "+200 to Rune Caps! Current: ";
        h.textContent = "Unlock 15 Researches, and a way to coalesce your power into the Singularity.";
        k.textContent = "Start <[(No Research)]>";
        l.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(50 * CalcECC('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[14])) + "% Power";
        m.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(1 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[14]) + " per Tick";
        n.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(200 * CalcECC('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[14])) + " to Rune Caps";
    }
    if (i === 15 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengefocus === 15) {
        a.textContent = "SADISTIC CHALLENGE II || " + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[15] + "/9001 Completions";
        b.textContent = "The worst sin a man can do is making others suffer.";
        c.textContent = "Ascend and reach the goal but you're FULLY corrupt and must stay that way.";
        d.textContent = "Goal: 1e4T Coins, but get bonuses based on your best attempt.";
        e.textContent = "You have no idea ";
        f.textContent = "what you have just done ";
        g.textContent = "the ant god shakes their mighty head ";
        h.textContent = "Enter the singularity.";
        k.textContent = "Start <[(Sadistic Challenge II)]>";
        l.textContent = "";
        m.textContent = "";
        n.textContent = "";
    }
    const scoreArray1 = [0, 8, 10, 12, 15, 20, 60, 80, 120, 180, 300];
    const scoreArray2 = [0, 10, 12, 15, 20, 30, 80, 120, 180, 300, 450];
    const scoreArray3 = [0, 20, 30, 50, 100, 200, 250, 300, 400, 500, 750];
    let scoreDisplay = 0;
    if (i <= 5) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.highestchallengecompletions[i] >= 750) {
            scoreDisplay = scoreArray3[i];
        }
        else if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.highestchallengecompletions[i] >= 75) {
            scoreDisplay = scoreArray2[i];
        }
        else {
            scoreDisplay = scoreArray1[i];
        }
    }
    if (i > 5 && i <= 10) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.highestchallengecompletions[i] >= 60) {
            scoreDisplay = scoreArray3[i];
        }
        else if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.highestchallengecompletions[i] >= 25) {
            scoreDisplay = scoreArray2[i];
        }
        else {
            scoreDisplay = scoreArray1[i];
        }
    }
    if (changefocus) {
        j.textContent = "";
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.ascensionCount === 0) {
        descriptor = "Quarks";
        j.style.color = "cyan";
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i] >= _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.highestchallengecompletions[i] && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.highestchallengecompletions[i] < maxChallenges && changefocus && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.ascensionCount < 1) {
        j.textContent = "Gain " + Math.floor(quarksMultiplier * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.highestchallengecompletions[i] / 10 + 1 + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.cubeUpgrades[1] + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.cubeUpgrades[11] + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.cubeUpgrades[21] + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.cubeUpgrades[31] + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.cubeUpgrades[41]) + " " + descriptor + " for completing this challenge [First Time Bonus]!";
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i] >= _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.highestchallengecompletions[i] && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.highestchallengecompletions[i] < maxChallenges && changefocus && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.ascensionCount >= 1) {
        j.textContent = "Completing the challenge adds " + ((i > 5) ? 2 : 1) + " to Ascension Bank and increase base Score by " + scoreDisplay + ".";
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[i] >= _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.highestchallengecompletions[i] && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.highestchallengecompletions[i] < 10 && i > 10) {
        j.textContent = "Gain 1 Wow! HYPERCUBE for completing this challenge (First Time Bonus)";
    }
    (i <= 10 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[150] > 0) ?
        (document.getElementById("toggleAutoChallengeIgnore").style.display = "block", document.getElementById('toggleAutoChallengeIgnore').style.border = "2px solid green") :
        document.getElementById("toggleAutoChallengeIgnore").style.display = "none";
    let constructor = "ON";
    if (!_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeToggles[i]) {
        constructor = "OFF";
        document.getElementById('toggleAutoChallengeIgnore').style.border = "2px solid red";
    }
    document.getElementById("toggleAutoChallengeIgnore").textContent = "Automatically Run Chal." + i + " [" + constructor + "]";
    const ella = document.getElementById("toggleAutoChallengeStart");
    (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeRunning) ?
        (ella.textContent = "Auto Challenge Sweep [ON]", ella.style.border = "2px solid gold") :
        (ella.textContent = "Auto Challenge Sweep [OFF]", ella.style.border = "2px solid red");
};
const getChallengeConditions = (i) => {
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.currentChallenge.reincarnation === 9) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune1level = 1;
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune2level = 1;
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune3level = 1;
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune4level = 1;
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.rune5level = 1;
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.crystalUpgrades = [0, 0, 0, 0, 0, 0, 0, 0];
    }
    _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.prestigePointGain = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default('0');
    if (i >= 6) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.transcendPointGain = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default('0');
    }
    if (i >= 11) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.reincarnationPointGain = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default('0');
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateRuneLevels)();
};
const toggleRetryChallenges = () => {
    document.getElementById("retryChallenge").textContent = _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.retrychallenges
        ? "Retry Challenges: OFF"
        : "Retry Challenges: ON";
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.retrychallenges = !_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.retrychallenges;
};
const highestChallengeRewards = (chalNum, highestValue) => {
    let multiplier = 1 / 10;
    if (chalNum >= 6) {
        multiplier = 1;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.ascensionCount === 0) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.worlds += (1 + Math.floor(highestValue * multiplier) * 100 / 100);
    }
};
const calculateChallengeRequirementMultiplier = (type, completions, special = 0) => {
    let requirementMultiplier = Math.max(1, _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.hyperchallengedMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.usedCorruptions[4]] / (1 + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.platonicUpgrades[8] / 2.5));
    switch (type) {
        case "transcend":
            (completions >= 75) ?
                requirementMultiplier *= Math.pow(1 + completions, 12) / Math.pow(75, 8) :
                requirementMultiplier *= Math.pow(1 + completions, 2);
            requirementMultiplier *= _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challenge15Rewards.transcendChallengeReduction;
            return (requirementMultiplier);
        case "reincarnation":
            if (completions >= 60) {
                if (special === 8) {
                    requirementMultiplier *= Math.pow(1 + completions, 1) / 60;
                }
                else if (special === 7) {
                    requirementMultiplier *= Math.pow(1 + completions, 1) / 30;
                }
                else if (special === 6) {
                    requirementMultiplier *= Math.pow(1 + completions, 2) / 360;
                }
                else {
                    requirementMultiplier *= Math.pow(1 + completions, 5) / 7200;
                }
            }
            if (completions >= 25) {
                requirementMultiplier *= Math.pow(1 + completions, 5) / 625;
            }
            if (completions < 25) {
                requirementMultiplier *= Math.min(Math.pow(1 + completions, 2), Math.pow(1.3797, completions));
            }
            requirementMultiplier *= _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challenge15Rewards.reincarnationChallengeReduction;
            return requirementMultiplier;
        case "ascension":
            (completions >= 10) ?
                requirementMultiplier *= (2 * (1 + completions) - 10) :
                requirementMultiplier *= (1 + completions);
            return (requirementMultiplier);
    }
};
const CalcECC = (type, completions) => {
    let effective = 0;
    switch (type) {
        case "transcend":
            effective += Math.min(100, completions);
            effective += 1 / 20 * (Math.max(100, completions) - 100);
            return (effective);
        case "reincarnation":
            effective += Math.min(25, completions);
            effective += 1 / 2 * (Math.max(25, completions) - 25);
            return (effective);
        case "ascension":
            effective += Math.min(10, completions);
            effective += 1 / 2 * (Math.max(10, completions) - 10);
            return (effective);
    }
};
const challengeRequirement = (challenge, completion, special = 0) => {
    const base = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.challengeBaseRequirements[challenge - 1];
    if (challenge <= 5) {
        return break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, base * calculateChallengeRequirementMultiplier("transcend", completion, special));
    }
    else if (challenge <= 10) {
        let c10Reduction = 0;
        if (challenge === 10) {
            c10Reduction = (1e8 * (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[140] + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[155] + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[170] + _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[185]) + 2e7 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.shopUpgrades.challenge10Tomes);
        }
        return break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, (base - c10Reduction) * calculateChallengeRequirementMultiplier('reincarnation', completion, special));
    }
    else if (challenge <= 14) {
        return calculateChallengeRequirementMultiplier("ascension", completion, special);
    }
    else if (challenge === 15) {
        return break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, 4 * Math.pow(10, 30));
    }
};
const runChallengeSweep = (dt) => {
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.researches[150] > 0 &&
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeRunning &&
        (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.reincarnationPoints.gte('0') || _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.currentChallenge.ascension === 12)) {
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoChallengeTimerIncrement += dt;
        if (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoChallengeTimerIncrement >= _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeTimer.exit) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.currentChallenge.transcension !== 0 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex <= 5) {
                (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.resetCheck)('challenge', undefined, true);
                _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoChallengeTimerIncrement = 0;
                _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex += 1;
                if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeTimer.enter >= 1) {
                    (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleAutoChallengeTextColors)(3);
                }
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.currentChallenge.reincarnation !== 0 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex > 5) {
                (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.resetCheck)('reincarnationchallenge', undefined, true);
                _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoChallengeTimerIncrement = 0;
                _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex += 1;
                if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeTimer.enter >= 1) {
                    (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleAutoChallengeTextColors)(3);
                }
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex > 10) {
                _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex = 1;
                if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeTimer.start >= 1) {
                    (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleAutoChallengeTextColors)(1);
                }
            }
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex === 1 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoChallengeTimerIncrement >= _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeTimer.start) {
            while (!_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeToggles[_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex]) {
                _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex += (!_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeToggles[_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex]) ? 1 : 0;
                if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex === 10) {
                    break;
                }
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.currentChallenge.transcension === 0 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.currentChallenge.reincarnation === 0) {
                _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoChallengeTimerIncrement = 0;
            }
            (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleChallenges)(_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex, true);
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeTimer.exit >= 1) {
                (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleAutoChallengeTextColors)(2);
            }
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex !== 1 && _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoChallengeTimerIncrement >= _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeTimer.enter) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.currentChallenge.transcension === 0 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex <= 5) {
                while (!_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeToggles[_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex]) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex += 1;
                    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex > 10) {
                        _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex = 1;
                        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeTimer.start >= 1) {
                            (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleAutoChallengeTextColors)(1);
                        }
                        break;
                    }
                }
                if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex !== 1) {
                    (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleChallenges)(_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex, true);
                    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeTimer.exit >= 1) {
                        (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleAutoChallengeTextColors)(2);
                    }
                }
                _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoChallengeTimerIncrement = 0;
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.currentChallenge.reincarnation === 0 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex > 5) {
                while (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.challengecompletions[_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex] >= (25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.cubeUpgrades[29] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.shopUpgrades.challengeExtension + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.platonicUpgrades[5]) || !_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeToggles[_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex]) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex += 1;
                    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex > 10) {
                        _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex = 1;
                        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeTimer.start >= 1) {
                            (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleAutoChallengeTextColors)(1);
                        }
                        break;
                    }
                }
                if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex !== 1) {
                    (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleChallenges)(_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeIndex, true);
                    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.autoChallengeTimer.exit >= 1) {
                        (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleAutoChallengeTextColors)(2);
                    }
                }
                _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.autoChallengeTimerIncrement = 0;
            }
        }
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});


/***/ }),
/* 7 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toggleTabs": () => /* binding */ toggleTabs,
/* harmony export */   "toggleSettings": () => /* binding */ toggleSettings,
/* harmony export */   "toggleChallenges": () => /* binding */ toggleChallenges,
/* harmony export */   "toggleBuyAmount": () => /* binding */ toggleBuyAmount,
/* harmony export */   "toggleShops": () => /* binding */ toggleShops,
/* harmony export */   "tabs": () => /* binding */ tabs,
/* harmony export */   "subTabsInMainTab": () => /* binding */ subTabsInMainTab,
/* harmony export */   "keyboardTabChange": () => /* binding */ keyboardTabChange,
/* harmony export */   "toggleSubTab": () => /* binding */ toggleSubTab,
/* harmony export */   "toggleautoreset": () => /* binding */ toggleautoreset,
/* harmony export */   "toggleautobuytesseract": () => /* binding */ toggleautobuytesseract,
/* harmony export */   "toggleauto": () => /* binding */ toggleauto,
/* harmony export */   "toggleResearchBuy": () => /* binding */ toggleResearchBuy,
/* harmony export */   "toggleAutoResearch": () => /* binding */ toggleAutoResearch,
/* harmony export */   "toggleAutoSacrifice": () => /* binding */ toggleAutoSacrifice,
/* harmony export */   "toggleBuildingScreen": () => /* binding */ toggleBuildingScreen,
/* harmony export */   "toggleRuneScreen": () => /* binding */ toggleRuneScreen,
/* harmony export */   "toggleautofortify": () => /* binding */ toggleautofortify,
/* harmony export */   "toggleautoenhance": () => /* binding */ toggleautoenhance,
/* harmony export */   "toggleShopConfirmation": () => /* binding */ toggleShopConfirmation,
/* harmony export */   "toggleAntMaxBuy": () => /* binding */ toggleAntMaxBuy,
/* harmony export */   "toggleAntAutoSacrifice": () => /* binding */ toggleAntAutoSacrifice,
/* harmony export */   "toggleMaxBuyCube": () => /* binding */ toggleMaxBuyCube,
/* harmony export */   "toggleCubeSubTab": () => /* binding */ toggleCubeSubTab,
/* harmony export */   "updateAutoChallenge": () => /* binding */ updateAutoChallenge,
/* harmony export */   "toggleAutoChallengesIgnore": () => /* binding */ toggleAutoChallengesIgnore,
/* harmony export */   "toggleAutoChallengeRun": () => /* binding */ toggleAutoChallengeRun,
/* harmony export */   "toggleAutoChallengeTextColors": () => /* binding */ toggleAutoChallengeTextColors,
/* harmony export */   "toggleAutoAscend": () => /* binding */ toggleAutoAscend,
/* harmony export */   "updateRuneBlessingBuyAmount": () => /* binding */ updateRuneBlessingBuyAmount,
/* harmony export */   "toggleAutoTesseracts": () => /* binding */ toggleAutoTesseracts,
/* harmony export */   "toggleCorruptionLevel": () => /* binding */ toggleCorruptionLevel,
/* harmony export */   "toggleCorruptionLoadoutsStats": () => /* binding */ toggleCorruptionLoadoutsStats,
/* harmony export */   "toggleAscStatPerSecond": () => /* binding */ toggleAscStatPerSecond
/* harmony export */ });
/* harmony import */ var _UpdateHTML__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);
/* harmony import */ var _UpdateVisuals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(24);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9);
/* harmony import */ var _Reset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11);
/* harmony import */ var _Challenges__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(6);
/* harmony import */ var _Research__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(22);
/* harmony import */ var _Statistics__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(26);
/* harmony import */ var _Corruptions__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(27);












const tabNumberConst = {
    "settings": -1,
    "shop": 0,
    "buildings": 1,
    "upgrades": 2,
    "achievements": 3,
    "runes": 4,
    "challenges": 5,
    "researches": 6,
    "ants": 7,
    "cubes": 8,
    "traits": 9
};
const toggleTabs = (name) => {
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.currentTab = name;
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber = tabNumberConst[name];
    (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_0__.revealStuff)();
    (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_0__.hideStuff)();
    const subTabList = subTabsInMainTab(_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber).subTabList;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber !== -1) {
        for (let i = 0; i < subTabList.length; i++) {
            const button = document.getElementById(subTabList[i].buttonID);
            if (button && button.style.backgroundColor === "crimson") {
                _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.subtabNumber = i;
                break;
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber === 9 && button.style.borderColor === "dodgerblue") {
                _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.subtabNumber = i;
                break;
            }
        }
    }
    else {
        const btns = document.getElementById("settings").getElementsByClassName("subtabSwitcher")[0].children;
        for (let i = 0; i < btns.length; i++) {
            if (btns[i].classList.contains("buttonActive")) {
                _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.subtabNumber = i;
                break;
            }
        }
    }
};
const toggleSettings = (i) => {
    i++;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.toggles[i] === true) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.toggles[i] = false;
    }
    else {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.toggles[i] = true;
    }
    toggleauto();
};
const toggleChallenges = (i, auto = false) => {
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.transcension === 0 && (i <= 5)) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.ascension !== 15 || _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.ascensionCounter >= 2) {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.transcension = i;
            (0,_Reset__WEBPACK_IMPORTED_MODULE_6__.reset)("transcensionChallenge", false, "enterChallenge");
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.transcendCount -= 1;
        }
    }
    if ((_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.transcension === 0 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.reincarnation === 0) && (i >= 6 && i < 11)) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.ascension !== 15 || _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.ascensionCounter >= 2) {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.reincarnation = i;
            (0,_Reset__WEBPACK_IMPORTED_MODULE_6__.reset)("reincarnationChallenge", false, "enterChallenge");
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.reincarnationCount -= 1;
        }
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.challengecompletions[10] > 0) {
        if ((_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.transcension === 0 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.reincarnation === 0 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.ascension === 0) && (i >= 11)) {
            (0,_Reset__WEBPACK_IMPORTED_MODULE_6__.reset)("ascensionChallenge", false, "enterChallenge");
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.ascension = i;
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.ascension === 12) {
                _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.antPoints = new break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default("8");
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.ascension === 15) {
                _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.usedCorruptions[0] = 0;
                _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.prototypeCorruptions[0] = 0;
                for (let i = 1; i <= 9; i++) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.usedCorruptions[i] = 11;
                }
            }
        }
    }
    (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_0__.updateChallengeDisplay)();
    (0,_Challenges__WEBPACK_IMPORTED_MODULE_8__.getChallengeConditions)(i);
    if (!auto && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeRunning) {
        toggleAutoChallengeRun();
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.transcension !== 0 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.reincarnation !== 0 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.ascension !== 0 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[238] < 1) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_7__.achievementaward)(238);
    }
};
const toggleBuyAmount = (quantity, type) => {
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player[type + 'buyamount'] = quantity;
    let a = ['one', 'ten', 'hundred', 'thousand'][quantity.toString().length - 1];
    const c = type + a;
    let d = "";
    d = d + c;
    document.getElementById(d).style.backgroundColor = "Green";
    if (quantity !== 1) {
        a = "one";
        d = type + a;
        document.getElementById(d).style.backgroundColor = "Black";
    }
    if (quantity !== 10) {
        a = "ten";
        d = type + a;
        document.getElementById(d).style.backgroundColor = "Black";
    }
    if (quantity !== 100) {
        a = "hundred";
        d = type + a;
        document.getElementById(d).style.backgroundColor = "Black";
    }
    if (quantity !== 1000) {
        a = "thousand";
        d = type + a;
        document.getElementById(d).style.backgroundColor = "Black";
    }
};
const toggleShops = (i) => {
    if (i === 1 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.coin === false) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.coin = true;
        document.getElementById("shoptogglecoin").textContent = "Auto: ON";
    }
    else if (i === 1 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.coin === true) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.coin = false;
        document.getElementById("shoptogglecoin").textContent = "Auto: OFF";
    }
    if (i === 2 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.prestige === false) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.prestige = true;
        document.getElementById("shoptoggleprestige").textContent = "Auto: ON";
    }
    else if (i === 2 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.prestige === true) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.prestige = false;
        document.getElementById("shoptoggleprestige").textContent = "Auto: OFF";
    }
    if (i === 3 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.transcend === false) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.transcend = true;
        document.getElementById("shoptoggletranscend").textContent = "Auto: ON";
    }
    else if (i === 3 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.transcend === true) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.transcend = false;
        document.getElementById("shoptoggletranscend").textContent = "Auto: OFF";
    }
    if (i === 4 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.generators === false) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.generators = true;
        document.getElementById("shoptogglegenerator").textContent = "Auto: ON";
    }
    else if (i === 4 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.generators === true) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.generators = false;
        document.getElementById("shoptogglegenerator").textContent = "Auto: OFF";
    }
    if (i === 5 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.reincarnate === false) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.reincarnate = true;
        document.getElementById("particleAutoUpgrade").textContent = "Auto: ON";
    }
    else if (i === 5 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.reincarnate === true) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shoptoggles.reincarnate = false;
        document.getElementById("particleAutoUpgrade").textContent = "Auto: OFF";
    }
};
function tabs(mainTab) {
    const tabs = {
        "-1": { tabName: "settings", unlocked: true },
        0: { tabName: "shop", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.unlocks.reincarnate },
        1: { tabName: "buildings", unlocked: true },
        2: { tabName: "upgrades", unlocked: true },
        3: { tabName: "achievements", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.unlocks.coinfour },
        4: { tabName: "runes", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.unlocks.prestige },
        5: { tabName: "challenges", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.unlocks.transcend },
        6: { tabName: "researches", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.unlocks.reincarnate },
        7: { tabName: "ants", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[127] > 0 },
        8: { tabName: "cubes", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[141] > 0 },
        9: { tabName: "traits", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[141] > 0 }
    };
    if (typeof mainTab === 'undefined') {
        return tabs;
    }
    return tabs[mainTab];
}
const subTabsInMainTab = (mainTab) => {
    const subTabs = {
        "-1": {
            tabSwitcher: setActiveSettingScreen,
            subTabList: [
                { subTabID: "settingsubtab", unlocked: true },
                { subTabID: "creditssubtab", unlocked: true },
                { subTabID: "statisticsSubTab", unlocked: true },
                { subTabID: "resetHistorySubTab", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.unlocks.prestige },
                { subTabID: "ascendHistorySubTab", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.ascensionCount > 0 }
            ]
        },
        0: { subTabList: [] },
        1: {
            tabSwitcher: toggleBuildingScreen,
            subTabList: [
                { subTabID: "coin", unlocked: true, buttonID: "switchToCoinBuilding" },
                { subTabID: "diamond", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.unlocks.prestige, buttonID: "switchToDiamondBuilding" },
                { subTabID: "mythos", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.unlocks.transcend, buttonID: "switchToMythosBuilding" },
                { subTabID: "particle", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.unlocks.reincarnate, buttonID: "switchToParticleBuilding" },
                { subTabID: "tesseract", unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[183] > 0, buttonID: "switchToTesseractBuilding" }
            ]
        },
        2: { subTabList: [] },
        3: { subTabList: [] },
        4: {
            tabSwitcher: toggleRuneScreen,
            subTabList: [
                { subTabID: 1, unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.unlocks.prestige, buttonID: "toggleRuneSubTab1" },
                { subTabID: 2, unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[134] > 0, buttonID: "toggleRuneSubTab2" },
                { subTabID: 3, unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[134] > 0, buttonID: "toggleRuneSubTab3" },
                { subTabID: 4, unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[204] > 0, buttonID: "toggleRuneSubTab4" }
            ]
        },
        5: { subTabList: [] },
        6: { subTabList: [] },
        7: { subTabList: [] },
        8: {
            tabSwitcher: toggleCubeSubTab,
            subTabList: [
                { subTabID: 1, unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[141] > 0, buttonID: "switchCubeSubTab1" },
                { subTabID: 2, unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[197] > 0, buttonID: "switchCubeSubTab2" },
                { subTabID: 3, unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[211] > 0, buttonID: "switchCubeSubTab3" },
                { subTabID: 4, unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[218] > 0, buttonID: "switchCubeSubTab4" },
                { subTabID: 5, unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[141] > 0, buttonID: "switchCubeSubTab5" },
                { subTabID: 6, unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[218] > 0, buttonID: "switchCubeSubTab6" }
            ]
        },
        9: {
            tabSwitcher: toggleCorruptionLoadoutsStats,
            subTabList: [
                { subTabID: true, unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[141] > 0, buttonID: "corrStatsBtn" },
                { subTabID: false, unlocked: _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.achievements[141] > 0, buttonID: "corrLoadoutsBtn" }
            ]
        },
    };
    return subTabs[mainTab];
};
const keyboardTabChange = (dir = 1, main = true) => {
    if (main) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber += dir;
        const maxTab = Object.keys(tabs()).reduce((a, b) => Math.max(a, +b), -Infinity);
        const minTab = Object.keys(tabs()).reduce((a, b) => Math.min(a, +b), Infinity);
        const handleLoopBack = () => {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber === maxTab + 1) {
                _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber = minTab;
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber === minTab - 1) {
                _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber = maxTab;
            }
        };
        handleLoopBack();
        while (!tabs(_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber).unlocked) {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber += dir;
            handleLoopBack();
        }
        toggleTabs(tabs(_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber).tabName);
    }
    else {
        const subTabList = subTabsInMainTab(_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber).subTabList;
        if (subTabList.length === 0)
            return;
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.subtabNumber += dir;
        const handleLoopBack = () => {
            const numSubTabs = subTabList.length;
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.subtabNumber = (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.subtabNumber + numSubTabs) % numSubTabs;
        };
        handleLoopBack();
        while (!subTabList[_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.subtabNumber].unlocked) {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.subtabNumber += dir;
            handleLoopBack();
        }
        toggleSubTab(_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tabnumber, _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.subtabNumber);
    }
};
const toggleSubTab = (mainTab = 1, subTab = 0) => {
    if (tabs(mainTab).unlocked && subTabsInMainTab(mainTab).subTabList.length > 0) {
        if (mainTab === -1) {
            const btn = document.getElementById("settings").getElementsByClassName("subtabSwitcher")[0].children[subTab];
            if (subTabsInMainTab(mainTab).subTabList[subTab].unlocked)
                subTabsInMainTab(mainTab).tabSwitcher(subTabsInMainTab(mainTab).subTabList[subTab].subTabID, btn);
        }
        else {
            if (subTabsInMainTab(mainTab).subTabList[subTab].unlocked)
                subTabsInMainTab(mainTab).tabSwitcher(subTabsInMainTab(mainTab).subTabList[subTab].subTabID);
        }
    }
};
const toggleautoreset = (i) => {
    if (i === 1) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.resettoggle1 === 1 || _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.resettoggle1 === 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.resettoggle1 = 2;
            document.getElementById("prestigeautotoggle").textContent = "Mode: TIME";
        }
        else {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.resettoggle1 = 1;
            document.getElementById("prestigeautotoggle").textContent = "Mode: AMOUNT";
        }
    }
    else if (i === 2) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.resettoggle2 === 1 || _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.resettoggle2 === 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.resettoggle2 = 2;
            document.getElementById("transcendautotoggle").textContent = "Mode: TIME";
        }
        else {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.resettoggle2 = 1;
            document.getElementById("transcendautotoggle").textContent = "Mode: AMOUNT";
        }
    }
    else if (i === 3) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.resettoggle3 === 1 || _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.resettoggle3 === 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.resettoggle3 = 2;
            document.getElementById("reincarnateautotoggle").textContent = "Mode: TIME";
        }
        else {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.resettoggle3 = 1;
            document.getElementById("reincarnateautotoggle").textContent = "Mode: AMOUNT";
        }
    }
    else if (i === 4) {
    }
};
const toggleautobuytesseract = () => {
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tesseractAutoBuyerToggle === 1 || _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tesseractAutoBuyerToggle === 0) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tesseractAutoBuyerToggle = 2;
        document.getElementById("tesseractautobuytoggle").textContent = "Auto Buy: OFF";
        document.getElementById("tesseractautobuytoggle").style.border = "2px solid red";
    }
    else {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.tesseractAutoBuyerToggle = 1;
        document.getElementById("tesseractautobuytoggle").textContent = "Auto Buy: ON";
        document.getElementById("tesseractautobuytoggle").style.border = "2px solid green";
    }
};
const toggleauto = () => {
    const autos = document.getElementsByClassName("auto");
    for (const auto of Array.from(autos)) {
        const format = auto.getAttribute("format") || 'Auto [$]';
        const toggleId = auto.getAttribute("toggleId");
        if (toggleId === undefined || toggleId === null) {
            continue;
        }
        const finishedString = format.replace('$', _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.toggles[+toggleId] ? "ON" : "OFF");
        auto.textContent = finishedString;
        auto.style.border = "2px solid " + (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.toggles[+toggleId] ? "green" : "red");
    }
};
const toggleResearchBuy = () => {
    if (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.maxbuyresearch) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.maxbuyresearch = false;
        document.getElementById("toggleresearchbuy").textContent = "Upgrade: 1 Level";
    }
    else {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.maxbuyresearch = true;
        document.getElementById("toggleresearchbuy").textContent = "Upgrade: MAX [if possible]";
    }
};
const toggleAutoResearch = () => {
    const el = document.getElementById("toggleautoresearch");
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoResearchToggle) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoResearchToggle = false;
        el.textContent = "Automatic: OFF";
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoResearch = 0;
    }
    else {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoResearchToggle = true;
        el.textContent = "Automatic: ON";
    }
    if (!_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoResearchToggle) {
        for (let i = 1; i <= (0,_Research__WEBPACK_IMPORTED_MODULE_9__.maxRoombaResearchIndex)(_Synergism__WEBPACK_IMPORTED_MODULE_1__.player); i++) {
            const l = document.getElementById("res" + i);
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.researches[i] === 0) {
                l.style.backgroundColor = "black";
            }
            if (0 < _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.researches[i] && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.researches[i] < _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.researchMaxLevels[i]) {
                l.style.backgroundColor = "purple";
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.researches[i] === _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.researchMaxLevels[i]) {
                l.style.backgroundColor = "green";
            }
        }
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoResearchToggle && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.cubeUpgrades[9] === 1) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoResearch = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.researchOrderByCost[_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.roombaResearchIndex];
        const doc = document.getElementById("res" + _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoResearch);
        if (doc)
            doc.style.backgroundColor = "orange";
    }
};
const toggleAutoSacrifice = (index) => {
    const el = document.getElementById("toggleautosacrifice");
    if (index === 0) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoSacrificeToggle) {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoSacrificeToggle = false;
            el.textContent = "Auto Runes: OFF";
            document.getElementById("toggleautosacrifice").style.border = "2px solid red";
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoSacrifice = 0;
        }
        else {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoSacrificeToggle = true;
            el.textContent = "Auto Runes: ON";
            document.getElementById("toggleautosacrifice").style.border = "2px solid green";
        }
    }
    else if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoSacrificeToggle && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.shopUpgrades.offeringAutoLevel > 0.5) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoSacrifice = index;
    }
    for (let i = 1; i <= 5; i++) {
        document.getElementById("rune" + i).style.backgroundColor = _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoSacrifice === i ? "orange" : "#171717";
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_5__.calculateRuneLevels)();
};
const toggleBuildingScreen = (input) => {
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.buildingSubTab = input;
    const screen = {
        "coin": {
            screen: "coinBuildings",
            button: "switchToCoinBuilding",
            subtabNumber: 0
        },
        "diamond": {
            screen: "prestige",
            button: "switchToDiamondBuilding",
            subtabNumber: 1
        },
        "mythos": {
            screen: "transcension",
            button: "switchToMythosBuilding",
            subtabNumber: 2
        },
        "particle": {
            screen: "reincarnation",
            button: "switchToParticleBuilding",
            subtabNumber: 3
        },
        "tesseract": {
            screen: "ascension",
            button: "switchToTesseractBuilding",
            subtabNumber: 4
        }
    };
    for (const key in screen) {
        document.getElementById(screen[key].screen).style.display = "none";
        document.getElementById(screen[key].button).style.backgroundColor = "#171717";
    }
    document.getElementById(screen[_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.buildingSubTab].screen).style.display = "block";
    document.getElementById(screen[_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.buildingSubTab].button).style.backgroundColor = "crimson";
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.subtabNumber = screen[_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.buildingSubTab].subtabNumber;
};
const toggleRuneScreen = (index) => {
    const screens = ['runes', 'talismans', 'blessings', 'spirits'];
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runescreen = screens[index - 1];
    for (let i = 1; i <= 4; i++) {
        const a = document.getElementById("toggleRuneSubTab" + i);
        const b = document.getElementById("runeContainer" + i);
        if (i === index) {
            a.style.border = "2px solid gold";
            a.style.backgroundColor = "crimson";
            b.style.display = "block";
        }
        else {
            a.style.border = "2px solid silver";
            a.style.backgroundColor = "#171717";
            b.style.display = "none";
        }
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.subtabNumber = index - 1;
};
const toggleautofortify = () => {
    const el = document.getElementById("toggleautofortify");
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoFortifyToggle === false && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.researches[130] == 1) {
        el.textContent = "Auto Fortify: ON";
        el.style.border = "2px solid green";
    }
    else {
        el.textContent = "Auto Fortify: OFF";
        el.style.border = "2px solid red";
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoFortifyToggle = !_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoFortifyToggle;
};
const toggleautoenhance = () => {
    const el = document.getElementById("toggleautoenhance");
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoEnhanceToggle === false && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.researches[135] == 1) {
        el.textContent = "Auto Enhance: ON";
        el.style.border = "2px solid green";
    }
    else {
        el.textContent = "Auto Enhance: OFF";
        el.style.border = "2px solid red";
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoEnhanceToggle = !_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoEnhanceToggle;
};
function setActiveSettingScreen(subtab, clickedButton) {
    const subtabEl = document.getElementById(subtab);
    if (subtabEl.classList.contains("subtabActive")) {
        return;
    }
    const switcherEl = clickedButton.parentNode;
    switcherEl.querySelectorAll(".buttonActive").forEach(b => b.classList.remove("buttonActive"));
    clickedButton.classList.add("buttonActive");
    subtabEl.parentNode.querySelectorAll(".subtabActive").forEach(subtab => subtab.classList.remove("subtabActive"));
    subtabEl.classList.add("subtabActive");
    if (subtab === "statisticsSubTab") {
        const id = (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.interval)(refreshStats, 1000);
        function refreshStats() {
            if (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.currentTab !== "settings") {
                (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.clearInt)(id);
            }
            (0,_Statistics__WEBPACK_IMPORTED_MODULE_10__.loadStatisticsAccelerator)();
            (0,_Statistics__WEBPACK_IMPORTED_MODULE_10__.loadStatisticsMultiplier)();
            (0,_Statistics__WEBPACK_IMPORTED_MODULE_10__.loadStatisticsOfferingMultipliers)();
            (0,_Statistics__WEBPACK_IMPORTED_MODULE_10__.loadStatisticsCubeMultipliers)();
            if (!subtabEl.classList.contains("subtabActive"))
                (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.clearInt)(id);
        }
        refreshStats();
    }
}
const toggleShopConfirmation = () => {
    const el = document.getElementById("toggleConfirmShop");
    el.textContent = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.shopConfirmation
        ? "Shop Confirmations: OFF"
        : "Shop Confirmations: ON";
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.shopConfirmation = !_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.shopConfirmation;
};
const toggleAntMaxBuy = () => {
    const el = document.getElementById("toggleAntMax");
    el.textContent = _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.antMax
        ? "Buy Max: OFF"
        : "Buy Max: ON";
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.antMax = !_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.antMax;
};
const toggleAntAutoSacrifice = (mode = 0) => {
    if (mode === 0) {
        const el = document.getElementById("toggleAutoSacrificeAnt");
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoAntSacrifice) {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoAntSacrifice = false;
            el.textContent = "Auto Sacrifice: OFF";
        }
        else {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoAntSacrifice = true;
            el.textContent = "Auto Sacrifice: ON";
        }
    }
    else if (mode === 1) {
        const el = document.getElementById("autoSacrificeAntMode");
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoAntSacrificeMode === 1 || _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoAntSacrificeMode === 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoAntSacrificeMode = 2;
            el.textContent = "Mode: Real time";
        }
        else {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoAntSacrificeMode = 1;
            el.textContent = "Mode: In-game time";
        }
    }
};
const toggleMaxBuyCube = () => {
    const el = document.getElementById("toggleCubeBuy");
    if (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.buyMaxCubeUpgrades) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.buyMaxCubeUpgrades = false;
        el.textContent = "Upgrade: 1 Level wow";
    }
    else {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.buyMaxCubeUpgrades = true;
        el.textContent = "Upgrade: MAX [if possible wow]";
    }
};
const toggleCubeSubTab = (i) => {
    const numSubTabs = subTabsInMainTab(8).subTabList.length;
    for (let j = 1; j <= numSubTabs; j++) {
        const cubeTab = document.getElementById(`cubeTab${j}`);
        if (cubeTab.style.display === "block" && j !== i) {
            cubeTab.style.display = "none";
        }
        if (cubeTab.style.display === "none" && j === i) {
            cubeTab.style.display = "block";
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.subtabNumber = j - 1;
        }
        document.getElementById("switchCubeSubTab" + j).style.backgroundColor = i === j ? "crimson" : "#171717";
    }
    (0,_UpdateVisuals__WEBPACK_IMPORTED_MODULE_4__.visualUpdateCubes)();
};
const updateAutoChallenge = (i) => {
    switch (i) {
        case 1:
            const t = parseFloat(document.getElementById('startAutoChallengeTimerInput').value) || 0;
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeTimer.start = Math.max(t, 0);
            document.getElementById("startTimerValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeTimer.start, 2, true) + "s";
            return;
        case 2:
            const u = parseFloat(document.getElementById('exitAutoChallengeTimerInput').value) || 0;
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeTimer.exit = Math.max(u, 0);
            document.getElementById("exitTimerValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeTimer.exit, 2, true) + "s";
            return;
        case 3:
            const v = parseFloat(document.getElementById('enterAutoChallengeTimerInput').value) || 0;
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeTimer.enter = Math.max(v, 0);
            document.getElementById("enterTimerValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeTimer.enter, 2, true) + "s";
            return;
    }
};
const toggleAutoChallengesIgnore = (i) => {
    const el = document.getElementById("toggleAutoChallengeIgnore");
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeToggles[i]) {
        el.style.border = "2px solid red";
        el.textContent = "Automatically Run Chal." + i + " [OFF]";
    }
    else {
        el.style.border = "2px solid green";
        el.textContent = "Automatically Run Chal." + i + " [ON]";
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeToggles[i] = !_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeToggles[i];
};
const toggleAutoChallengeRun = () => {
    const el = document.getElementById('toggleAutoChallengeStart');
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeRunning) {
        el.style.border = "2px solid red";
        el.textContent = "Auto Challenge Sweep [OFF]";
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeIndex = 1;
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.autoChallengeTimerIncrement = 0;
    }
    else {
        el.style.border = "2px solid gold";
        el.textContent = "Auto Challenge Sweep [ON]";
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeRunning = !_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoChallengeRunning;
};
const toggleAutoChallengeTextColors = (i) => {
    const a = document.getElementById("startAutoChallengeTimer");
    const b = document.getElementById("exitAutoChallengeTimer");
    const c = document.getElementById("enterAutoChallengeTimer");
    a.style.color = i === 1 ? 'gold' : 'white';
    b.style.color = i === 2 ? 'gold' : 'white';
    c.style.color = i === 3 ? 'gold' : 'white';
};
const toggleAutoAscend = () => {
    const a = document.getElementById("ascensionAutoEnable");
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoAscend) {
        a.style.border = "2px solid red";
        a.textContent = "Auto Ascend [OFF]";
    }
    else {
        a.style.border = "2px solid green";
        a.textContent = "Auto Ascend [ON]";
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoAscend = !_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoAscend;
};
const updateRuneBlessingBuyAmount = (i) => {
    switch (i) {
        case 1:
            const t = Math.floor(parseFloat(document.getElementById('buyRuneBlessingInput').value)) || 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.runeBlessingBuyAmount = Math.max(t, 1);
            document.getElementById('buyRuneBlessingToggleValue').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.runeBlessingBuyAmount, 0, true);
            return;
        case 2:
            const u = Math.floor(parseFloat(document.getElementById('buyRuneSpiritInput').value)) || 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.runeSpiritBuyAmount = Math.max(u, 1);
            document.getElementById('buyRuneSpiritToggleValue').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.runeSpiritBuyAmount, 0, true);
            return;
    }
};
const toggleAutoTesseracts = (i) => {
    const el = document.getElementById('tesseractAutoToggle' + i);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoTesseracts[i]) {
        el.textContent = "Auto [OFF]";
        el.style.border = "2px solid red";
    }
    else {
        el.textContent = "Auto [ON]";
        el.style.border = "2px solid green";
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoTesseracts[i] = !_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.autoTesseracts[i];
};
const toggleCorruptionLevel = (index, value) => {
    const current = _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.prototypeCorruptions[index];
    const maxCorruption = 12;
    if (value > 0 && current < maxCorruption && 0 < index && index <= 9) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.prototypeCorruptions[index] += Math.min(maxCorruption - current, value);
    }
    if (value < 0 && current > 0 && 0 < index && index <= 9) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.prototypeCorruptions[index] -= Math.min(current, -value);
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.prototypeCorruptions[index] = Math.min(maxCorruption, Math.max(0, _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.prototypeCorruptions[index]));
    if (value === 999 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.ascension !== 15) {
        for (let i = 0; i <= 9; i++) {
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.usedCorruptions[i] = 0;
            _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.prototypeCorruptions[i] = 0;
            if (i > 0)
                (0,_Corruptions__WEBPACK_IMPORTED_MODULE_11__.corruptionDisplay)(i);
        }
        (0,_Corruptions__WEBPACK_IMPORTED_MODULE_11__.corruptionDisplay)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.corruptionTrigger);
        document.getElementById("corruptionCleanseConfirm").style.visibility = "hidden";
        if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.currentChallenge.ascension === 15) {
            (0,_Synergism__WEBPACK_IMPORTED_MODULE_1__.resetCheck)('ascensionChallenge', false, true);
        }
    }
    (0,_Corruptions__WEBPACK_IMPORTED_MODULE_11__.corruptionDisplay)(index);
    (0,_Corruptions__WEBPACK_IMPORTED_MODULE_11__.corruptionLoadoutTableUpdate)();
};
const toggleCorruptionLoadoutsStats = (stats) => {
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.corruptionShowStats = stats;
    (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_0__.showCorruptionStatsLoadouts)();
};
const toggleAscStatPerSecond = (id) => {
    const el = document.getElementById(`unit${id}`);
    if (!el) {
        console.log(id, 'platonic needs to fix');
        return;
    }
    el.textContent = _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.ascStatToggles[id] ? '/s' : '';
    _Synergism__WEBPACK_IMPORTED_MODULE_1__.player.ascStatToggles[id] = !_Synergism__WEBPACK_IMPORTED_MODULE_1__.player.ascStatToggles[id];
};


/***/ }),
/* 8 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "revealStuff": () => /* binding */ revealStuff,
/* harmony export */   "hideStuff": () => /* binding */ hideStuff,
/* harmony export */   "htmlInserts": () => /* binding */ htmlInserts,
/* harmony export */   "buttoncolorchange": () => /* binding */ buttoncolorchange,
/* harmony export */   "updateChallengeDisplay": () => /* binding */ updateChallengeDisplay,
/* harmony export */   "updateChallengeLevel": () => /* binding */ updateChallengeLevel,
/* harmony export */   "updateAchievementBG": () => /* binding */ updateAchievementBG,
/* harmony export */   "CSSAscend": () => /* binding */ CSSAscend,
/* harmony export */   "CSSRuneBlessings": () => /* binding */ CSSRuneBlessings,
/* harmony export */   "showCorruptionStatsLoadouts": () => /* binding */ showCorruptionStatsLoadouts,
/* harmony export */   "updateAscensionStats": () => /* binding */ updateAscensionStats
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11);
/* harmony import */ var _Runes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(15);
/* harmony import */ var _UpdateVisuals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(24);







const revealStuff = () => {
    const example = document.getElementsByClassName("coinunlock1");
    for (let i = 0; i < example.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.coinone ? example[i].style.display = "block" : example[i].style.display = "none";
    }
    const example2 = document.getElementsByClassName("coinunlock2");
    for (let i = 0; i < example2.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.cointwo ? example2[i].style.display = "block" : example2[i].style.display = "none";
    }
    const example3 = document.getElementsByClassName("coinunlock3");
    for (let i = 0; i < example3.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.cointhree ? example3[i].style.display = "block" : example3[i].style.display = "none";
    }
    const example4 = document.getElementsByClassName("coinunlock4");
    for (let i = 0; i < example4.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.coinfour ? example4[i].style.display = "block" : example4[i].style.display = "none";
    }
    const example5 = document.getElementsByClassName("prestigeunlock");
    for (let i = 0; i < example5.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.prestige ? example5[i].style.display = "block" : example5[i].style.display = "none";
    }
    const example6 = document.getElementsByClassName("generationunlock");
    for (let i = 0; i < example6.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.generation ? example6[i].style.display = "block" : example6[i].style.display = "none";
    }
    const example7 = document.getElementsByClassName("transcendunlock");
    for (let i = 0; i < example7.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.transcend ? example7[i].style.display = "block" : example7[i].style.display = "none";
    }
    const example8 = document.getElementsByClassName("reincarnationunlock");
    for (let i = 0; i < example8.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.reincarnate ? example8[i].style.display = "block" : example8[i].style.display = "none";
    }
    const example9 = document.getElementsByClassName("auto");
    for (let i = 0; i < example9.length; i++) {
        example9[i].style.display = "none";
    }
    const example10 = document.getElementsByClassName("reinrow1");
    for (let i = 0; i < example10.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[47] === 1 ? example10[i].style.display = "block" : example10[i].style.display = "none";
    }
    const example11 = document.getElementsByClassName("reinrow2");
    for (let i = 0; i < example11.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[48] === 1 ? example11[i].style.display = "block" : example11[i].style.display = "none";
    }
    const example12 = document.getElementsByClassName("reinrow3");
    for (let i = 0; i < example12.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[49] === 1 ? example12[i].style.display = "block" : example12[i].style.display = "none";
    }
    const example13 = document.getElementsByClassName("reinrow4");
    for (let i = 0; i < example13.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[50] === 1 ? example13[i].style.display = "block" : example13[i].style.display = "none";
    }
    const example14 = document.getElementsByClassName("chal6");
    for (let i = 0; i < example14.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[113] === 1 ? example14[i].style.display = "block" : example14[i].style.display = "none";
    }
    const example15 = document.getElementsByClassName("chal7");
    for (let i = 0; i < example15.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[120] === 1 ? example15[i].style.display = "block" : example15[i].style.display = "none";
    }
    const example16 = document.getElementsByClassName("chal7x10");
    for (let i = 0; i < example16.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[124] === 1 ? example16[i].style.display = "block" : example16[i].style.display = "none";
    }
    const example17 = document.getElementsByClassName("chal8");
    for (let i = 0; i < example17.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[127] === 1 ? example17[i].style.display = "block" : example17[i].style.display = "none";
    }
    const example18 = document.getElementsByClassName("chal9");
    for (let i = 0; i < example18.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[134] === 1 ? example18[i].style.display = "block" : example18[i].style.display = "none";
    }
    const example19 = document.getElementsByClassName("chal9x1");
    for (let i = 0; i < example19.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[9] > 0 ? example19[i].style.display = "block" : example19[i].style.display = "none";
    }
    const example20 = document.getElementsByClassName("chal10");
    for (let i = 0; i < example20.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[141] === 1 ? example20[i].style.display = "block" : example20[i].style.display = "none";
    }
    const example21 = document.getElementsByClassName("ascendunlock");
    for (let i = 0; i < example21.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount > 0 ? example21[i].style.display = "block" : example21[i].style.display = "none";
    }
    const example22 = document.getElementsByClassName("chal11");
    for (let i = 0; i < example22.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[11] > 0 ? example22[i].style.display = "block" : example22[i].style.display = "none";
    }
    const example23 = document.getElementsByClassName("chal12");
    for (let i = 0; i < example23.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[12] > 0 ? example23[i].style.display = "block" : example23[i].style.display = "none";
    }
    const example24 = document.getElementsByClassName("chal13");
    for (let i = 0; i < example24.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[13] > 0 ? example24[i].style.display = "block" : example24[i].style.display = "none";
    }
    const example25 = document.getElementsByClassName("chal14");
    for (let i = 0; i < example25.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[14] > 0 ? example25[i].style.display = "block" : example25[i].style.display = "none";
    }
    const example26 = document.getElementsByClassName("ascendunlockib");
    for (let i = 0; i < example26.length; i++) {
        example26[i].style.display = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount > 0 ? "inline-block" : "none";
    }
    const example27 = document.getElementsByClassName("prestigeunlockib");
    for (let i = 0; i < example27.length; i++) {
        example27[i].style.display = +_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.prestige > 0 ? "inline-block" : "none";
    }
    const example28 = document.getElementsByClassName("research150");
    for (let i = 0; i < example28.length; i++) {
        example28[i].style.display = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[150] > 0 ? "block" : "none";
    }
    const example29 = document.getElementsByClassName("cubeUpgrade10");
    for (let i = 0; i < example29.length; i++) {
        example29[i].style.display = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[10] > 0 ? "flex" : "none";
    }
    const example30 = document.getElementsByClassName("cubeUpgrade19");
    for (let i = 0; i < example30.length; i++) {
        example30[i].style.display = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[19] > 0 ? "block" : "none";
    }
    const example31 = document.getElementsByClassName("sacrificeAnts");
    for (const ex of Array.from(example31)) {
        ex.style.display = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[173] === 1 ? "block" : "none";
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[89] === 1 ?
        document.getElementById("transcendautomation").style.display = "block" :
        document.getElementById("transcendautomation").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[38] === 1 ?
        (document.getElementById("rune2area").style.display = "flex", document.getElementById("runeshowpower2").style.display = "flex") :
        (document.getElementById("rune2area").style.display = "none", document.getElementById("runeshowpower2").style.display = "none");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[43] === 1 ?
        document.getElementById("prestigeautomation").style.display = "block" :
        document.getElementById("prestigeautomation").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[44] === 1 ?
        (document.getElementById("rune3area").style.display = "flex", document.getElementById("runeshowpower3").style.display = "flex") :
        (document.getElementById("rune3area").style.display = "none", document.getElementById("runeshowpower3").style.display = "none");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[102] === 1 ?
        (document.getElementById("rune4area").style.display = "flex", document.getElementById("runeshowpower4").style.display = "flex") :
        (document.getElementById("rune4area").style.display = "none", document.getElementById("runeshowpower4").style.display = "none");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[119] === 1 ?
        document.getElementById("talisman1area").style.display = "block" :
        document.getElementById("talisman1area").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[126] === 1 ?
        document.getElementById("talisman2area").style.display = "block" :
        document.getElementById("talisman2area").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[133] === 1 ?
        document.getElementById("talisman3area").style.display = "block" :
        document.getElementById("talisman3area").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[134] === 1 ?
        (document.getElementById("toggleRuneSubTab2").style.display = "block", document.getElementById("toggleRuneSubTab3").style.display = "block") :
        (document.getElementById("toggleRuneSubTab2").style.display = "none", document.getElementById("toggleRuneSubTab3").style.display = "none");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[140] === 1 ?
        document.getElementById("talisman4area").style.display = "block" :
        document.getElementById("talisman4area").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[147] === 1 ?
        document.getElementById("talisman5area").style.display = "block" :
        document.getElementById("talisman5area").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[173] === 1 ?
        document.getElementById("sacrificeAnts").style.display = "block" :
        document.getElementById("sacrificeAnts").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[39] > 0 ?
        document.getElementById("reincarnationCrystalInfo").style.display = "block" :
        document.getElementById("reincarnationCrystalInfo").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[40] > 0 ?
        document.getElementById("reincarnationMythosInfo").style.display = "block" :
        document.getElementById("reincarnationMythosInfo").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[46] > 0 ?
        document.getElementById("reincarnateautomation").style.display = "block" :
        document.getElementById("reincarnateautomation").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[82] > 0 ?
        (document.getElementById("rune5area").style.display = "flex", document.getElementById("runeshowpower5").style.display = "flex") :
        (document.getElementById("rune5area").style.display = "none", document.getElementById("runeshowpower5").style.display = "none");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[130] > 0 ?
        document.getElementById("toggleautofortify").style.display = "block" :
        document.getElementById("toggleautofortify").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[135] > 0 ?
        document.getElementById("toggleautoenhance").style.display = "block" :
        document.getElementById("toggleautoenhance").style.display = "none";
    for (let z = 1; z <= 5; z++) {
        (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[190] > 0) ?
            document.getElementById("tesseractAutoToggle" + z).style.display = "block" :
            document.getElementById("tesseractAutoToggle" + z).style.display = "none";
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[190] > 0 ?
        document.getElementById("tesseractautobuytoggle").style.display = "block" :
        document.getElementById("tesseractautobuytoggle").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[190] > 0 ?
        document.getElementById("tesseractAmount").style.display = "block" :
        document.getElementById("tesseractAmount").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[190] > 0 ?
        document.getElementById("autotessbuyeramount").style.display = "block" :
        document.getElementById("autotessbuyeramount").style.display = "none";
    (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[12 - 1] > 0 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount > 0) ?
        document.getElementById("talisman6area").style.display = "block" :
        document.getElementById("talisman6area").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel > 0 ?
        document.getElementById("toggleautosacrifice").style.display = "block" :
        document.getElementById("toggleautosacrifice").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumAutoLevel > 0 ?
        document.getElementById("toggleautoresearch").style.display = "block" :
        document.getElementById("toggleautoresearch").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.talismanBought ?
        document.getElementById("talisman7area").style.display = "block" :
        document.getElementById("talisman7area").style.display = "none";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[8] > 0 ?
        document.getElementById('particleAutoUpgrade').style.display = "block" :
        document.getElementById('particleAutoUpgrade').style.display = "none";
    document.getElementById("ascensionStats").style.visibility = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[197] > 0 ? "visible" : "hidden";
    document.getElementById("ascHyperStats").style.display = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[13] > 0 ? "" : "none";
    document.getElementById("ascPlatonicStats").style.display = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[14] > 0 ? "" : "none";
    const e = document.getElementsByClassName("auto");
    const automationUnlocks = {
        0: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[81] === 1,
        1: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[82] === 1,
        2: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[83] === 1,
        3: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[84] === 1,
        4: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[85] === 1,
        5: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[86] === 1,
        6: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[87] === 1,
        7: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[88] === 1,
        8: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[78] === 1,
        9: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[85] === 1,
        10: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[92] === 1,
        11: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[99] === 1,
        12: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[106] === 1,
        13: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[43] === 1,
        14: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[94] === 1,
        15: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[95] === 1,
        16: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[96] === 1,
        17: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[97] === 1,
        18: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[98] === 1,
        19: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[89] === 1,
        20: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[7] === 1,
        21: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[7] === 1,
        22: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[7] === 1,
        23: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[7] === 1,
        24: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[7] === 1,
        25: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[46] === 1,
        26: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[91] === 1,
        27: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[92] === 1,
        28: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[99] === 1,
        29: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[90] === 1,
        30: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.prestige,
        31: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeCount > 0.5 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationCount > 0.5,
        32: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendCount > 0.5 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationCount > 0.5,
        33: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationCount > 0.5,
        34: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount > 0,
        35: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[173] > 0
    };
    for (let i = 0; i < e.length; i++) {
        if (automationUnlocks[i]) {
            e[i].style.display = "block";
        }
    }
};
const hideStuff = () => {
    document.getElementById("buildings").style.display = "none";
    document.getElementById("buildingstab").style.backgroundColor = "#171717";
    document.getElementById("upgrades").style.display = "none";
    document.getElementById("upgradestab").style.backgroundColor = "#171717";
    document.getElementById("settings").style.display = "none";
    const settingsTab = document.getElementById("settingstab");
    if (settingsTab.getAttribute('full') === '0') {
        settingsTab.style.backgroundColor = "#171717";
        settingsTab.style.color = "white";
        settingsTab.style.border = '1px solid white';
    }
    document.getElementById("statistics").style.display = "none";
    document.getElementById("achievementstab").style.backgroundColor = "#171717";
    document.getElementById("achievementstab").style.color = "white";
    document.getElementById("runes").style.display = "none";
    document.getElementById("runestab").style.backgroundColor = "#171717";
    document.getElementById("challenges").style.display = "none";
    document.getElementById("challengetab").style.backgroundColor = "#171717";
    document.getElementById("research").style.display = "none";
    document.getElementById("researchtab").style.backgroundColor = "#171717";
    document.getElementById("shop").style.display = "none";
    document.getElementById("shoptab").style.backgroundColor = "purple";
    document.getElementById("ants").style.display = "none";
    document.getElementById("anttab").style.backgroundColor = "#171717";
    document.getElementById("cubetab").style.backgroundColor = "#171717";
    document.getElementById("traitstab").style.backgroundColor = "#171717";
    document.getElementById("cubes").style.display = "none";
    document.getElementById("traits").style.display = "none";
    document.getElementById("activaterune2").style.display = "none";
    document.getElementById("activaterune3").style.display = "none";
    document.getElementById("activaterune4").style.display = "none";
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "buildings") {
        document.getElementById("buildingstab").style.backgroundColor = "orange";
        document.getElementById("buildings").style.display = "block";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "upgrades") {
        document.getElementById("upgrades").style.display = "block";
        document.getElementById("upgradestab").style.backgroundColor = "orange";
        document.getElementById("upgradedescription").textContent = "Hover over an upgrade to view details!";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "settings") {
        document.getElementById("settings").style.display = "block";
        if (settingsTab.getAttribute('full') === '0') {
            settingsTab.style.backgroundColor = "white";
            settingsTab.style.color = "black";
            settingsTab.style.border = '1px solid white';
        }
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "achievements") {
        document.getElementById("statistics").style.display = "block";
        document.getElementById("achievementstab").style.backgroundColor = "white";
        document.getElementById("achievementstab").style.color = "black";
        document.getElementById("achievementprogress").textContent = "Achievement Points: " + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievementPoints + "/" + _Achievements__WEBPACK_IMPORTED_MODULE_4__.totalachievementpoints + " [" + (100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievementPoints / _Achievements__WEBPACK_IMPORTED_MODULE_4__.totalachievementpoints).toPrecision(4) + "%]";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "runes") {
        document.getElementById("runes").style.display = "block";
        document.getElementById("runestab").style.backgroundColor = "blue";
        document.getElementById("runeshowlevelup").textContent = "Hey, hover over a rune icon to get details on what each one does and what benefits they're giving you!";
        document.getElementById("researchrunebonus").textContent = "Thanks to researches, your effective levels are increased by " + (100 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.effectiveLevelMult - 100).toPrecision(4) + "%";
        (0,_Runes__WEBPACK_IMPORTED_MODULE_5__.displayRuneInformation)(1, false);
        (0,_Runes__WEBPACK_IMPORTED_MODULE_5__.displayRuneInformation)(2, false);
        (0,_Runes__WEBPACK_IMPORTED_MODULE_5__.displayRuneInformation)(3, false);
        (0,_Runes__WEBPACK_IMPORTED_MODULE_5__.displayRuneInformation)(4, false);
        (0,_Runes__WEBPACK_IMPORTED_MODULE_5__.displayRuneInformation)(5, false);
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "challenges") {
        document.getElementById("challenges").style.display = "block";
        document.getElementById("challengetab").style.backgroundColor = "purple";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "researches") {
        document.getElementById("research").style.display = "block";
        document.getElementById("researchtab").style.backgroundColor = "green";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "shop") {
        document.getElementById("shop").style.display = "block";
        document.getElementById("shoptab").style.backgroundColor = "limegreen";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "ants") {
        document.getElementById("ants").style.display = "block";
        document.getElementById("anttab").style.backgroundColor = "brown";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "cubes") {
        document.getElementById("cubes").style.display = "block";
        document.getElementById("cubetab").style.backgroundColor = "white";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "traits") {
        document.getElementById("traits").style.display = "flex";
        document.getElementById("traitstab").style.backgroundColor = "white";
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[38] > 0.5) {
        document.getElementById("activaterune2").style.display = "block";
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[44] > 0.5) {
        document.getElementById("activaterune3").style.display = "block";
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[102] > 0.5) {
        document.getElementById("activaterune4").style.display = "block";
    }
};
const visualTab = {
    buildings: _UpdateVisuals__WEBPACK_IMPORTED_MODULE_6__.visualUpdateBuildings,
    upgrades: _UpdateVisuals__WEBPACK_IMPORTED_MODULE_6__.visualUpdateUpgrades,
    achievements: _UpdateVisuals__WEBPACK_IMPORTED_MODULE_6__.visualUpdateAchievements,
    runes: _UpdateVisuals__WEBPACK_IMPORTED_MODULE_6__.visualUpdateRunes,
    challenges: _UpdateVisuals__WEBPACK_IMPORTED_MODULE_6__.visualUpdateChallenges,
    research: _UpdateVisuals__WEBPACK_IMPORTED_MODULE_6__.visualUpdateResearch,
    settings: _UpdateVisuals__WEBPACK_IMPORTED_MODULE_6__.visualUpdateSettings,
    shop: _UpdateVisuals__WEBPACK_IMPORTED_MODULE_6__.visualUpdateShop,
    ants: _UpdateVisuals__WEBPACK_IMPORTED_MODULE_6__.visualUpdateAnts,
    cubes: _UpdateVisuals__WEBPACK_IMPORTED_MODULE_6__.visualUpdateCubes,
    traits: _UpdateVisuals__WEBPACK_IMPORTED_MODULE_6__.visualUpdateCorruptions
};
const htmlInserts = () => {
    var _a;
    document.getElementById("coinDisplay").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins);
    document.getElementById("offeringDisplay").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards);
    document.getElementById("diamondDisplay").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints);
    document.getElementById("mythosDisplay").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendPoints);
    document.getElementById("mythosshardDisplay").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendShards);
    document.getElementById("particlesDisplay").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints);
    document.getElementById("quarkDisplay").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds);
    document.getElementById("obtainiumDisplay").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints);
    updateAscensionStats();
    (_a = visualTab[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab]) === null || _a === void 0 ? void 0 : _a.call(visualTab);
};
const buttoncolorchange = () => {
    (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[15] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[43] === 1) ?
        document.getElementById('prestigebtn').style.backgroundColor = "green" :
        document.getElementById('prestigebtn').style.backgroundColor = "#171717";
    (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[21] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[89] > 0.5 && (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension === 0)) ?
        document.getElementById('transcendbtn').style.backgroundColor = "green" :
        document.getElementById('transcendbtn').style.backgroundColor = "#171717";
    (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[27] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[46] > 0.5 && (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension === 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation === 0)) ?
        document.getElementById('reincarnatebtn').style.backgroundColor = "green" :
        document.getElementById('reincarnatebtn').style.backgroundColor = "#171717";
    (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[8] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[88] > 0.5) ?
        document.getElementById('acceleratorboostbtn').style.backgroundColor = "green" :
        document.getElementById('acceleratorboostbtn').style.backgroundColor = "#171717";
    (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension === 0) ?
        document.getElementById('challengebtn').style.backgroundColor = "#171717" :
        document.getElementById('challengebtn').style.backgroundColor = "purple";
    (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation === 0) ?
        document.getElementById('reincarnatechallengebtn').style.backgroundColor = "#171717" :
        document.getElementById('reincarnatechallengebtn').style.backgroundColor = "purple";
    (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 0) ?
        document.getElementById('ascendChallengeBtn').style.backgroundColor = "#171717" :
        document.getElementById('ascendChallengeBtn').style.backgroundColor = "purple";
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "buildings" && _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.buildingSubTab === "coin") {
        const a = document.getElementById("buycoin1");
        const b = document.getElementById("buycoin2");
        const c = document.getElementById("buycoin3");
        const d = document.getElementById("buycoin4");
        const e = document.getElementById("buycoin5");
        const f = document.getElementById("buyaccelerator");
        const g = document.getElementById("buymultiplier");
        const h = document.getElementById("buyacceleratorboost");
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[1] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[81] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstCostCoin)) ?
            a.style.backgroundColor = "#555555" :
            a.style.backgroundColor = "#171717";
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[2] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[82] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondCostCoin)) ?
            b.style.backgroundColor = "#555555" :
            b.style.backgroundColor = "#171717";
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[3] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[83] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdCostCoin)) ?
            c.style.backgroundColor = "#555555" :
            c.style.backgroundColor = "#171717";
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[4] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[84] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthCostCoin)) ?
            d.style.backgroundColor = "#555555" :
            d.style.backgroundColor = "#171717";
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[5] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[85] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthCostCoin)) ?
            e.style.backgroundColor = "#555555" :
            e.style.backgroundColor = "#171717";
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[6] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[86] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorCost)) ?
            f.style.backgroundColor = "#555555" :
            f.style.backgroundColor = "#171717";
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[7] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[87] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierCost)) ?
            g.style.backgroundColor = "#555555" :
            g.style.backgroundColor = "#171717";
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[8] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[88] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostCost)) ?
            h.style.backgroundColor = "#555555" :
            h.style.backgroundColor = "#171717";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "buildings" && _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.buildingSubTab === "diamond") {
        const a = document.getElementById("buydiamond1");
        const b = document.getElementById("buydiamond2");
        const c = document.getElementById("buydiamond3");
        const d = document.getElementById("buydiamond4");
        const e = document.getElementById("buydiamond5");
        const f = document.getElementById("buycrystalupgrade1");
        const g = document.getElementById("buycrystalupgrade2");
        const h = document.getElementById("buycrystalupgrade3");
        const i = document.getElementById("buycrystalupgrade4");
        const j = document.getElementById("buycrystalupgrade5");
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[10] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[78] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstCostDiamonds)) ? a.style.backgroundColor = "#555555" : a.style.backgroundColor = "#171717";
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[11] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[85] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondCostDiamonds)) ? b.style.backgroundColor = "#555555" : b.style.backgroundColor = "#171717";
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[12] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[92] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdCostDiamonds)) ? c.style.backgroundColor = "#555555" : c.style.backgroundColor = "#171717";
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[13] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[99] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthCostDiamonds)) ? d.style.backgroundColor = "#555555" : d.style.backgroundColor = "#171717";
        ((!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[14] || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[106] === 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthCostDiamonds)) ? e.style.backgroundColor = "#555555" : e.style.backgroundColor = "#171717";
        let k = 0;
        k += Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.rune3level / 16 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.effectiveLevelMult) * 100 / 100;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[73] === 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation !== 0) {
            k += 10;
        }
        (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[79] < 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeShards.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.crystalUpgradesCost[0] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.crystalUpgradeCostIncrement[0] * Math.floor(Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgrades[0] + 0.5 - k, 2) / 2))))) ? f.style.backgroundColor = "purple" : f.style.backgroundColor = "#171717";
        (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[86] < 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeShards.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.crystalUpgradesCost[1] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.crystalUpgradeCostIncrement[1] * Math.floor(Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgrades[1] + 0.5 - k, 2) / 2))))) ? g.style.backgroundColor = "purple" : g.style.backgroundColor = "#171717";
        (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[93] < 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeShards.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.crystalUpgradesCost[2] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.crystalUpgradeCostIncrement[2] * Math.floor(Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgrades[2] + 0.5 - k, 2) / 2))))) ? h.style.backgroundColor = "purple" : h.style.backgroundColor = "#171717";
        (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[100] < 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeShards.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.crystalUpgradesCost[3] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.crystalUpgradeCostIncrement[3] * Math.floor(Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgrades[3] + 0.5 - k, 2) / 2))))) ? i.style.backgroundColor = "purple" : i.style.backgroundColor = "#171717";
        (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[107] < 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeShards.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.crystalUpgradesCost[4] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.crystalUpgradeCostIncrement[4] * Math.floor(Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgrades[4] + 0.5 - k, 2) / 2))))) ? j.style.backgroundColor = "purple" : j.style.backgroundColor = "#171717";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "runes") {
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.runescreen === "runes") {
            for (let i = 1; i <= 5; i++) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards > 0.5 ? document.getElementById("activaterune" + i).style.backgroundColor = "purple" : document.getElementById("activaterune" + i).style.backgroundColor = "#171717";
            }
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.runescreen === "talismans") {
            const a = document.getElementById("buyTalismanItem1");
            const b = document.getElementById("buyTalismanItem2");
            const c = document.getElementById("buyTalismanItem3");
            const d = document.getElementById("buyTalismanItem4");
            const e = document.getElementById("buyTalismanItem5");
            const f = document.getElementById("buyTalismanItem6");
            const g = document.getElementById("buyTalismanItem7");
            const arr = [a, b, c, d, e, f, g];
            for (let i = 0; i < arr.length; i++) {
                arr[i].style.backgroundColor = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints > _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talismanResourceObtainiumCosts[i]
                    && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards > _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talismanResourceOfferingCosts[i]) ? "purple" : "#171717";
            }
        }
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "buildings" && _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.buildingSubTab === "mythos") {
        for (let i = 1; i <= 5; i++) {
            const toggle = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[i + 15];
            const mythos = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[`${_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1]}CostMythos`];
            (!toggle || !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[93 + i]) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendPoints.gte(mythos)
                ? document.getElementById('buymythos' + i).style.backgroundColor = "#555555"
                : document.getElementById('buymythos' + i).style.backgroundColor = "#171717";
        }
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "buildings" && _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.buildingSubTab === "particle") {
        for (let i = 1; i <= 5; i++) {
            const costParticles = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'CostParticles'];
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints.gte(costParticles)
                ? document.getElementById("buyparticles" + i).style.backgroundColor = "#555555"
                : document.getElementById("buyparticles" + i).style.backgroundColor = "#171717";
        }
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "buildings" && _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.buildingSubTab === "tesseract") {
        for (let i = 1; i <= 5; i++) {
            const ascendBuilding = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player['ascendBuilding' + i]['cost'];
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowTesseracts >= ascendBuilding ?
                document.getElementById('buyTesseracts' + i).style.backgroundColor = "#555555" :
                document.getElementById('buyTesseracts' + i).style.backgroundColor = "#171717";
        }
        for (let i = 1; i <= 8; i++) {
            (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[i]).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.constUpgradeCosts[i]))) ?
                document.getElementById('buyConstantUpgrade' + i).style.backgroundColor = "green" :
                document.getElementById('buyConstantUpgrade' + i).style.backgroundColor = "#171717";
        }
        for (let i = 9; i <= 10; i++) {
            (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[i]).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.constUpgradeCosts[i])) || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[i] >= 1) ?
                document.getElementById('buyConstantUpgrade' + i).style.backgroundColor = "gold" :
                document.getElementById('buyConstantUpgrade' + i).style.backgroundColor = "#171717";
        }
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab === "ants") {
        (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstCostAnts)) ? document.getElementById("anttier1").style.backgroundColor = "white" : document.getElementById("anttier1").style.backgroundColor = "#171717";
        for (let i = 2; i <= 8; i++) {
            const costAnts = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'CostAnts'];
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints.gte(costAnts)
                ? document.getElementById("anttier" + i).style.backgroundColor = "white"
                : document.getElementById("anttier" + i).style.backgroundColor = "#171717";
        }
        for (let i = 1; i <= 12; i++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.antUpgradeCostIncreases[i - 1], _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[i - 1] * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.extinctionMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[10]]).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.antUpgradeBaseCost[i - 1]))) {
                document.getElementById("antUpgrade" + i).style.backgroundColor = "silver";
            }
            else {
                document.getElementById("antUpgrade" + i).style.backgroundColor = "#171717";
            }
        }
    }
};
const updateChallengeDisplay = () => {
    for (let k = 1; k <= 10; k++) {
        const el = document.getElementById("challenge" + k);
        el.style.backgroundColor = "#171717";
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension === k) {
            el.style.backgroundColor = "plum";
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation === k) {
            el.style.backgroundColor = "plum";
        }
    }
    for (let k = 11; k <= 15; k++) {
        const el = document.getElementById("challenge" + k);
        el.style.backgroundColor = "#171717";
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === k) {
            el.style.backgroundColor = "plum";
        }
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.retrychallenges) {
        document.getElementById("retryChallenge").textContent = "Retry Challenges: ON";
    }
    else {
        document.getElementById("retryChallenge").textContent = "Retry Challenges: OFF";
    }
    for (let k = 1; k <= 15; k++) {
        updateChallengeLevel(k);
    }
};
const updateChallengeLevel = (k) => {
    const el = document.getElementById("challenge" + k + "level");
    let maxChallenges = 0;
    switch (k) {
        case 1:
            maxChallenges = 25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[66] + 925 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[105];
            break;
        case 2:
            maxChallenges = 25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[67] + 925 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[105];
            break;
        case 3:
            maxChallenges = 25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[68] + 925 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[105];
            break;
        case 4:
            maxChallenges = 25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[69] + 925 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[105];
            break;
        case 5:
            maxChallenges = 25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[70] + 925 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[105];
            break;
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
            maxChallenges = 25 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[29] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challengeExtension + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[5] + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[10] + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[15];
            break;
        case 11:
        case 12:
        case 13:
        case 14:
            maxChallenges = 30 + 3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[5] + 3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[10] + 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[15];
            break;
        case 15:
            maxChallenges = 9001;
            break;
    }
    el.textContent = `${_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[k]} / ${maxChallenges}`;
};
const updateAchievementBG = () => {
    for (let i = 1; i <= 182; i++) {
        document.getElementById("ach" + i).style.backgroundColor = "black";
    }
    const fixDisplay1 = document.getElementsByClassName('purpleach');
    const fixDisplay2 = document.getElementsByClassName('redach');
    for (let i = 0; i < fixDisplay1.length; i++) {
        fixDisplay1[i].style.backgroundColor = "purple";
    }
    for (let i = 0; i < fixDisplay2.length; i++) {
        fixDisplay2[i].style.backgroundColor = "maroon";
    }
    for (let i = 1; i < _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements.length; i++) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[i] > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[i] !== undefined) {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_4__.achievementaward)(i);
        }
    }
};
const CSSAscend = () => {
    for (let i = 1; i <= 5; i++) {
        const a = document.getElementById("ascendText" + i);
        const b = document.getElementById("ascendText" + (5 + i));
        const c = document.getElementById("tesseracts" + i);
        const d = document.getElementById("buyTesseracts" + i);
        const e = document.getElementById("tesseractAutoToggle" + i);
        a.style.top = (8 + 35 * i) + "px";
        b.style.top = (8 + 35 * i) + "px";
        c.style.top = (23 + 35 * i) + "px";
        d.style.top = (38 + 35 * i) + "px";
        e.style.top = (22 + 35 * i) + "px";
        a.style.left = "13%";
        b.style.left = "56.5%";
        c.style.left = "10%";
    }
    for (let i = 1; i <= 6; i++) {
        const a = document.getElementById("switchCubeSubTab" + i);
        a.style.top = (30 + 35 * i) + "px";
        a.style.left = "5%";
    }
};
const CSSRuneBlessings = () => {
    for (let i = 1; i <= 5; i++) {
        const a = document.getElementById('runeBlessingIcon' + i);
        const b = document.getElementById('runeSpiritIcon' + i);
        const c = document.getElementById('runeBlessingLevel' + i);
        const d = document.getElementById('runeSpiritLevel' + i);
        const e = document.getElementById('runeBlessingPurchase' + i);
        const f = document.getElementById('runeSpiritPurchase' + i);
        const g = document.getElementById('runeBlessingPower' + i);
        const h = document.getElementById('runeSpiritPower' + i);
        a.style.top = b.style.top = (20 + 75 * i) + "px";
        a.style.left = b.style.left = "10%";
        c.style.top = d.style.top = (23 + 75 * i) + "px";
        c.style.left = d.style.left = "15%";
        e.style.top = f.style.top = (36 + 75 * i) + "px";
        e.style.left = f.style.left = "32%";
        g.style.top = h.style.top = (23 + 75 * i) + "px";
        g.style.left = h.style.left = "59%";
    }
};
const showCorruptionStatsLoadouts = () => {
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.corruptionShowStats) {
        document.getElementById("corruptionStats").style.display = "block";
        document.getElementById("corruptionLoadouts").style.display = "none";
        document.getElementById("corrStatsBtn").style.borderColor = "dodgerblue";
        document.getElementById("corrLoadoutsBtn").style.borderColor = "white";
    }
    else {
        document.getElementById("corruptionStats").style.display = "none";
        document.getElementById("corruptionLoadouts").style.display = "block";
        document.getElementById("corrStatsBtn").style.borderColor = "white";
        document.getElementById("corrLoadoutsBtn").style.borderColor = "dodgerblue";
    }
};
const updateAscensionStats = () => {
    const t = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter;
    const [cubes, tess, hyper, platonic] = (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.CalcCorruptionStuff)().splice(4);
    const fillers = {
        "ascLen": (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.formatTimeShort)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter),
        "ascCubes": (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(cubes * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascStatToggles[1] ? 1 : 1 / t), 2, true),
        "ascTess": (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(tess * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascStatToggles[2] ? 1 : 1 / t), 3, true),
        "ascHyper": (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(hyper * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascStatToggles[3] ? 1 : 1 / t), 4, true),
        "ascPlatonic": (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(platonic * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascStatToggles[4] ? 1 : 1 / t), 5, true),
        "ascC10": _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[10] + '',
        "ascTimeAccel": `${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateTimeAcceleration)(), 3, true)}x`
    };
    for (const key in fillers) {
        document.getElementById(key).textContent = fillers[key];
    }
};


/***/ }),
/* 9 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateTotalCoinOwned": () => /* binding */ calculateTotalCoinOwned,
/* harmony export */   "calculateTotalAcceleratorBoost": () => /* binding */ calculateTotalAcceleratorBoost,
/* harmony export */   "calculateAcceleratorMultiplier": () => /* binding */ calculateAcceleratorMultiplier,
/* harmony export */   "calculateRecycleMultiplier": () => /* binding */ calculateRecycleMultiplier,
/* harmony export */   "calculateRuneExpGiven": () => /* binding */ calculateRuneExpGiven,
/* harmony export */   "lookupTableGen": () => /* binding */ lookupTableGen,
/* harmony export */   "calculateRuneExpToLevel": () => /* binding */ calculateRuneExpToLevel,
/* harmony export */   "calculateMaxRunes": () => /* binding */ calculateMaxRunes,
/* harmony export */   "calculateOfferings": () => /* binding */ calculateOfferings,
/* harmony export */   "calculateObtainium": () => /* binding */ calculateObtainium,
/* harmony export */   "calculateAutomaticObtainium": () => /* binding */ calculateAutomaticObtainium,
/* harmony export */   "calculateTalismanEffects": () => /* binding */ calculateTalismanEffects,
/* harmony export */   "calculateRuneLevels": () => /* binding */ calculateRuneLevels,
/* harmony export */   "calculateRuneBonuses": () => /* binding */ calculateRuneBonuses,
/* harmony export */   "calculateAnts": () => /* binding */ calculateAnts,
/* harmony export */   "calculateAntSacrificeELO": () => /* binding */ calculateAntSacrificeELO,
/* harmony export */   "calculateAntSacrificeRewards": () => /* binding */ calculateAntSacrificeRewards,
/* harmony export */   "calculateOffline": () => /* binding */ calculateOffline,
/* harmony export */   "calculateSigmoid": () => /* binding */ calculateSigmoid,
/* harmony export */   "calculateSigmoidExponential": () => /* binding */ calculateSigmoidExponential,
/* harmony export */   "calculateCubeBlessings": () => /* binding */ calculateCubeBlessings,
/* harmony export */   "calculateCubeMultiplier": () => /* binding */ calculateCubeMultiplier,
/* harmony export */   "calculateTimeAcceleration": () => /* binding */ calculateTimeAcceleration,
/* harmony export */   "calculateCorruptionPoints": () => /* binding */ calculateCorruptionPoints,
/* harmony export */   "calculateSummationLinear": () => /* binding */ calculateSummationLinear,
/* harmony export */   "calculateSummationNonLinear": () => /* binding */ calculateSummationNonLinear,
/* harmony export */   "CalcCorruptionStuff": () => /* binding */ CalcCorruptionStuff,
/* harmony export */   "dailyResetCheck": () => /* binding */ dailyResetCheck
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Utility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _Challenges__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1);
/* harmony import */ var _Talismans__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(10);
/* harmony import */ var _Reset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11);
/* harmony import */ var _Runes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(15);









const calculateTotalCoinOwned = () => {
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.totalCoinOwned =
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin +
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin +
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin +
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin +
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin;
};
const calculateTotalAcceleratorBoost = () => {
    let b = 0;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[26] > 0.5) {
        b += 1;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[31] > 0.5) {
        b += Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.totalCoinOwned / 2000) * 100 / 100;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[7] > 0.5) {
        b += Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin / 2000);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[14] > 0.5) {
        b += Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin / 2000);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[21] > 0.5) {
        b += Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin / 2000);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[28] > 0.5) {
        b += Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin / 2000);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[35] > 0.5) {
        b += Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin / 2000);
    }
    b += _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[93] * Math.floor(1 / 20 * (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune1level + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune2level + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune3level + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune4level + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5level));
    b += Math.floor((0.01 + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune1level) * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveLevelMult / 20);
    b *= (1 + 1 / 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[3] * (1 + 1 / 2 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[14])));
    b *= (1 + 1 / 20 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[16] + 1 / 20 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[17]);
    b *= (1 + 1 / 20 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[88]);
    b *= calculateSigmoidExponential(20, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[4 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant4) / 1000 * 20 / 19);
    b *= (1 + 1 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[127]);
    b *= (1 + 0.8 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[142]);
    b *= (1 + 0.6 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[157]);
    b *= (1 + 0.4 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[172]);
    b *= (1 + 0.2 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[187]);
    b *= (1 + 0.01 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[200]);
    b *= (1 + 0.01 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[50]);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[73] > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation !== 0) {
        b *= 2;
    }
    b = Math.floor(b);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.freeAcceleratorBoost = b;
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.totalAcceleratorBoost = Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.freeAcceleratorBoost) * 100 / 100;
};
const calculateAcceleratorMultiplier = () => {
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier = 1;
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[60] / 100);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[61] / 100);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[62] / 100);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + 1 / 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[1] * (1 + 1 / 2 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[14])));
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + 1 / 20 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[6] + 1 / 25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[7] + 1 / 40 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[8] + 3 / 200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[9] + 1 / 200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[10]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + 1 / 20 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[86]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + 1 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[126]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + 0.8 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[141]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + 0.6 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[156]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + 0.4 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[171]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + 0.2 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[186]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + 0.01 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[200]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= (1 + 0.01 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[50]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= Math.pow(1.01, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[21] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[22] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[23] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[24] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[25]);
    if ((_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension !== 0 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation !== 0) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[50] > 0.5) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.acceleratorMultiplier *= 1.25;
    }
};
const calculateRecycleMultiplier = () => {
    const recycleFactors = (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.sumContents)([
        0.05 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[80],
        0.05 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[87],
        0.05 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[94],
        0.05 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[101],
        0.05 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[108],
        0.05 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[115],
        0.075 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[122],
        0.075 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[129],
        0.05 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[61],
        0.25 * Math.min(1, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune4level / 400),
        0.005 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[2]
    ]);
    return 1 / (1 - recycleFactors);
};
function calculateRuneExpGiven(runeIndex, all = false, runeLevel = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeIndex], returnFactors = false) {
    const recycleMultiplier = calculateRecycleMultiplier();
    let allRuneExpAdditiveMultiplier = null;
    if (all) {
        allRuneExpAdditiveMultiplier = (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.sumContents)([
            1 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[3],
            1 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[66]
        ]);
    }
    else {
        allRuneExpAdditiveMultiplier = (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.sumContents)([
            1,
            Math.min(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[1]),
            0.4 / 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[1],
            0.6 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[22],
            0.3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[23],
            2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[61],
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[71] * runeLevel / 25
        ]);
    }
    const allRuneExpMultiplier = (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.productContents)([
        1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[91] / 20),
        1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[92] / 20),
        calculateSigmoidExponential(999, 1 / 10000 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[8 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant8, 1.1)),
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.cubeBonusMultiplier[4],
        (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter / 1000 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[32]),
        1 / Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.droughtMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[8]], 1 - 1 / 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[13]),
        1 + 1 / 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[8],
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.runeExp
    ]);
    const runeExpMultiplier = [
        (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.productContents)([
            1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[78] / 50), 1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[111] / 100), 1 + ((0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[7]) / 10)
        ]),
        (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.productContents)([
            1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[80] / 50), 1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[112] / 100), 1 + ((0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[7]) / 10)
        ]),
        (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.productContents)([
            1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[79] / 50), 1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[113] / 100), 1 + ((0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8]) / 5)
        ]),
        (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.productContents)([
            1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[77] / 50), 1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[114] / 100), 1 + ((0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[6]) / 10)
        ]),
        (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.productContents)([
            1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[83] / 20), 1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[115] / 100), 1 + ((0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[9]) / 5)
        ])
    ];
    const fact = [
        allRuneExpAdditiveMultiplier,
        allRuneExpMultiplier,
        recycleMultiplier,
        runeExpMultiplier[runeIndex]
    ];
    return returnFactors ? fact : (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.productContents)(fact);
}
const lookupTableGen = (runeLevel) => {
    const allRuneExpRequiredMultiplier = (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.productContents)([
        Math.pow(runeLevel / 2, 3),
        ((3.5 * runeLevel) + 100) / 500,
        Math.max(1, (runeLevel - 200) / 9),
        Math.max(1, (runeLevel - 400) / 12),
        Math.max(1, (runeLevel - 600) / 15),
        Math.max(1, Math.pow(1.03, (runeLevel - 800) / 4))
    ]);
    return allRuneExpRequiredMultiplier;
};
const lookupTableRuneExp = Object.assign({}, ...Array.from({ length: 20000 }, (_, i) => ({ [i]: lookupTableGen(i) })));
const calculateRuneExpToLevel = (runeIndex, runeLevel = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeIndex]) => {
    return lookupTableRuneExp[runeLevel] * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeexpbase[runeIndex];
};
const calculateMaxRunes = (i) => {
    let max = 1000;
    const increaseAll = 10 * (2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[16] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[37])
        + 3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[7] + 80 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[11])
        + 200 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[14])
        + Math.floor(0.04 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[200] + 0.04 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[50]);
    const increaseMaxLevel = [
        null,
        10 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[78] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[111]) + increaseAll,
        10 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[80] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[112]) + increaseAll,
        10 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[79] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[113]) + increaseAll,
        10 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[77] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[114]) + increaseAll,
        10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[115] + increaseAll
    ];
    max += increaseMaxLevel[i];
    return max;
};
function calculateOfferings(input, calcMult = true, statistic = false) {
    if (input == "acceleratorBoost" || input == "ascension" || input == "ascensionChallenge") {
        return 0;
    }
    let q = 0;
    let a = 0;
    let b = 0;
    let c = 0;
    if (input == "reincarnation" || input == "reincarnationChallenge") {
        a += 3;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[52] > 0.5) {
            a += (25 * Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter / 1800, 1));
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[62] > 0.5) {
            a += 1 / 50 * ((0,_Utility__WEBPACK_IMPORTED_MODULE_1__.sumContents)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions));
        }
        a += 0.6 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[25];
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[95] === 1) {
            a += 4;
        }
        a += 1 / 200 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5level * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveLevelMult * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[85] / 200);
        a *= (1 + Math.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationShards.add(1), 10), 2 / 3) / 4);
        a *= Math.min(Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter / 10, 2), 1);
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter >= 5) {
            a *= Math.max(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter / 10);
        }
    }
    if (input == "transcension" || input == "transcensionChallenge" || input == "reincarnation" ||
        input == "reincarnationChallenge") {
        b += 2;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationCount > 0) {
            b += 2;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[44] > 0.5) {
            b += (15 * Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendcounter / 1800, 1));
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[2] > 0) {
            b += 1;
        }
        b += 0.2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[24];
        b += 1 / 200 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5level * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveLevelMult * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[85] / 200);
        b *= (1 + Math.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendShards.add(1), 10), 1 / 2) / 5);
        b *= (1 + (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8]) / 25);
        b *= Math.min(Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendcounter / 10, 2), 1);
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendCount >= 5) {
            b *= Math.max(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendcounter / 10);
        }
    }
    c += 1;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendCount > 0 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationCount > 0) {
        c += 1;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationCount > 0) {
        c += 2;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[37] > 0.5) {
        c += (15 * Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigecounter / 1800, 1));
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[2] > 0) {
        c += 1;
    }
    c += 0.2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[24];
    c += 1 / 200 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5level * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveLevelMult * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[85] / 200);
    c *= (1 + Math.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeShards.add(1), 10), 1 / 2) / 5);
    c *= (1 + (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[6]) / 50);
    c *= Math.min(Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigecounter / 10, 2), 1);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeCount >= 5) {
        c *= Math.max(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigecounter / 10);
    }
    q = a + b + c;
    const arr = [
        1 + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[33] / 100,
        1 + 15 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[34] / 100,
        1 + 25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[35] / 100,
        1 + 20 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[38] / 100,
        1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[75] * 2 * Math.min(1, Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxobtainium / 30000000, 0.5)),
        1 + 1 / 50 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel,
        1 + 1 / 25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringTimerLevel,
        1 + 1 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cashGrabLevel,
        1 + 1 / 10000 * (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.sumContents)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[85],
        1 + Math.pow((_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[6 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant6), .66),
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.cubeBonusMultiplier[3],
        1 + 0.02 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[3],
        1 + 0.0003 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[3 - 1] * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[149] + 0.0004 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[3 - 1] * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[179],
        1 + 0.12 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[12]),
        1 + 0.01 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[200],
        1 + Math.min(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount / 1e6) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[187],
        1 + .6 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[250] + 1 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[251],
        1 + 0.05 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[46],
        1 + 0.02 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[50],
        1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[5],
        1 + 2.5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[10],
        1 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[15],
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.offering,
    ];
    if (calcMult) {
        q *= (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.productContents)(arr);
    }
    else if (!calcMult) {
        return arr;
    }
    if (statistic) {
        return (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.productContents)(arr);
    }
    q = Math.floor(q) * 100 / 100;
    let persecond = 0;
    if (input === "prestige") {
        persecond = q / (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigecounter);
    }
    if (input === "transcension" || input == "transcensionChallenge") {
        persecond = q / (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendcounter);
    }
    if (input === "reincarnation" || input == "reincarnationChallenge") {
        persecond = q / (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter);
    }
    if (persecond > _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offeringpersecond) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offeringpersecond = persecond;
    }
    return q;
}
const calculateObtainium = () => {
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain = 1;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[69] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= Math.min(10, new break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default(break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.log(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.reincarnationPointGain.add(10), 10), 0.5)).toNumber());
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[72] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= Math.min(50, (1 + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[6] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[7] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[9] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[10]));
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[74] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 4 * Math.min(1, Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxofferings / 100000, 0.5)));
    }
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[65] / 5);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[76] / 10);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[81] / 10);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumAutoLevel / 50);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cashGrabLevel / 100);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5level / 200 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveLevelMult * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[84] / 200 * (1 + 1 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveRuneSpiritPower[5] * calculateCorruptionPoints() / 400)));
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 0.01 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[84] + 0.03 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[91] + 0.05 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[98] + 0.07 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[105] + 0.09 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[112] + 0.11 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[119] + 0.13 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[126] + 0.15 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[133] + 0.17 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[140] + 0.19 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[147]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 2 * Math.pow((_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[10 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant10) / 50, 2 / 3));
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[188] * Math.min(2, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount / 5e6));
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 0.6 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[250] + 1 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[251]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.cubeBonusMultiplier[5];
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 0.04 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[4]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 0.1 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[47]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 0.1 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[3]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 0.5 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[12]));
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + calculateCorruptionPoints() / 400 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveRuneSpiritPower[4]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 0.03 * Math.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.uncommonFragments + 1) / Math.log(4) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[144]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 0.02 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[50]);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[53] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 1 / 800 * (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeSum));
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[128]) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= 1.5;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[129]) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= 1.25;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[51] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain += 4;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter >= 2) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain += 1 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[63];
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter >= 5) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain += 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[64];
    }
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= Math.min(1, Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter / 10, 2));
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 1 / 25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumTimerLevel);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationCount >= 5) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= Math.max(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter / 10);
    }
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= Math.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendShards.add(1), 10) / 300, 2);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain = Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain, Math.min(1, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.illiteracyPower[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[5]] * (1 + 9 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[9] * Math.min(100, Math.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints + 10) / Math.log(10)))));
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 4 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[42]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 3 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[43]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[5]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 1.5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[9]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 2.5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[10]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= (1 + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[15]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain *= _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.obtainium;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 15) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain += 1;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 14) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain = 0;
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.obtainiumpersecond = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.obtainiumGain / (0.1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter);
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxobtainiumpersecond = Math.max(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxobtainiumpersecond, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.obtainiumpersecond);
};
const calculateAutomaticObtainium = () => {
    return 0.05 * (10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[61] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[62]) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxobtainiumpersecond * (1 + 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[3] / 5);
};
const calculateTalismanEffects = () => {
    let positiveBonus = 0;
    let negativeBonus = 0;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[135] === 1) {
        positiveBonus += 0.02;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[136] === 1) {
        positiveBonus += 0.02;
    }
    positiveBonus += 0.02 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[4 - 1] - 1);
    positiveBonus += 1.2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[106] / 100;
    positiveBonus += 1.2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[107] / 100;
    positiveBonus += 1.2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[116] / 200;
    positiveBonus += 1.2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[117] / 200;
    positiveBonus += (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.cubeBonusMultiplier[9] - 1);
    positiveBonus += 0.0004 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[50];
    negativeBonus += 0.06 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[118];
    negativeBonus += 0.0004 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[50];
    for (let i = 1; i <= 5; i++) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanOne[i] === (1)) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman1Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanPositiveModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[1 - 1]] + positiveBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[1 - 1] * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        else {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman1Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanNegativeModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[1 - 1]] - negativeBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[1 - 1] * (-1) * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanTwo[i] === (1)) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman2Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanPositiveModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[2 - 1]] + positiveBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[2 - 1] * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        else {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman2Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanNegativeModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[2 - 1]] - negativeBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[2 - 1] * (-1) * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanThree[i] === (1)) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman3Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanPositiveModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[3 - 1]] + positiveBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[3 - 1] * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        else {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman3Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanNegativeModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[3 - 1]] - negativeBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[3 - 1] * (-1) * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanFour[i] === (1)) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman4Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanPositiveModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[4 - 1]] + positiveBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[4 - 1] * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        else {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman4Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanNegativeModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[4 - 1]] - negativeBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[4 - 1] * (-1) * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanFive[i] === (1)) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman5Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanPositiveModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[5 - 1]] + positiveBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[5 - 1] * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        else {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman5Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanNegativeModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[5 - 1]] - negativeBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[5 - 1] * (-1) * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanSix[i] === (1)) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman6Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanPositiveModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[6 - 1]] + positiveBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[6 - 1] * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        else {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman6Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanNegativeModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[6 - 1]] - negativeBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[6 - 1] * (-1) * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanSeven[i] === (1)) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman7Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanPositiveModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[7 - 1]] + positiveBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[7 - 1] * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
        else {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman7Effect[i] = (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talismanNegativeModifier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[7 - 1]] - negativeBonus) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[7 - 1] * (-1) * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.talismanBonus;
        }
    }
    const talismansEffects = [_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman1Effect, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman2Effect, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman3Effect, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman4Effect, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman5Effect, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman6Effect, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman7Effect];
    const runesTalisman = [0, 0, 0, 0, 0, 0];
    talismansEffects.forEach((talismanEffect) => {
        talismanEffect.forEach((levels, runeNumber) => {
            runesTalisman[runeNumber] += levels;
        });
    });
    [, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune1Talisman, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune2Talisman, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune3Talisman, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune4Talisman, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5Talisman] = runesTalisman;
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman6Power = 0;
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman7Quarks = 0;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[1 - 1] === 6) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune2Talisman += 400;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[2 - 1] === 6) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune1Talisman += 400;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[3 - 1] === 6) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune4Talisman += 400;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[4 - 1] === 6) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune3Talisman += 400;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[5 - 1] === 6) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5Talisman += 400;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[6 - 1] === 6) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman6Power = 2.5;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[7 - 1] === 6) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.talisman7Quarks = 2;
    }
};
const calculateRuneLevels = () => {
    calculateTalismanEffects();
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation !== 9) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune1level = Math.max(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[0] + Math.min(1e7, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[9 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant9)) * 1 + (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune1Talisman) + 7 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[7]);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune2level = Math.max(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[1] + Math.min(1e7, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[9 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant9)) * 1 + (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune2Talisman) + 7 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[7]);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune3level = Math.max(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[2] + Math.min(1e7, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[9 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant9)) * 1 + (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune3Talisman) + 7 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[7]);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune4level = Math.max(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[3] + Math.min(1e7, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[9 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant9)) * 1 + (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune4Talisman) + 7 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[7]);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5level = Math.max(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[4] + Math.min(1e7, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[9 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant9)) * 1 + (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5Talisman) + 7 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[7]);
    }
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeSum = (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.sumContents)([_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune1level, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune2level, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune3level, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune4level, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5level]);
    calculateRuneBonuses();
};
const calculateRuneBonuses = () => {
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.blessingMultiplier = 1;
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.spiritMultiplier = 1;
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.blessingMultiplier *= (1 + 6.9 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[134] / 100);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.blessingMultiplier *= (1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[3 - 1] - 1) / 10);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.blessingMultiplier *= (1 + 0.10 * Math.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.epicFragments + 1) / Math.log(10) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[174]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.blessingMultiplier *= (1 + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[194] / 100);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[160] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.blessingMultiplier *= Math.pow(1.25, 8);
    }
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.spiritMultiplier *= (1 + 8 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[164] / 100);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[165] > 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension !== 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.spiritMultiplier *= Math.pow(2, 8);
    }
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.spiritMultiplier *= (1 + 0.15 * Math.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.legendaryFragments + 1) / Math.log(10) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[189]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.spiritMultiplier *= (1 + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[194] / 100);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.spiritMultiplier *= (1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[5 - 1] - 1) / 100);
    for (let i = 1; i <= 5; i++) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeBlessings[i] = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.blessingMultiplier * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[i - 1] * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeBlessingLevels[i];
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeSpirits[i] = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.spiritMultiplier * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[i - 1] * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeSpiritLevels[i];
    }
    for (let i = 1; i <= 5; i++) {
        if (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeBlessings[i] <= 1e30) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveRuneBlessingPower[i] = (Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeBlessings[i], 1 / 8)) / 75 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.blessingBonus;
        }
        else if (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeBlessings[i] > 1e30) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveRuneBlessingPower[i] = Math.pow(10, 5 / 2) * (Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeBlessings[i], 1 / 24)) / 75 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.blessingBonus;
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeSpirits[i] <= 1e25) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveRuneSpiritPower[i] = (Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeSpirits[i], 1 / 8)) / 75 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.spiritBonus;
        }
        else if (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeSpirits[i] > 1e25) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveRuneSpiritPower[i] = Math.pow(10, 25 / 12) * (Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.runeSpirits[i], 1 / 24)) / 75 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.spiritBonus;
        }
    }
};
const calculateAnts = () => {
    let bonusLevels = 0;
    bonusLevels += 2 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[6 - 1] - 1);
    bonusLevels += (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[9]);
    bonusLevels += 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[6];
    bonusLevels += 12 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[11]);
    bonusLevels += Math.floor(1 / 200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[200]);
    bonusLevels *= _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.bonusAntLevel;
    let c11 = 0;
    let c11bonus = 0;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 11) {
        c11 = 999;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 11) {
        c11bonus = Math.floor((4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8] + 23 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[9]) * Math.max(0, (1 - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[11] / 10)));
    }
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant1 = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[1 - 1] + c11, 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[97] + bonusLevels + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[102] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[132] + c11bonus);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant2 = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[2 - 1] + c11, 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[97] + bonusLevels + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[102] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[132] + c11bonus);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant3 = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[3 - 1] + c11, 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[97] + bonusLevels + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[102] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[132] + c11bonus);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant4 = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[4 - 1] + c11, 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[97] + bonusLevels + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[102] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[132] + c11bonus);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant5 = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[5 - 1] + c11, 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[97] + bonusLevels + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[102] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[132] + c11bonus);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant6 = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[6 - 1] + c11, 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[97] + bonusLevels + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[102] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[132] + c11bonus);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant7 = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[7 - 1] + c11, 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[98] + bonusLevels + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[102] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[132] + c11bonus);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant8 = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[8 - 1] + c11, 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[98] + bonusLevels + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[102] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[132] + c11bonus);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant9 = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[9 - 1] + c11, 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[98] + bonusLevels + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[102] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[132] + c11bonus);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant10 = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[10 - 1] + c11, 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[98] + bonusLevels + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[102] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[132] + c11bonus);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant11 = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[11 - 1] + c11, 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[98] + bonusLevels + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[102] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[132] + c11bonus);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant12 = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[12 - 1] + c11, 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[98] + bonusLevels + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[102] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[132] + c11bonus);
};
const calculateAntSacrificeELO = () => {
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO = 0;
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO = 0;
    const antUpgradeSum = (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.sumContents)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints.gte("1e40")) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints, 10);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 1 / 2 * antUpgradeSum;
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 1 / 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedAnts;
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 1 / 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedAnts;
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 1 / 3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedAnts;
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 1 / 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedAnts;
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedAnts;
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.sixthOwnedAnts;
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.seventhOwnedAnts;
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 8 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.eighthOwnedAnts;
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 666 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[178];
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[180] === 1) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO *= 1.01;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[181] === 1) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO *= 1.03 / 1.01;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[182] === 1) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO *= 1.06 / 1.03;
        }
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[110] / 100);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO *= (1 + 2.5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[148] / 100);
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[176] === 1) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 25;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[177] === 1) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 50;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[178] === 1) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 75;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[179] === 1) {
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 100;
        }
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[108];
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[109];
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 40 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[123];
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 100 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[10]);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO += 75 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[80];
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO = 1 / 10 * Math.floor(10 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO += 0.5 * Math.min(3500, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO += 0.1 * Math.min(4000, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO += 0.1 * Math.min(6000, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO += 0.1 * Math.min(10000, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO += 0.2 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO;
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO += (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.cubeBonusMultiplier[8] - 1);
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO += 1 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[50];
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO *= (1 + 0.03 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[124]);
    }
};
const calculateAntSacrificeMultipliers = () => {
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.timeMultiplier = Math.min(1, Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimer / 10, 2));
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[177] === 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.timeMultiplier *= Math.min(1000, Math.max(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimer / 10));
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[177] > 0) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.timeMultiplier *= Math.max(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimer / 10);
    }
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier = 1;
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= (1 + 2 * (1 - Math.pow(2, -(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[11 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant11) / 125)));
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[103] / 20);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[104] / 20);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[132] === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= 1.25;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[137] === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= 1.25;
    }
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= (1 + 6.66 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveRuneBlessingPower[3]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= (1 + 1 / 50 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[10]));
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= (1 + 1 / 50 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[122]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= (1 + 3 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[133]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= (1 + 2 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[163]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= (1 + 1 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[193]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= (1 + 1 / 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[79]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= (1 + 0.09 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[40]);
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier *= _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.cubeBonusMultiplier[7];
};
const calculateAntSacrificeRewards = () => {
    calculateAntSacrificeELO();
    calculateAntSacrificeMultipliers();
    const rewardsMult = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.timeMultiplier * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier;
    const rewards = {
        antSacrificePoints: _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO * rewardsMult / 85,
        offerings: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offeringpersecond * 0.15 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO * rewardsMult / 180,
        obtainium: _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxobtainiumpersecond * 0.24 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO * rewardsMult / 180,
        talismanShards: (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO > 500)
            ? Math.max(1, Math.floor(rewardsMult / 210 * Math.pow(1 / 4 * (Math.max(0, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO - 500)), 2)))
            : 0,
        commonFragments: (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO > 750)
            ? Math.max(1, Math.floor(rewardsMult / 110 * Math.pow(1 / 9 * (Math.max(0, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO - 750)), 1.83)))
            : 0,
        uncommonFragments: (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO > 1000)
            ? Math.max(1, Math.floor(rewardsMult / 170 * Math.pow(1 / 16 * (Math.max(0, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO - 1000)), 1.66)))
            : 0,
        rareFragments: (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO > 1500)
            ? Math.max(1, Math.floor(rewardsMult / 200 * Math.pow(1 / 25 * (Math.max(0, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO - 1500)), 1.50)))
            : 0,
        epicFragments: (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO > 2000)
            ? Math.max(1, Math.floor(rewardsMult / 200 * Math.pow(1 / 36 * (Math.max(0, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO - 2000)), 1.33)))
            : 0,
        legendaryFragments: (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO > 3000)
            ? Math.max(1, Math.floor(rewardsMult / 230 * Math.pow(1 / 49 * (Math.max(0, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO - 3000)), 1.16)))
            : 0,
        mythicalFragments: (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO > 5000)
            ? Math.max(1, Math.floor(rewardsMult / 220 * Math.pow(1 / 64 * (Math.max(0, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO - 4150)), 1)))
            : 0
    };
    return rewards;
};
const calculateOffline = (forceTime = 0) => {
    _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.timeWarp = true;
    const maximumTimer = 86400 + 7200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[31] + 7200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[32];
    const updatedTime = Date.now();
    const timeAdd = Math.min(maximumTimer, Math.max(forceTime, (updatedTime - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offlinetick) / 1000));
    document.getElementById("offlineTimer").textContent = "You have " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(timeAdd, 0) + " real-life seconds of Offline Progress!";
    let simulatedTicks = (timeAdd > 1000) ? 200 : 1 + Math.floor(timeAdd / 5);
    const tickValue = (timeAdd > 1000) ? timeAdd / 200 : Math.min(5, timeAdd);
    let timeMultiplier = 1;
    const maxSimulatedTicks = simulatedTicks;
    let progressBarWidth = 0;
    let automaticObtainium = 0;
    (0,_Talismans__WEBPACK_IMPORTED_MODULE_5__.toggleTalismanBuy)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.buyTalismanShardPercent);
    (0,_Talismans__WEBPACK_IMPORTED_MODULE_5__.updateTalismanInventory)();
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.quarkstimer += timeAdd;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.quarkstimer = Math.min(90000 + 45000 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[195], _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.quarkstimer);
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter += timeAdd;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards += timeAdd * (1 / 2 * Math.min(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[2]) + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[2]);
    document.getElementById('preload').style.display = (forceTime > 0) ? 'none' : 'block';
    document.getElementById("offlineprogress").style.display = "block";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offlinetick = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offlinetick < 1.5e12) ? (Date.now()) : _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offlinetick;
    const runOffline = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.interval)(runSimulator, 0);
    function runSimulator() {
        timeMultiplier = calculateTimeAcceleration();
        calculateObtainium();
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigecounter += tickValue * timeMultiplier;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendcounter += tickValue * timeMultiplier;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter += tickValue * timeMultiplier;
        (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.resourceGain)(tickValue * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.timeMultiplier);
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[61] > 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension !== 14) {
            calculateObtainium();
            automaticObtainium = calculateAutomaticObtainium();
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints += tickValue * timeMultiplier * automaticObtainium;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[173] > 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimer += tickValue * timeMultiplier;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimerReal += tickValue;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel > 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoSacrificeToggle) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.sacrificeTimer += tickValue;
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.sacrificeTimer >= 1) {
                const rune = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoSacrifice;
                (0,_Runes__WEBPACK_IMPORTED_MODULE_8__.redeemShards)(rune, true);
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.sacrificeTimer = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.sacrificeTimer % 1;
            }
        }
        (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.updateAll)();
        simulatedTicks -= 1;
        progressBarWidth = 100 * (1 - simulatedTicks / maxSimulatedTicks);
        document.getElementById("offlineprogressdone").style.width = progressBarWidth + "%";
        if (simulatedTicks < 1) {
            (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.clearInt)(runOffline);
            _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.timeWarp = false;
            document.getElementById("offlineprogress").style.display = "none";
            document.getElementById("game").style.display = "block";
            document.getElementById("preload").style.display = "none";
        }
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offlinetick = updatedTime;
    if (!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.loadedNov13Vers) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[14] > 0 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[14] > 0) {
            const ascCount = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount;
            (0,_Reset__WEBPACK_IMPORTED_MODULE_6__.reset)("ascensionChallenge");
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount = (ascCount + 1);
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.loadedNov13Vers = true;
    }
    (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.saveSynergy)();
    (0,_Talismans__WEBPACK_IMPORTED_MODULE_5__.updateTalismanInventory)();
    calculateObtainium();
    calculateAnts();
    calculateRuneLevels();
};
const calculateSigmoid = (constant, factor, divisor) => {
    return (1 + (constant - 1) * (1 - Math.pow(2, -(factor) / (divisor))));
};
const calculateSigmoidExponential = (constant, coefficient) => {
    return (1 + (constant - 1) * (1 - Math.exp(-coefficient)));
};
const calculateCubeBlessings = () => {
    const cubeArray = [_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeBlessings.accelerator, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeBlessings.multiplier, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeBlessings.offering, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeBlessings.runeExp, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeBlessings.obtainium, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeBlessings.antSpeed, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeBlessings.antSacrifice, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeBlessings.antELO, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeBlessings.talismanBonus, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeBlessings.globalSpeed];
    const powerBonus = [_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[45] / 100, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[35] / 100, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[24] / 100, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[14] / 100, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[40] / 100, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[22] / 40, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[15] / 100, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[25] / 100, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[44] / 100, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[34] / 100];
    for (let i = 1; i <= 10; i++) {
        let power = 1;
        let mult = 1;
        if (cubeArray[i - 1] >= 1000) {
            power = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.blessingDRPower[i];
            mult *= Math.pow(1000, (1 - _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.blessingDRPower[i]) * (1 + powerBonus[i - 1]));
        }
        if (i === 6) {
            power = 2.25;
            mult = 1;
        }
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.cubeBonusMultiplier[i] = 1 + mult * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.blessingbase[i] * Math.pow(cubeArray[i - 1], power * (1 + powerBonus[i - 1])) * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.tesseractBonusMultiplier[i];
    }
    calculateRuneLevels();
    calculateAntSacrificeELO();
    calculateObtainium();
};
function calculateCubeMultiplier(calcMult = true) {
    const arr = [
        Math.pow(Math.min(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter / 10), 2) * (1 + (1 / 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[204] + 1 / 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[211] + 1 / 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[218]) * Math.max(0, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter / 10 - 1)),
        1 + 3 / 200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.seasonPassLevel,
        1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[119] / 400,
        1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[120] / 400,
        1 + 14 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[1] / 100,
        1 + 7 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[11] / 100,
        1 + 7 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[21] / 100,
        1 + 7 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[31] / 100,
        1 + 7 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[41] / 100,
        1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[137] / 100,
        1 + 0.9 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[152] / 100,
        1 + 0.8 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[167] / 100,
        1 + 0.7 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[182] / 100,
        1 + 0.6 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[197] / 100,
        1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[189] * Math.min(2, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount / 2.5e8),
        1 + 0.03 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[192] * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[12 - 1],
        1 + calculateCorruptionPoints() / 400 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveRuneSpiritPower[2],
        1 + 0.004 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[200],
        1 + 0.01 * break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.add(1), 4) * Math.min(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[10]),
        1 + 0.25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[30],
        1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[193] * break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.add(1), 10) / 400,
        1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[195] * break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.add(1), 10) / 400,
        1 + 4 / 100 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[198] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[199] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[200]) + 3 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[201],
        1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[240] * Math.max(0.1, 1 / 20 * Math.log(calculateTimeAcceleration() + 0.01) / Math.log(10)),
        1 + 6 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[250] + 10 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[251],
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.platonicBonusMultiplier[0],
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube1 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube2 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube3 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube4
    ];
    if (calcMult) {
        return (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.productContents)(arr);
    }
    else {
        return arr;
    }
}
const calculateTimeAcceleration = () => {
    let timeMult = 1;
    timeMult *= (1 + 1 / 300 * Math.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxobtainium + 1) / Math.log(10) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[70]);
    timeMult *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[121] / 50);
    timeMult *= (1 + 0.015 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[136]);
    timeMult *= (1 + 0.012 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[151]);
    timeMult *= (1 + 0.009 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[166]);
    timeMult *= (1 + 0.006 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[181]);
    timeMult *= (1 + 0.003 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[196]);
    timeMult *= (1 + 8 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveRuneBlessingPower[1]);
    timeMult *= (1 + calculateCorruptionPoints() / 400 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveRuneSpiritPower[1]);
    timeMult *= _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.cubeBonusMultiplier[10];
    timeMult *= 1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[18] / 5;
    timeMult *= calculateSigmoid(2, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[12 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant12, 69);
    timeMult *= (1 + 0.10 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[2 - 1] - 1));
    timeMult *= _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.globalSpeed;
    timeMult *= _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.lazinessMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[3]];
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 15 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[15] > 0) {
        timeMult *= 1000;
    }
    if (timeMult > 100) {
        timeMult = 10 * Math.sqrt(timeMult);
    }
    if (timeMult < 1) {
        timeMult = Math.pow(timeMult, 1 - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[7] / 30);
    }
    timeMult *= _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.platonicBonusMultiplier[7];
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[3] >= 6 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[241] < 1) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_7__.achievementaward)(241);
    }
    if (timeMult > 3600 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[242] < 1) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_7__.achievementaward)(242);
    }
    return (timeMult);
};
const calculateCorruptionPoints = () => {
    let basePoints = 400;
    for (let i = 1; i <= 9; i++) {
        basePoints += 16 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[i], 2);
    }
    return (basePoints);
};
const calculateSummationLinear = (baseLevel, baseCost, resourceAvailable, differenceCap = 1e9) => {
    const subtractCost = baseCost * baseLevel * (1 + baseLevel) / 2;
    const buyToLevel = Math.min(baseLevel + differenceCap, Math.floor(-1 / 2 + Math.sqrt(1 / 4 + 2 * (resourceAvailable + subtractCost) / baseCost)));
    const realCost = (baseCost * buyToLevel * (1 + buyToLevel) / 2) - subtractCost;
    return [buyToLevel, realCost];
};
const calculateSummationNonLinear = (baseLevel, baseCost, resourceAvailable, diffPerLevel, buyAmount) => {
    const c = diffPerLevel / 2;
    resourceAvailable = resourceAvailable || 0;
    const alreadySpent = baseCost * (c * Math.pow(baseLevel, 2) + baseLevel * (1 - c));
    resourceAvailable += alreadySpent;
    const v = resourceAvailable / baseCost;
    let buyToLevel = c > 0
        ? Math.max(0, Math.floor((c - 1) / (2 * c) + Math.pow(Math.pow(1 - c, 2) + 4 * c * v, 1 / 2) / (2 * c)))
        : Math.floor(v);
    buyToLevel = Math.min(buyToLevel, buyAmount + baseLevel);
    let totalCost = baseCost * (c * Math.pow(buyToLevel, 2) + buyToLevel * (1 - c)) - alreadySpent;
    if (buyToLevel == baseLevel) {
        totalCost = baseCost * (1 + 2 * c * baseLevel);
    }
    return [buyToLevel, totalCost];
};
const CalcCorruptionStuff = () => {
    const corruptionArrayMultiplier = [1, 2, 2.75, 3.5, 4.25, 5, 5.75, 6.5, 7, 7.5, 8, 9, 10];
    const corruptionLevelSum = (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.sumContents)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions);
    let cubeBank = 0;
    let challengeModifier = 1;
    let corruptionMultiplier = 1;
    let bankMultiplier = 1;
    let effectiveScore = 1;
    const speed = calculateTimeAcceleration();
    for (let i = 1; i <= 10; i++) {
        challengeModifier = (i >= 6) ? 2 : 1;
        cubeBank += challengeModifier * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[i];
    }
    let baseScore = 0;
    const challengeScoreArrays1 = [0, 8, 10, 12, 15, 20, 60, 80, 120, 180, 300];
    const challengeScoreArrays2 = [0, 10, 12, 15, 20, 30, 80, 120, 180, 300, 450];
    const challengeScoreArrays3 = [0, 20, 30, 50, 100, 200, 250, 300, 400, 500, 750];
    for (let i = 1; i <= 10; i++) {
        baseScore += challengeScoreArrays1[i] * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[i];
        if (i <= 5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[i] >= 75) {
            baseScore += challengeScoreArrays2[i] * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[i] - 75);
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[i] >= 750) {
                baseScore += challengeScoreArrays3[i] * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[i] - 750);
            }
        }
        if (i <= 10 && i > 5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[i] >= 25) {
            baseScore += challengeScoreArrays2[i] * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[i] - 25);
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[i] >= 60) {
                baseScore += challengeScoreArrays3[i] * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[i] - 60);
            }
        }
    }
    baseScore *= Math.pow(1.03 + 0.005 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[39] + 0.0025 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[5] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[10] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[15]), _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[10]);
    for (let i = 1; i <= 10; i++) {
        corruptionMultiplier *= corruptionArrayMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[i]];
    }
    effectiveScore = baseScore * corruptionMultiplier * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.score * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.platonicBonusMultiplier[6];
    bankMultiplier = Math.pow(effectiveScore / 3000, 1 / 4.1);
    let cubeGain = cubeBank * bankMultiplier;
    cubeGain *= calculateCubeMultiplier();
    cubeGain *= (1 + 0.000075 * corruptionLevelSum * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[1]);
    if (effectiveScore > 5e12 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[10] > 0) {
        cubeGain *= 2;
    }
    if (effectiveScore > 25e12 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[15] > 0) {
        cubeGain *= 2.25;
    }
    let tesseractGain = 1;
    tesseractGain *= Math.pow(1 + Math.max(0, (effectiveScore - 1e5)) / 1e4, .35);
    tesseractGain *= (1 + 0.01 * break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.add(1), 4) * Math.min(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[10]));
    if (effectiveScore >= 100000) {
        tesseractGain += 2;
    }
    tesseractGain *= (1 + 0.25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[30]);
    tesseractGain *= (1 + 1 / 200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[38] * (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.sumContents)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions));
    tesseractGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[195] * break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.add(1), 10) / 400);
    tesseractGain *= Math.pow(Math.min(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter / 10), 2) * (1 + (1 / 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[204] + 1 / 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[211] + 1 / 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[218]) * Math.max(0, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter / 10 - 1));
    tesseractGain *= (1 + 0.00015 * corruptionLevelSum * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[2]);
    if (effectiveScore > 7.5e12 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[10] > 0) {
        tesseractGain *= 2;
    }
    if (effectiveScore > 50e12 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[15] > 0) {
        tesseractGain *= 2.25;
    }
    tesseractGain *= _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.platonicBonusMultiplier[1];
    tesseractGain *= (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube1 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube2 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube3 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube4);
    tesseractGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[202] * Math.min(2, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount / 5e8));
    tesseractGain *= (1 + 4 / 100 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[205] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[206] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[207]) + 3 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[208]);
    tesseractGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[240] * Math.max(0.1, 1 / 20 * Math.log(speed + 0.01) / Math.log(10)));
    tesseractGain *= (1 + 6 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[250] + 10 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[251]);
    tesseractGain *= (1 + 3 / 200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.seasonPassLevel);
    let hypercubeGain = (effectiveScore >= 1e9) ? 1 : 0;
    hypercubeGain *= Math.pow(1 + Math.max(0, (effectiveScore - 1e9)) / 1e8, .5);
    hypercubeGain *= Math.pow(Math.min(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter / 10), 2) * (1 + (1 / 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[204] + 1 / 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[211] + 1 / 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[218]) * Math.max(0, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter / 10 - 1));
    hypercubeGain *= (1 + 0.00045 * corruptionLevelSum * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[3]);
    if (effectiveScore > 10e12 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[10] > 0) {
        hypercubeGain *= 2;
    }
    if (effectiveScore > 100e12 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[15] > 0) {
        hypercubeGain *= 2.25;
    }
    hypercubeGain *= _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.platonicBonusMultiplier[2];
    hypercubeGain *= (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube1 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube2 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube3 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube4);
    hypercubeGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[216] * Math.min(2, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount / 1e9));
    hypercubeGain *= (1 + 4 / 100 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[212] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[213] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[214]) + 3 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[215]);
    hypercubeGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[240] * Math.max(0.1, 1 / 20 * Math.log(speed + 0.01) / Math.log(10)));
    hypercubeGain *= (1 + 6 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[250] + 10 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[251]);
    let platonicGain = (effectiveScore >= 1.337e12) ? 1 : 0;
    platonicGain *= Math.pow(1 + Math.max(0, effectiveScore - 1.337e12) / 1.337e11, .75);
    platonicGain *= Math.pow(Math.min(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter / 10), 2) * (1 + (1 / 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[204] + 1 / 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[211] + 1 / 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[218]) * Math.max(0, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter / 10 - 1));
    if (effectiveScore > 2.5e12) {
        platonicGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[4] / 50);
    }
    if (effectiveScore > 20e12 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[10] > 0) {
        platonicGain *= 2;
    }
    if (effectiveScore > 250e12 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[15] > 0) {
        platonicGain *= 2.25;
    }
    platonicGain *= _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.platonicBonusMultiplier[3];
    platonicGain *= (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube1 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube2 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube3 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.challenge15Rewards.cube4);
    platonicGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[223] * Math.min(2, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount / 1.337e9));
    platonicGain *= (1 + 4 / 100 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[219] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[220] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[221]) + 3 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[222]);
    platonicGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[196] * 1 / 5000 * break_infinity_js__WEBPACK_IMPORTED_MODULE_4__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.add(1), 10));
    platonicGain *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[240] * Math.max(0.1, 1 / 20 * Math.log(speed + 0.01) / Math.log(10)));
    platonicGain *= (1 + 6 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[250] + 10 / 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[251]);
    return [cubeBank, Math.floor(baseScore), corruptionMultiplier, Math.floor(effectiveScore), Math.floor(cubeGain), Math.floor(tesseractGain), Math.floor(hypercubeGain), Math.floor(platonicGain)];
};
const dailyResetCheck = () => {
    if (!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.dayCheck) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.dayCheck = new Date();
        console.log('date successfully calibrated!');
    }
    else if (typeof _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.dayCheck === 'string') {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.dayCheck = new Date(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.dayCheck);
    }
    const d = new Date();
    const h = d.getHours();
    const m = d.getMinutes();
    const s = d.getSeconds();
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.dayTimer = (60 * 60 * 24) - (60 * 60 * h) - (60 * m) - s;
    if (d.getDate() !== _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.dayCheck.getDate() || d.getMonth() !== _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.dayCheck.getMonth() || d.getFullYear() !== _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.dayCheck.getFullYear()) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.dayCheck = new Date();
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeQuarkDaily = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractQuarkDaily = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeQuarkDaily = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeOpenedDaily = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractOpenedDaily = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeOpenedDaily = 0;
        document.getElementById('cubeQuarksOpenRequirement').style.display = "block";
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[11] > 0) {
            document.getElementById('tesseractQuarksOpenRequirement').style.display = "block";
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[13] > 0) {
            document.getElementById('hypercubeQuarksOpenRequirement').style.display = "block";
        }
    }
};


/***/ }),
/* 10 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateTalismanCostDisplay": () => /* binding */ updateTalismanCostDisplay,
/* harmony export */   "toggleTalismanBuy": () => /* binding */ toggleTalismanBuy,
/* harmony export */   "updateTalismanInventory": () => /* binding */ updateTalismanInventory,
/* harmony export */   "buyTalismanResources": () => /* binding */ buyTalismanResources,
/* harmony export */   "showTalismanEffect": () => /* binding */ showTalismanEffect,
/* harmony export */   "showTalismanPrices": () => /* binding */ showTalismanPrices,
/* harmony export */   "showEnhanceTalismanPrices": () => /* binding */ showEnhanceTalismanPrices,
/* harmony export */   "showRespecInformation": () => /* binding */ showRespecInformation,
/* harmony export */   "changeTalismanModifier": () => /* binding */ changeTalismanModifier,
/* harmony export */   "respecTalismanConfirm": () => /* binding */ respecTalismanConfirm,
/* harmony export */   "respecTalismanCancel": () => /* binding */ respecTalismanCancel,
/* harmony export */   "updateTalismanAppearance": () => /* binding */ updateTalismanAppearance,
/* harmony export */   "buyTalismanLevels": () => /* binding */ buyTalismanLevels,
/* harmony export */   "buyTalismanEnhance": () => /* binding */ buyTalismanEnhance
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _Challenges__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11);





const talismanResourceCosts = {
    shard: {
        obtainium: 1e13,
        offerings: 1e2,
        name: "Talisman Shard"
    },
    commonFragment: {
        obtainium: 1e14,
        offerings: 1e4,
        name: "Common Fragment"
    },
    uncommonFragment: {
        obtainium: 1e16,
        offerings: 1e5,
        name: "Uncommon Fragment"
    },
    rareFragment: {
        obtainium: 1e18,
        offerings: 1e6,
        name: "Rare Fragment"
    },
    epicFragment: {
        obtainium: 1e20,
        offerings: 1e7,
        name: "Epic Fragment"
    },
    legendaryFragment: {
        obtainium: 1e22,
        offerings: 1e8,
        name: "Legendary Fragment"
    },
    mythicalFragment: {
        obtainium: 1e24,
        offerings: 1e9,
        name: "Mythical Fragment"
    },
};
const getTalismanResourceInfo = (type, percentage = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.buyTalismanShardPercent) => {
    const obtainiumCost = talismanResourceCosts[type].obtainium;
    const offeringCost = talismanResourceCosts[type].offerings;
    const maxBuyObtainium = Math.max(1, Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints / obtainiumCost));
    const maxBuyOffering = Math.max(1, Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards / (offeringCost)));
    const amountToBuy = Math.max(1, Math.floor(percentage / 100 * Math.min(maxBuyObtainium, maxBuyOffering)));
    const canBuy = (obtainiumCost <= _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints && offeringCost <= _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards) ? true : false;
    return {
        canBuy: canBuy,
        buyAmount: amountToBuy,
        obtainiumCost: obtainiumCost * amountToBuy,
        offeringCost: offeringCost * amountToBuy
    };
};
const updateTalismanCostDisplay = (type, percentage = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.buyTalismanShardPercent) => {
    const el = document.getElementById("talismanFragmentCost");
    const talismanCostInfo = getTalismanResourceInfo(type, percentage);
    const TalismanName = talismanResourceCosts[type].name;
    el.textContent = "Cost to buy " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(talismanCostInfo.buyAmount) + " " + TalismanName + (talismanCostInfo.buyAmount > 1 ? "s" : "") + ": " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(talismanCostInfo.obtainiumCost) + " Obtainium and " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(talismanCostInfo.offeringCost) + " offerings.";
};
const toggleTalismanBuy = (i = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.buyTalismanShardPercent) => {
    document.getElementById("talismanTen").style.backgroundColor = "#171717";
    document.getElementById("talismanTwentyFive").style.backgroundColor = "#171717";
    document.getElementById("talismanFifty").style.backgroundColor = "#171717";
    document.getElementById("talismanHundred").style.backgroundColor = "#171717";
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.buyTalismanShardPercent = i;
    let x = "Ten";
    if (i === 25) {
        x = "TwentyFive";
    }
    if (i === 50) {
        x = "Fifty";
    }
    if (i === 100) {
        x = "Hundred";
    }
    document.getElementById("talisman" + x).style.backgroundColor = "green";
};
const updateTalismanInventory = () => {
    document.getElementById("talismanShardInventory").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanShards);
    document.getElementById("commonFragmentInventory").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.commonFragments);
    document.getElementById("uncommonFragmentInventory").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.uncommonFragments);
    document.getElementById("rareFragmentInventory").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.rareFragments);
    document.getElementById("epicFragmentInventory").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.epicFragments);
    document.getElementById("legendaryFragmentInventory").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.legendaryFragments);
    document.getElementById("mythicalFragmentInventory").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.mythicalFragments);
};
const buyTalismanResources = (type, percentage = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.buyTalismanShardPercent) => {
    const talismanResourcesData = getTalismanResourceInfo(type, percentage);
    if (talismanResourcesData.canBuy) {
        if (type === 'shard') {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanShards += talismanResourcesData.buyAmount;
        }
        else {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[type + 's'] += talismanResourcesData.buyAmount;
        }
        if (type === 'mythicalFragment' && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.mythicalFragments >= 1e25 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[239] < 1) {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_4__.achievementaward)(239);
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints -= talismanResourcesData.obtainiumCost;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards -= talismanResourcesData.offeringCost;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints < 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints = 0;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards < 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards = 0;
        }
    }
    updateTalismanCostDisplay(type, percentage);
    updateTalismanInventory();
};
const showTalismanEffect = (i) => {
    document.getElementById("talismanlevelup").style.display = "none";
    document.getElementById("talismanEffect").style.display = "block";
    document.getElementById("talismanrespec").style.display = "none";
    const a = document.getElementById("talismanSummary");
    const b = document.getElementById("talismanBonus");
    const c = document.getElementById("talismanRune1Effect");
    const d = document.getElementById("talismanRune2Effect");
    const e = document.getElementById("talismanRune3Effect");
    const f = document.getElementById("talismanRune4Effect");
    const g = document.getElementById("talismanRune5Effect");
    const h = document.getElementById("talismanMythicEffect");
    switch (i) {
        case 1:
            a.textContent = "=-=-=-= Exemption Talisman Effects =-=-=-=";
            b.textContent = "Taxes -" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(10 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[1 - 1] - 1)) + "%";
            c.textContent = "Bonus Speed Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman1Effect[1], 2, true);
            d.textContent = "Bonus Duplication Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman1Effect[2], 2, true);
            e.textContent = "Bonus Prism Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman1Effect[3], 2, true);
            f.textContent = "Bonus Thrift Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman1Effect[4], 2, true);
            g.textContent = "Bonus SI Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman1Effect[5], 2, true);
            h.textContent = "Mythic Effect: +400 Duplication Rune Levels!";
            break;
        case 2:
            a.textContent = "=-=-=-= Chronos Talisman Effects =-=-=-=";
            b.textContent = "Gain +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(10 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[2 - 1] - 1)) + "% Global Speed Acceleration.";
            c.textContent = "Bonus Speed Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman2Effect[1], 2, true);
            d.textContent = "Bonus Duplication Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman2Effect[2], 2, true);
            e.textContent = "Bonus Prism Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman2Effect[3], 2, true);
            f.textContent = "Bonus Thrift Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman2Effect[4], 2, true);
            g.textContent = "Bonus SI Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman2Effect[5], 2, true);
            h.textContent = "Mythic Effect: +400 Speed Rune Levels!";
            break;
        case 3:
            a.textContent = "=-=-=-= Midas Talisman Effects =-=-=-=";
            b.textContent = "Rune Blessing bonuses +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(10 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[3 - 1] - 1)) + "%";
            c.textContent = "Bonus Speed Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman3Effect[1], 2, true);
            d.textContent = "Bonus Duplication Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman3Effect[2], 2, true);
            e.textContent = "Bonus Prism Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman3Effect[3], 2, true);
            f.textContent = "Bonus Thrift Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman3Effect[4], 2, true);
            g.textContent = "Bonus SI Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman3Effect[5], 2, true);
            h.textContent = "Mythic Effect: +400 Thrift Rune Levels!";
            break;
        case 4:
            a.textContent = "=-=-=-= Metaphysics Talisman Effects =-=-=-=";
            b.textContent = "Talismans' Bonus Rune Levels +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(0.05 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[4 - 1] - 1), 2) + " per level";
            c.textContent = "Bonus Speed Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman4Effect[1], 2, true);
            d.textContent = "Bonus Duplication Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman4Effect[2], 2, true);
            e.textContent = "Bonus Prism Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman4Effect[3], 2, true);
            f.textContent = "Bonus Thrift Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman4Effect[4], 2, true);
            g.textContent = "Bonus SI Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman4Effect[5], 2, true);
            h.textContent = "Mythic Effect: +400 Prism Rune Levels!";
            break;
        case 5:
            a.textContent = "=-=-=-= Polymath Talisman Effects =-=-=-=";
            b.textContent = "Rune Spirit Bonuses +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[5 - 1] - 1)) + "%";
            c.textContent = "Bonus Speed Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman5Effect[1], 2, true);
            d.textContent = "Bonus Duplication Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman5Effect[2], 2, true);
            e.textContent = "Bonus Prism Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman5Effect[3], 2, true);
            f.textContent = "Bonus Thrift Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman5Effect[4], 2, true);
            g.textContent = "Bonus SI Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman5Effect[5], 2, true);
            h.textContent = "Mythic Effect: +400 SI Rune Levels!";
            break;
        case 6:
            a.textContent = "=-=-=-= Mortuus Est Talisman Effects =-=-=-=";
            b.textContent = "Bonus Ant Levels: +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(2 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[6 - 1] - 1));
            c.textContent = "Bonus Speed Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman6Effect[1], 2, true);
            d.textContent = "Bonus Duplication Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman6Effect[2], 2, true);
            e.textContent = "Bonus Prism Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman6Effect[3], 2, true);
            f.textContent = "Bonus Thrift Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman6Effect[4], 2, true);
            g.textContent = "Bonus SI Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman6Effect[5], 2, true);
            h.textContent = "Mythic Effect: Gain ant speed based on your total rune level!";
            break;
        case 7:
            a.textContent = "=-=-=-= Plastic Talisman Effects =-=-=-=";
            b.textContent = "Gain 1x normal production";
            c.textContent = "Bonus Speed Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman7Effect[1], 2, true);
            d.textContent = "Bonus Duplication Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman7Effect[2], 2, true);
            e.textContent = "Bonus Prism Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman7Effect[3], 2, true);
            f.textContent = "Bonus Thrift Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman7Effect[4], 2, true);
            g.textContent = "Bonus SI Rune Levels: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman7Effect[5], 2, true);
            h.textContent = "Mythic Effect: +2 Quarks per Hour on Export!";
            break;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[i - 1] !== 6) {
        h.textContent = "Get Max Enhance for a Mythical bonus effect!";
    }
};
const showTalismanPrices = (i) => {
    document.getElementById("talismanEffect").style.display = "none";
    document.getElementById("talismanlevelup").style.display = "block";
    document.getElementById("talismanrespec").style.display = "none";
    const a = document.getElementById("talismanShardCost");
    const b = document.getElementById("talismanCommonFragmentCost");
    const c = document.getElementById("talismanUncommonFragmentCost");
    const d = document.getElementById("talismanRareFragmentCost");
    const e = document.getElementById("talismanEpicFragmentCost");
    const f = document.getElementById("talismanLegendaryFragmentCost");
    const g = document.getElementById("talismanMythicalFragmentCost");
    document.getElementById("talismanLevelUpSummary").textContent = "-=-=- Resources Required to Level Up -=-=-";
    document.getElementById("talismanLevelUpSummary").style.color = "silver";
    let m = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talismanLevelCostMultiplier[i];
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] >= 120) {
        m *= (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 90) / 30;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] >= 150) {
        m *= (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 120) / 30;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] >= 180) {
        m *= (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 170) / 10;
    }
    a.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * Math.max(0, Math.floor(1 + 1 / 8 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1], 3))));
    b.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * Math.max(0, Math.floor(1 + 1 / 32 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 30, 3))));
    c.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * Math.max(0, Math.floor(1 + 1 / 384 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 60, 3))));
    d.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * Math.max(0, Math.floor(1 + 1 / 500 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 90, 3))));
    e.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * Math.max(0, Math.floor(1 + 1 / 375 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 120, 3))));
    f.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * Math.max(0, Math.floor(1 + 1 / 192 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 150, 3))));
    g.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * Math.max(0, Math.floor(1 + 1 / 1280 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 150, 3))));
};
const showEnhanceTalismanPrices = (i) => {
    document.getElementById("talismanEffect").style.display = "none";
    document.getElementById("talismanlevelup").style.display = "block";
    document.getElementById("talismanrespec").style.display = "none";
    const a = document.getElementById("talismanShardCost");
    const b = document.getElementById("talismanCommonFragmentCost");
    const c = document.getElementById("talismanUncommonFragmentCost");
    const d = document.getElementById("talismanRareFragmentCost");
    const e = document.getElementById("talismanEpicFragmentCost");
    const f = document.getElementById("talismanLegendaryFragmentCost");
    const g = document.getElementById("talismanMythicalFragmentCost");
    document.getElementById("talismanLevelUpSummary").textContent = "=-=-= Resources Required to ENHANCE =-=-=";
    document.getElementById("talismanLevelUpSummary").style.color = "gold";
    const array = [_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.commonTalismanEnhanceCost, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.uncommonTalismanEnchanceCost, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.rareTalismanEnchanceCost, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.epicTalismanEnhanceCost, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.legendaryTalismanEnchanceCost, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.mythicalTalismanEnchanceCost];
    const index = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[i - 1];
    const costArray = array[index - 1];
    const m = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talismanLevelCostMultiplier[i];
    a.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * costArray[1]);
    b.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * costArray[2]);
    c.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * costArray[3]);
    d.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * costArray[4]);
    e.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * costArray[5]);
    f.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * costArray[6]);
    g.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * costArray[7]);
};
const showRespecInformation = (i) => {
    _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talismanRespec = i;
    const num = ["One", "Two", "Three", "Four", "Five", "Six", "Seven"];
    document.getElementById("talismanEffect").style.display = "none";
    document.getElementById("talismanlevelup").style.display = "none";
    document.getElementById("talismanrespec").style.display = "block";
    const runeName = ["Speed Rune", "Duplication Rune", "Prism Rune", "Thrift Rune", "SI Rune"];
    const runeModifier = ["Positive", "Positive", "Positive", "Positive"];
    if (i <= 7) {
        for (let k = 1; k <= 5; k++) {
            _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.mirrorTalismanStats[k] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player["talisman" + num[i - 1]][k];
        }
        document.getElementById("confirmTalismanRespec").textContent = "Confirm [-100,000 Offerings]";
    }
    if (i === 8) {
        for (let k = 1; k <= 5; k++) {
            _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.mirrorTalismanStats[k] = 1;
        }
        document.getElementById("confirmTalismanRespec").textContent = "Confirm ALL [-400,000 Offerings]";
    }
    for (let j = 1; j <= 5; j++) {
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.mirrorTalismanStats[j] === 1) {
            document.getElementById("talismanRespecButton" + j).style.border = "2px solid limegreen";
            runeModifier[j - 1] = "Positive";
        }
        else if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.mirrorTalismanStats[j] === -1) {
            document.getElementById("talismanRespecButton" + j).style.border = "2px solid crimson";
            runeModifier[j - 1] = "Negative";
        }
        document.getElementById("talismanRespecButton" + j).textContent = runeName[j - 1] + ": " + runeModifier[j - 1];
    }
    document.getElementById("confirmTalismanRespec").style.display = "none";
};
const changeTalismanModifier = (i) => {
    const runeName = [null, "Speed Rune", "Duplication Rune", "Prism Rune", "Thrift Rune", "SI Rune"];
    const el = document.getElementById("talismanRespecButton" + i);
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.mirrorTalismanStats[i] === 1) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.mirrorTalismanStats[i] = (-1);
        el.textContent = runeName[i] + ": Negative";
        el.style.border = "2px solid crimson";
    }
    else {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.mirrorTalismanStats[i] = (1);
        el.textContent = runeName[i] + ": Positive";
        el.style.border = "2px solid limegreen";
    }
    const checkSum = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.mirrorTalismanStats.reduce(function (a, b) {
        return a + b;
    }, 0);
    if (checkSum === 1) {
        document.getElementById("confirmTalismanRespec").style.display = "block";
    }
    else {
        document.getElementById("confirmTalismanRespec").style.display = "none";
    }
};
const respecTalismanConfirm = (i) => {
    const num = [null, "One", "Two", "Three", "Four", "Five", "Six", "Seven"];
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards >= 100000 && i <= 7) {
        for (let j = 1; j <= 5; j++) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player["talisman" + num[i]][j] = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.mirrorTalismanStats[j];
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards -= 100000;
        document.getElementById("confirmTalismanRespec").style.display = "none";
        document.getElementById("talismanrespec").style.display = "none";
        document.getElementById("talismanEffect").style.display = "block";
        showTalismanEffect(i);
    }
    else if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards >= 400000 && i === 8) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards -= 400000;
        for (let j = 1; j <= 7; j++) {
            for (let k = 1; k <= 5; k++) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player["talisman" + num[j]][k] = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.mirrorTalismanStats[k];
            }
        }
        document.getElementById("confirmTalismanRespec").style.display = "none";
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateRuneLevels)();
};
const respecTalismanCancel = (i) => {
    document.getElementById("talismanrespec").style.display = "none";
    if (i <= 7) {
        document.getElementById("talismanEffect").style.display = "block";
        showTalismanEffect(i);
    }
};
const updateTalismanAppearance = (i) => {
    const el = document.getElementById("talisman" + i);
    const la = document.getElementById("talisman" + i + "level");
    const rarity = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[i - 1];
    if (rarity === 1) {
        el.style.border = "4px solid white";
        la.style.color = "white";
    }
    if (rarity === 2) {
        el.style.border = "4px solid limegreen";
        la.style.color = "limegreen";
    }
    if (rarity === 3) {
        el.style.border = "4px solid lightblue";
        la.style.color = "lightblue";
    }
    if (rarity === 4) {
        el.style.border = "4px solid plum";
        la.style.color = "plum";
    }
    if (rarity === 5) {
        el.style.border = "4px solid orange";
        la.style.color = "orange";
    }
    if (rarity === 6) {
        el.style.border = "4px solid crimson";
        la.style.color = "crimson";
    }
};
const buyTalismanLevels = (i, auto = false) => {
    let max = 1;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount > 0) {
        max = 30;
    }
    for (let j = 1; j <= max; j++) {
        let checkSum = 0;
        let priceMult = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talismanLevelCostMultiplier[i];
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] >= 120) {
            priceMult *= (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 90) / 30;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] >= 150) {
            priceMult *= (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 120) / 30;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] >= 180) {
            priceMult *= (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 170) / 10;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] < (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[i - 1] * 30 + 6 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_2__.CalcECC)('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[13]) + Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[200] / 400))) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanShards >= priceMult * Math.max(0, Math.floor(1 + 1 / 8 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1], 3)))) {
                checkSum++;
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.commonFragments >= priceMult * Math.max(0, Math.floor(1 + 1 / 32 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 30, 3)))) {
                checkSum++;
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.uncommonFragments >= priceMult * Math.max(0, Math.floor(1 + 1 / 384 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 60, 3)))) {
                checkSum++;
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.rareFragments >= priceMult * Math.max(0, Math.floor(1 + 1 / 500 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 90, 3)))) {
                checkSum++;
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.epicFragments >= priceMult * Math.max(0, Math.floor(1 + 1 / 375 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 120, 3)))) {
                checkSum++;
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.legendaryFragments >= priceMult * Math.max(0, Math.floor(1 + 1 / 192 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 150, 3)))) {
                checkSum++;
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.mythicalFragments >= priceMult * Math.max(0, Math.floor(1 + 1 / 1280 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 150, 3)))) {
                checkSum++;
            }
        }
        if (checkSum === 7) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanShards -= priceMult * Math.max(0, Math.floor(1 + 1 / 8 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1], 3)));
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.commonFragments -= priceMult * Math.max(0, Math.floor(1 + 1 / 32 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 30, 3)));
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.uncommonFragments -= priceMult * Math.max(0, Math.floor(1 + 1 / 384 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 60, 3)));
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.rareFragments -= priceMult * Math.max(0, Math.floor(1 + 1 / 500 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 90, 3)));
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.epicFragments -= priceMult * Math.max(0, Math.floor(1 + 1 / 375 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 120, 3)));
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.legendaryFragments -= priceMult * Math.max(0, Math.floor(1 + 1 / 192 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 150, 3)));
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.mythicalFragments -= priceMult * Math.max(0, Math.floor(1 + 1 / 1280 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] - 150, 3)));
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels[i - 1] += 1;
        }
        if (checkSum !== 7) {
            break;
        }
    }
    updateTalismanInventory();
    if (!auto) {
        showTalismanPrices(i);
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateRuneLevels)();
};
const buyTalismanEnhance = (i, auto = false) => {
    let checkSum = 0;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[i - 1] < 6) {
        const priceMult = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talismanLevelCostMultiplier[i];
        const array = [_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.commonTalismanEnhanceCost, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.uncommonTalismanEnchanceCost, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.rareTalismanEnchanceCost, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.epicTalismanEnhanceCost, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.legendaryTalismanEnchanceCost, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.mythicalTalismanEnchanceCost];
        const index = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[i - 1] - 1;
        const costArray = array[index];
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.commonFragments >= priceMult * costArray[2]) {
            checkSum++;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.uncommonFragments >= priceMult * costArray[3]) {
            checkSum++;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.rareFragments >= priceMult * costArray[4]) {
            checkSum++;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.epicFragments >= priceMult * costArray[5]) {
            checkSum++;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.legendaryFragments >= priceMult * costArray[6]) {
            checkSum++;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.mythicalFragments >= priceMult * costArray[7]) {
            checkSum++;
        }
        if (checkSum === 6) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.commonFragments -= (priceMult * costArray[2]);
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.uncommonFragments -= (priceMult * costArray[3]);
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.rareFragments -= (priceMult * costArray[4]);
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.epicFragments -= (priceMult * costArray[5]);
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.legendaryFragments -= (priceMult * costArray[6]);
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.mythicalFragments -= (priceMult * costArray[7]);
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[i - 1] += 1;
        }
        updateTalismanAppearance(i);
        updateTalismanInventory();
        if (!auto) {
            showEnhanceTalismanPrices(i);
        }
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateRuneLevels)();
    }
};


/***/ }),
/* 11 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "totalachievementpoints": () => /* binding */ totalachievementpoints,
/* harmony export */   "resetachievementcheck": () => /* binding */ resetachievementcheck,
/* harmony export */   "challengeachievementcheck": () => /* binding */ challengeachievementcheck,
/* harmony export */   "buildingAchievementCheck": () => /* binding */ buildingAchievementCheck,
/* harmony export */   "ascensionAchievementCheck": () => /* binding */ ascensionAchievementCheck,
/* harmony export */   "achievementdescriptions": () => /* binding */ achievementdescriptions,
/* harmony export */   "achievementaward": () => /* binding */ achievementaward
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _UpdateHTML__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12);
/* harmony import */ var _Utility__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4);





const achievementpointvalues = [0,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    2, 8, 10, 2, 8, 10, 10,
    2, 8, 10, 10, 10, 10, 10,
    2, 4, 6, 8, 10, 10, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    1, 2, 4, 6, 8, 9, 10,
    10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10,
    20, 20, 20, 40, 60, 60, 100,
    20, 20, 40, 40, 60, 60, 100,
    20, 20, 40, 40, 60, 60, 100,
    20, 40, 40, 40, 60, 60, 100,
    40, 40, 40, 60, 60, 100, 100,
    40, 40, 60, 60, 100, 100, 100,
    20, 40, 40, 60, 60, 100, 100,
    40, 60, 100, 60, 100, 100, 40,
    40, 40, 40, 40, 40, 40, 40,
    40, 40, 40, 40, 100, 100, 0
];
const totalachievementpoints = achievementpointvalues.reduce((a, b) => a + b, 0);
const adesc = {
    adesc1: "A Loyal Employee: Hire your first worker.",
    adesc2: "Small Business: Hire 10 workers.",
    adesc3: "Now we're synergizing!: Hire 100 workers.",
    adesc4: "Gaining Redundancies: Hire 1,000 workers.",
    adesc5: "A cog in the machine: Hire 5,000 workers.",
    adesc6: "A nail in the machine: Hire 10,000 workers.",
    adesc7: "Are we even in the machine anymore?: Hire 20,000 workers.",
    adesc8: "STONKS!!!: Purchase 1 Investment.",
    adesc9: "Planning ahead: Purchase 10 Investments.",
    adesc10: "Inside Trading: Purchase 100 Investments.",
    adesc11: "Outside Trading?: Purchase 1,000 Investments.",
    adesc12: "Market Takeover: Purchase 5,000 Investments.",
    adesc13: "Trickle-Down Economics: Purchase 10,000 Investments.",
    adesc14: "Eliminated Regulation: Purchase 20,000 Investments.",
    adesc15: "Stationery!: Build 1 Printer.",
    adesc16: "Printing Press: Build 10 Printers.",
    adesc17: "It prints free money!: Build 100 Printers.",
    adesc18: "Solving Our Debts: Build 1,000 Printers.",
    adesc19: "Monopolizing the market: Build 5,000 Printers.",
    adesc20: "We're running out of Ink!: Build 10,000 Printers.",
    adesc21: "3D-printing the universe: Build 20,000 Printers.",
    adesc22: "A national treasure: Establish 1 Coin Mint.",
    adesc23: "Now with competition!: Establish 10 Coin Mints.",
    adesc24: "Counterfeiting with Style!: Establish 100 Coin Mints.",
    adesc25: "Why do we need all these?: Establish 1000 Coin Mints.",
    adesc26: "No really, why??: Establish 5,000 Coin Mints.",
    adesc27: "Is no one to stop us???: Establish 10,000 Coin Mints.",
    adesc28: "Oh well, time to mint: Establish 20,000 Coin Mints.",
    adesc29: "Newton's Apprentice: Create 1 Alchemy.",
    adesc30: "Lab Work: Create 10 Alchemies.",
    adesc31: "Satanic Becomings: Create 66 Alchemies.",
    adesc32: "Satan Incarnate: Create 666 Alchemies.",
    adesc33: "Is this more demonic?: Create 6,666 Alchemies.",
    adesc34: "Golden Paradise: Create 17,777 Alchemies.",
    adesc35: "Unlocking secrets to the world: Create 42,777 Alchemies.",
    adesc36: "Leveling up: Prestige for at least 1 Diamond.",
    adesc37: "High-Tiered: Prestige for at least 1e+6 Diamonds.",
    adesc38: "Highly Regarded: Prestige for at least 1e+100 Diamonds.",
    adesc39: "Prestigious: Prestige for at least 1e+1000 Diamonds.",
    adesc40: "Legendary: Prestige for at least 1e+10000 Diamonds.",
    adesc41: "Divine: Prestige for at least 1e+77777 Diamonds.",
    adesc42: "Perfectly Respected: Prestige for at least 1e+250000 Diamonds.",
    adesc43: "A Simple Detour: Transcend for at least 1 Mythos.",
    adesc44: "Tunnel Vision: Transcend for at least 1e+6 Mythos.",
    adesc45: "Risen from the Ashes: Transcend for at least 1e+50 Mythos.",
    adesc46: "Paradigm Shift: Transcend for at least 1e+308 Mythos.",
    adesc47: "Preparation: Transcend for at least 1e+2000 Mythos.",
    adesc48: "Revising the Plan: Transcend for at least 1e+25000 Mythos.",
    adesc49: "Leaving the Universe: Transcend for at least 1e+100000 Mythos.",
    adesc50: "Going Quantum: Reincarnate for at least 1 Particle.",
    adesc51: "Tunneling Vision: Reincarnate for at least 100,000 Particles.",
    adesc52: "Simulating the World: Reincarnate for at least 1e+30 Particles.",
    adesc53: "Multidimensional Creation: Reincarnate for at least 1e+200 Particles.",
    adesc54: "Lepton Dance: Reincarnate for at least 1e+1500 Particles.",
    adesc55: "Do we have enough yet?: Reincarnate for at least 1e+5000 Particles.",
    adesc56: "I Feel Luck in My Cells: Reincarnate for at least 1e+7777 Particles.",
    adesc57: "One Way Only: Prestige without buying multipliers.",
    adesc58: "Authentic Shifting: Transcend without having bought a multiplier.",
    adesc59: "The Singularity: Reincarnate without having bought a multiplier.",
    adesc60: "Gotta go SLOW!: Prestige without buying Accelerators or Accelerator Boosts.",
    adesc61: "I'm really going slow: Transcend without having bought Accelerators or Boosts.",
    adesc62: "Are we there yet?: Reincarnate without having bought Accelerators or Boosts.",
    adesc63: "A careful search for Diamonds: Get 1e120,000 Coins in [Reduced Diamonds] without buying Accelerators or Boosts.",
    adesc64: "Very Based: Prestige without purchasing Coin Upgrades.",
    adesc65: "Miser: Transcend without purchasing Coin Upgrades.",
    adesc66: "True Miser: Transcend without purchasing Coin or Diamond Upgrades.",
    adesc67: "Coinless Pursuit: Reincarnate without purchasing Coin Upgrades.",
    adesc68: "Diamonds don't matter to me!: Reincarnate without purchasing Coin or Diamond Upgrades.",
    adesc69: "Leave nothing behind: Reincarnate without purchasing Coin, Diamond or Mythos Upgrades.",
    adesc70: "Leave NOTHING behind.: Reincarnate without purchasing Coin, Diamond, Mythos, or Generator Upgrades.",
    adesc71: "Out of Order: Buy Generator Upgrade Row 1, #2 first in a transcension (IV -> III)",
    adesc72: "More Out of Order: Buy Generator Upgrade Row 1, #3 first in a transcension (III -> II)",
    adesc73: "Four's a Company: Buy Generator Upgrade Row 1, #4 first in a transcension (II -> I)",
    adesc74: "Five's a Croud: Buy Generator Upgrade Row 1, #5 first in a transcension (I -> V)",
    adesc75: "Vaseline without the Machine: Exit [No Multiplier] with at least 1e1000 coins and without any of the row 1 generator upgrades.",
    adesc76: "Rage against the Machine: Exit [No Accelerator] with at least 1e1000 coins and without any of the row 1 generator upgrades.",
    adesc77: "Amish Paradise: Exit [No Shards] with at least 1e99,999 coins and without any of the row 1 generator upgrades.",
    adesc78: "Single-Cell: Complete [No Multiplier] once.",
    adesc79: "Solidarity: Complete [No Multiplier] three times.",
    adesc80: "Duplication-Free!: Complete [No Multiplier] five times.",
    adesc81: "Multitasking Challenged: Complete [No Multiplier] ten times.",
    adesc82: "No Deaths: Complete [No Multiplier] twenty times.",
    adesc83: "Population One: Complete [No Multiplier] fifty times.",
    adesc84: "Insert Another Token: Complete [No Multiplier] seventy-five times.",
    adesc85: "Slow Start: Complete [No Accelerator] once",
    adesc86: "Respawn Rate -12%: Complete [No Accelerator] three times.",
    adesc87: "Putting the Breaks On: Complete [No Accelerator] five times.",
    adesc88: "Racing a Sloth...: Complete [No Accelerator] ten times.",
    adesc89: "... and Losing.: Complete [No Accelerator] twenty times.",
    adesc90: "Planck Distance Traveled: Complete [No Accelerator] fifty times.",
    adesc91: "Inverse-Ackermann Growth: Complete [No Accelerator] seventy-five times.",
    adesc92: "Intact: Complete [No Shards] once.",
    adesc93: "Augments are Stupid!: Complete [No Shards] three times.",
    adesc94: "Grandmasters are Brilliant!: Complete [No Shards] five times.",
    adesc95: "Gotta get those Grandmasters Stronger: Complete [No Shards] ten times.",
    adesc96: "Summoning Enhancements: Complete [No Shards] twenty times.",
    adesc97: "Magic 99/99: Complete [No Shards] fifty times.",
    adesc98: "Perfect Foresight: Complete [No Shards] seventy-five times.",
    adesc99: "Inflation: Complete [Cost+] once.",
    adesc100: "Hyperinflation: Complete [Cost+] three times.",
    adesc101: "Market Bubble: Complete [Cost+] five times.",
    adesc102: "Bull Market: Complete [Cost+] ten times.",
    adesc103: "Wealth Inequality: Complete [Cost+] twenty times.",
    adesc104: "Severe Overpay: Complete [Cost+] fifty times.",
    adesc105: "Societal Collapse: Complete [Cost+] seventy-five times.",
    adesc106: "Excavation: Complete [Reduced Diamonds] once.",
    adesc107: "Digging Deep: Complete [Reduced Diamonds] three times.",
    adesc108: "Frack As Needed: Complete [Reduced Diamonds] five times.",
    adesc109: "Unobtainium Pickaxe: Complete [Reduced Diamonds] ten times.",
    adesc110: "Fortune III: Complete [Reduced Diamonds] twenty times.",
    adesc111: "Every kiss...: Complete [Reduced Diamonds] fifty times.",
    adesc112: "...begins with K.: Complete [Reduced Diamonds] seventy-five times.",
    adesc113: "Tax evasion!: Complete {[Tax+]} once.",
    adesc114: "Keeping up with the Joneses: Complete {[Tax+]} twice.",
    adesc115: "Offshore deposits: Complete {[Tax+]} three times.",
    adesc116: "Bribing officials: Complete {[Tax+]} five times.",
    adesc117: "Becoming President: Complete {[Tax+]} ten times.",
    adesc118: "Charitable Donation: Complete {[Tax+]} fifteen times.",
    adesc119: "IRS Audit: Complete {[Tax+]} twenty-five times.",
    adesc120: "Is there anybody in there?: Complete {[No Accelerator/Multiplier]} once.",
    adesc121: "Human being: Complete {[No Accelerator/Multiplier]} twice.",
    adesc122: "Interdimensional: Complete {[No Accelerator/Multiplier]} three times.",
    adesc123: "A slow nickel: Complete {[No Accelerator/Multiplier]} five times.",
    adesc124: "Multipliers don't even work 0/5: Complete {[No Accelerator/Multiplier]} ten times.",
    adesc125: "Accelerators don't even work -5/5: Complete {[No Accelerator/Multiplier]} fifteen times.",
    adesc126: "ACCELERATOR BOOSTS DON'T EVEN WORK -100/5: Complete {[No Accelerator/Multiplier]} twenty-five times.",
    adesc127: "I hate this challenge: Complete Cost++ Once.",
    adesc128: "A costly mistake: Complete Cost++ Twice.",
    adesc129: "Impetus: Complete Cost++ Three Times.",
    adesc130: "Are you broke yet? Complete Cost++ Five Times.",
    adesc131: "The world of Finance: Complete Cost++ Ten Times.",
    adesc132: "Marginal Gains: Complete Cost++ Twenty Times.",
    adesc133: "I buy these: Complete Cost++ Twenty-Five Times.",
    adesc134: "Agnostic: Complete No Runes Once.",
    adesc135: "Ant-i Runes: Complete No Runes Twice.",
    adesc136: "Isn't it getting tiresome?: Complete No Runes Three Times.",
    adesc137: "Machine does not accept offerings: Complete No Runes Five Times.",
    adesc138: "Runes Suck 1/5: Complete No Runes Ten Times.",
    adesc139: "I didn't even notice Prism was gone: Complete No Runes Twenty Times.",
    adesc140: "Atheist: Complete No Runes Twenty-Five Times.",
    adesc141: "Sadism: Complete {[Sadistic I]} Once.",
    adesc142: "Masochism: Complete {[Sadistic I]} Twice.",
    adesc143: "Insanity: Complete {[Sadistic I]} Three Times.",
    adesc144: "How? Complete {[Sadistic I]} Five Times.",
    adesc145: "Why? Complete {[Sadistic I]} Ten Times.",
    adesc146: "Descend: Complete {[Sadistic I]} Twenty Times.",
    adesc147: "End of the Universe: Complete {[Sadistic I]} Twenty-Five Times.",
    adesc148: "Gas gas gas: Purchase 5 Accelerators.",
    adesc149: "0 to 25: Purchase 25 Accelerators.",
    adesc150: "0 to 100: Purchase 100 Accelerators",
    adesc151: "Highway to Hell: Purchase 666 Accelerators.",
    adesc152: "Perhaps you should brake: Purchase 2,000 Accelerators.",
    adesc153: "Exit the vehicle now!: Purchase 12,500 Accelerators.",
    adesc154: "Faster than light: Purchase 100,000 Accelerators.",
    adesc155: "I've been duped!: Purchase 2 Multipliers.",
    adesc156: "Funhouse Mirrors: Purchase 20 Multipliers.",
    adesc157: "Friend of binary: Purchase 100 Multipliers.",
    adesc158: "Feeling the cost growth yet?: Purchase 500 Multipliers.",
    adesc159: "Perhaps you'll feel the cost now: Purchase 2,000 Multipliers.",
    adesc160: "Exponential Synergy: Purchase 12,500 Multipliers.",
    adesc161: "Cloned: Purchase 100,000 Multipliers.",
    adesc162: "Jerk > 0: Purchase 2 Accelerator Boosts.",
    adesc163: "Can't the speedometer move any faster?: Purchase 10 Accelerator Boosts.",
    adesc164: "50 G rotations: Purchase 50 Accelerator Boosts.",
    adesc165: "Dematerialize: Purchase 200 Accelerator Boosts.",
    adesc166: "Breaking the laws of Physics: Purchase 1,000 Accelerator Boosts.",
    adesc167: "Decayed Realism: Purchase 5,000 Accelerator Boosts.",
    adesc168: "Kinda fast: Purchase 15,000 Accelerator Boosts.",
    adesc169: "The Galactic Feast: Obtain 3 Galactic Crumbs.",
    adesc170: "Only the finest: Obtain 100,000 Galactic Crumbs.",
    adesc171: "Six-Course Meal: Obtain 666,666,666 Galactic Crumbs.",
    adesc172: "Accumulation of Food: Obtain 1e20 Galactic Crumbs.",
    adesc173: "Cookie Clicking: Obtain 1e40 Galactic Crumbs.",
    adesc174: "Unlimited Bread Sticks!: Obtain 1e500 Galactic Crumbs.",
    adesc175: "Restaurant at the end of the Universe: Obtain 1e2500 Galactic Crumbs.",
    adesc176: "Ant-icipation!: Amass a 2x Ant Multiplier through sacrifice and own a Tier 2 ant.",
    adesc177: "Ant-ecedent: Amass a 6x Ant Multiplier through sacrifice and own a Tier 3 ant.",
    adesc178: "Ants are friends, not food!: Amass a 20x Ant Multiplier through sacrifice and own a Tier 4 Ant.",
    adesc179: "Ant Devil?: Amass a 100x Ant Multiplier through sacrifice and own a Tier 5 Ant.",
    adesc180: "The world's best chef: Amass a 500x Ant Multiplier through sacrifice and own a Tier 6 Ant.",
    adesc181: "6 Michelin Stars: Amass a 6,666x Ant Multiplier through sacrifice and own a Tier 7 Ant.",
    adesc182: "Keys to the Restaurant at the end of the Universe: Amass a 77,777x Ant Multiplier through sacrifice and own a Tier 8 Ant.",
    adesc183: "Up: Ascend Once.",
    adesc184: "Double-Up: Ascend Twice.",
    adesc185: "Give me Ten!: Ascend Ten Times.",
    adesc186: "Give me a Hundred: Ascend 100 Times.",
    adesc187: "Give me a Thousand: Ascend 1,000 Times.",
    adesc188: "Give me some arbitrary number I: Ascend 14,142 Times.",
    adesc189: "Give me some arbitrary number II: Ascend 141,421 Times.",
    adesc190: "Now that's what I call getting some Pi!: Attain a constant of 3.14.",
    adesc191: "One in a million: Attain a constant of 1,000,000 [1e6].",
    adesc192: "A number: Attain a constant of 4.32e10.",
    adesc193: "The coolest of numbers: Attain a constant of 6.9e21.",
    adesc194: "Planck^(-1): Attain a constant of 1.509e33.",
    adesc195: "Epsilon > a lot: Attain a constant of 1e66.",
    adesc196: "NUM_MAX: Attain a constant of 1.8e308.",
    adesc197: "Casualties: Clear 'Reduced Ants' challenge once.",
    adesc198: "Fatalities: Clear 'Reduced Ants' challenge twice.",
    adesc199: "Destruction: Clear 'Reduced Ants' challenge three times.",
    adesc200: "War, what is it good for?: Clear 'Reduced Ants' challenge five times.",
    adesc201: "Absolutely everything.: Clear 'Reduced Ants' challenge ten times.",
    adesc202: "Perfect Storm: Clear 'Reduced Ants' challenge twenty times.",
    adesc203: "Immaculate Storm: Clear 'Reduced Ants' challenge thirty times.",
    adesc204: "I didn't need those stupid reincarnations anyway!: Clear 'No Reincarnation' challenge once.",
    adesc205: "[x1,x2,0,x3]: Clear 'No Reincarnation' challenge twice.",
    adesc206: "Nonmetaphysical: Clear 'No Reincarnation' challenge three times.",
    adesc207: "Living alone: Clear 'No Reincarnation' challenge five times.",
    adesc208: "DM me on discord if you read these names: Clear 'No Reincarnation' challenge ten times.",
    adesc209: "Yeah: Clear 'No Reincarnation' challenge twenty times.",
    adesc210: "Science! Clear 'No Reincarnation' challenge thirty times.",
    adesc211: "The IRS strikes back: Clear 'Tax+++' challenge once.",
    adesc212: "Fiscal Policy: Clear 'Tax+++' challenge twice.",
    adesc213: "Economic Boom: Clear 'Tax+++' challenge three times.",
    adesc214: "Ant-onomics: Clear 'Tax+++' challenge five times.",
    adesc215: "'Wow Platonic Tax sucks 1/5': Clear 'Tax+++' challenge ten times.",
    adesc216: "Haha this is hard for some reason: Clear 'Tax+++' challenge twenty times.",
    adesc217: "Taxes are hard: Clear 'Tax+++' challenge thirty times.",
    adesc218: "Shiny Blue Rock: Clear 'No Research' once.",
    adesc219: "It's like Avatar: Clear 'No Research' twice.",
    adesc220: "It's like Unobtainium: Clear 'No Research' three times.",
    adesc221: "It's like a thing: Clear 'No Research' five times.",
    adesc222: "It's like: Clear 'No Research' ten times.",
    adesc223: "It's: Clear 'No Research' twenty times.",
    adesc224: "It: Clear 'No Research' thirty times.",
    adesc225: "Pretty Corrupt: Clear an Ascension with above 100,000 score.",
    adesc226: "Bought out: Clear an Ascension with above 1 million score.",
    adesc227: "Utterly Corrupt: Clear an Ascension with above 10 million score.",
    adesc228: "Antitrust: Clear an Ascension with above 100 million score.",
    adesc229: "Ant-i-trust: Clear an Ascension with above 1 billion score.",
    adesc230: "This is pretty unfair: Clear an Ascension with above 5 billion score.",
    adesc231: "Antichrist: Clear an Ascension with above 25 billion score.",
    adesc232: "Highly Blessed: Level your Speed Rune blessing to 100,000.",
    adesc233: "Divine Blessing: Level your Speed Rune blessing to 100,000,000.",
    adesc234: "Blessing III: Level your Speed Rune blessing to 100 billion.",
    adesc235: "Spirit I: Level your Speed Spirit to 1 Million.",
    adesc236: "Spirit II: Level your Speed Spirit to 1 Billion.",
    adesc237: "Spirit III: Level your Speed Spirit to 1 Trillion.",
    adesc238: "Three-folded: [Hint: you may want to look into the inception]",
    adesc239: "Seeing red: [Hint: you may need a lot of red items]",
    adesc240: "ASCENDED: [Hint: you may need a LOT of ascensions OR an particularly amazing ascension]",
    adesc241: "Aesop: [Hint: you gotta be pretty dang slow]",
    adesc242: "Aesop's Revenge: [Hint: you gotta be pretty dang fast]",
    adesc243: "Unsmith: [Hint: unsmith emoji :unsmith: can be a pretty good input]",
    adesc244: "Smith: [Hint: :antismith: looks promising as well]",
    adesc245: "BLESSED: [Hint: Your Speed Blessing best be unreasonably high!]",
    adesc246: "Why? [Hint: Sometimes even 1 in over a Trillion counts!]",
    adesc247: "Challenging! [Hint: Challenge 11 is calling your name, but with even less ants]",
    adesc248: "Seeing Red but not Blue: [Hint: Can you get red stuff without getting blue stuff?]",
    adesc249: "Overtaxed: [Hint: It might pay not to read!]",
    adesc250: "The Thousand Suns: [Hint: You need to fully research into becoming GOD]",
    adesc251: "The Thousand Moons: [Hint: You may need to cube yourself up]",
    adesc252: "Ultimate: Complete 'SADISTIC II' challenge."
};
const areward = {
    areward3: "Gain +.05% to Accelerator Power.",
    areward4: "Start transcensions/challenges with Worker Autobuyer unlocked.",
    areward5: "Gain +1 Accelerator per 500 Workers owned.",
    areward6: "Gain +1 Multiplier per 1,000 Workers owned.",
    areward7: "Gain +1 Accelerator Boost per 2,000 workers owned.",
    areward10: "Gain +.10% to Accelerator Power.",
    areward11: "Start transcensions/challenges with Investment Autobuyer unlocked.",
    areward12: "Gain +1 Accelerator per 500 Investments owned.",
    areward13: "Gain +1 Multiplier per 1,000 Investments owned.",
    areward14: "Gain +1 Accelerator Boost per 2,000 Investments owned.",
    areward17: "Gain +.15% to Accelerator Power.",
    areward18: "Start transcensions/challenges with Printer Autobuyer unlocked.",
    areward19: "Gain +1 Accelerator per 500 Printers owned.",
    areward20: "Gain +1 Multiplier per 1,000 Printers owned.",
    areward21: "Gain +1 Accelerator Boost per 2,000 Printers owned.",
    areward24: "Gain +.20% to Accelerator Power.",
    areward25: "Start transcensions/challenges with Coin Mint Autobuyer unlocked.",
    areward26: "Gain +1 Accelerator per 500 Mints owned.",
    areward27: "Gain +1 Multiplier per 1,000 Mints owned.",
    areward28: "Gain +1 Accelerator Boost per 2,000 Mints owned.",
    areward31: "Gain +.25% to Accelerator Power.",
    areward32: "Start transcensions/challenges with Alchemy Autobuyer unlocked.",
    areward33: "Gain 10% more offerings from resets || +1 Accelerator per 500 Alchemies!",
    areward34: "Gain 15% more offerings from resets (stacks multiplicatively!) || +1 Multiplier per 1,000 Alchemies!",
    areward35: "Gain 25% more offerings from resets (stacks multiplicatively!) || +1 Accelerator Boost per 2,000 Alchemies!",
    areward36: "Multiply Crystal Production by 2x.",
    areward37: "Multiply Crystal Production by the common logarithm of owned Diamonds. Prestiges give more offerings based on time spent (Up to +15 at 1800 seconds)",
    areward38: "Unlock the Duplication rune!",
    areward43: "Accelerator Boosts can be purchased from any screen. Unlock the Auto-Prestige feature.",
    areward44: "Unlock the Prism Rune! Transcensions give more offerings based on time spent (Up to +15 at 1800 seconds)",
    areward45: "Reduce tax scaling by up to 5%, depending on the length of prestige.",
    areward46: "Reduce tax scaling by up to another 5%, depending on length of prestige.",
    areward47: "Reduce tax scaling by up to ANOTHER 10%, depending on length of prestige!",
    areward50: "Unlock new Atomic production and unlock 3 new incredibly difficult challenges! Gain 2x particles on all future Reincarnations!",
    areward51: "Manual Reincarnations give +4 Obtainium (unaffected by multipliers except time multiplier)!",
    areward52: "Reincarnations give more offerings based on time spent (Up to +25 at 1800 seconds)",
    areward53: "Increase the amount of obtainium gained through all features by 0.125% additive for each rune level.",
    areward57: "Gain +1, +1% free Multipliers!",
    areward58: "Gain +1, +1% more free Multipliers!",
    areward59: "Gain +1, +1% more, MORE free Multipliers!",
    areward60: "Gain +2, +1% free Accelerators!",
    areward61: "Gain +2, +1% more free Accelerators!",
    areward62: "Gain +2, +1% more, MORE free Accelerators!",
    areward71: "+1% Conversion Exponent on all generator upgrades!",
    areward72: "+1% Conversion Exponent on all generator upgrades!",
    areward73: "+1% Conversion Exponent on all generator upgrades!",
    areward74: "+1% Conversion Exponent on all generator upgrades!",
    areward75: "+1% Conversion Exponent on all generator upgrades!",
    areward76: "+1% Conversion Exponent on all generator upgrades!",
    areward77: "+1% Conversion Exponent on all generator upgrades! They're in overdrive now!",
    areward78: "Start transcensions/challenges with 1 Refinery and automatically buy Refineries.",
    areward79: "Automatically buy the first crystal upgrade if you can afford it!",
    areward80: "Start transcensions/challenges with Multiplier Autobuyer unlocked. +5% offering recycle.",
    areward82: "Delay tax growth by 4%.",
    areward84: "+1% obtainium (stacks additively with other achievement rewards)",
    areward85: "Start transcensions/challenges with 1 Coal Plant and automatically buy Coal Plants.",
    areward86: "Automatically buy the second crystal upgrade if you can afford it!",
    areward87: "Start transcensions/challenges with Accelerator Autobuyer unlocked. +5% offering recycle.",
    areward89: "Delay tax growth by 4%.",
    areward91: "+3% obtainium (stacks additively with other achievement rewards)",
    areward92: "Start transcensions/challenges with 1 Coal Rig and automatically buy Coal Rigs.",
    areward93: "Automatically buy the third crystal upgrade if you can afford it!",
    areward94: "+5% offering recycle.",
    areward96: "Delay tax growth by 4%.",
    areward98: "+5% obtainium (stacks additively with other achievement rewards)",
    areward99: "Start transcensions/challenges with 1 Diamond Pickaxe and automatically buy Diamond Pickaxes.",
    areward100: "Automatically buy the fourth crystal upgrade if you can afford it!",
    areward101: "+5% offering recycle.",
    areward102: "Unlock the Thrift rune!",
    areward103: "Delay tax growth by 4%.",
    areward105: "+7% obtainium (stacks additively with other achievement rewards)",
    areward106: "Start transcensions/challenges with 1 Pandora's Box and automatically buy Pandora's Boxes.",
    areward107: "Automatically buy the fifth crystal upgrade if you can afford it!",
    areward108: "+5% offering recycle.",
    areward110: "Delay tax growth by 4%.",
    areward112: "+9% obtainium (stacks additively with other achievement rewards)",
    areward115: "+5% offering recycle.",
    areward117: "Delay tax growth by 5.66%.",
    areward118: "Each Reincarnation challenge completion delays tax growth by 0.75% per level, multiplicative",
    areward119: "+11% obtainium. Unlock a nice trinket somewhere...",
    areward122: "+7.5% offering recycle.",
    areward124: "Delay tax growth by 5.66%. Unlock 5 new incredibly powerful researches!",
    areward126: "+13% obtainium. You get an accessory to commemorate this moment!",
    areward127: "Unlock 20 new incredibly expensive yet good researches. Unlock the [Anthill] feature!",
    areward128: "Make researches go Cost-- with 1.5x Obtainium!",
    areward129: "+7.5% offering recycle. Gain another 1.25x Obtainium multiplier!",
    areward131: "Delay tax growth by 5.66%.",
    areward132: "Permanently gain +25% more sacrifice reward!",
    areward133: "+15% obtainium. Obtain the gift of Midas himself.",
    areward134: "Unlock 10 newer incredibly expensive yet good researches. Unlock <<Talismans>> in the Runes Tab!",
    areward135: "Talisman positive bonuses are now +0.05 stronger per level.",
    areward136: "Talisman positive bonuses are now +0.05 even stronger per level.",
    areward137: "Permanently gain +25% more sacrifice reward!",
    areward140: "+17% obtainium. Lazy joke about not leaking talismans here [You get a new one]",
    areward141: "Unlock a new reset tier!",
    areward147: "+19% obtainium (Achievement total is up to 100%!). Gain the Polymath Talisman!",
    areward169: "ALL Ant speed multiplied by log10(crumbs + 10)",
    areward171: "+16.666% ALL Ant speed!",
    areward172: "Gain more ants the longer your reincarnation lasts (max speed achieved in 2 hours)",
    areward173: "Unlock Ant Sacrifice, allowing you to reset your ants and ant upgrades in exchange for amazing rewards! Automatically buy Worker Ants.",
    areward174: "Ant Multiplier from sacrifice is multiplied by another logarithm (Multiply by 0.4 * log10(points + 1))",
    areward176: "Unlock Tier 2 Ant autobuy, and autobuy Inceptus and Fortunae ants! Add +25 Base Ant ELO.",
    areward177: "Unlock Tier 3 Ant autobuy, and autobuy Tributum ants! Add +50 Base Ant ELO.",
    areward178: "Unlock Tier 4 Ant autobuy, and autobuy Celeritas and Multa ants! Add +75 Base Ant ELO.",
    areward179: "Unlock Tier 5 Ant autobuy, and autobuy Sacrificium ants! Add +100 Base Ant ELO.",
    areward180: "Unlock Tier 6 Ant autobuy, and autobuy Hic and Experientia ants! Add +1% Base Ant ELO.",
    areward181: "Unlock Tier 7 Ant autobuy, and autobuy Praemoenio ants! Add +2% Base Ant ELO.",
    areward182: "Unlock Tier 8 Ant autobuy, and autobuy Scientia and Phylacterium ants! Add +3% Base Ant ELO.",
    areward187: "Gain an ascension gain multiplier based on your score (log10(score) - 7)x for Corruption Score > 100 Million. Gain +1% Offerings per 10,000 ascensions, up to +100%!",
    areward188: "Gain +100 ascension count for all ascensions longer than 10 seconds. Gain +1% Obtainium per 50,000 ascensions, up to +100%!",
    areward189: "Gain 20% of excess time after 10 seconds each Ascension as a linear multiplier to ascensions (max 24 hours). Gain +0.1% Cubes per 250,000 ascensions, up to +200%!",
    areward193: "Gain (log10(Constant+1)/4)% more Cubes on ascension!",
    areward195: "Gain (log10(Constant+1)/4)% more Cubes and Tesseracts on ascension! Multiplicative with the other Ach. bonus.",
    areward196: "Gain (log10(Constant+1)/50)% more Platonic Cubes on ascension!",
    areward197: "You will unlock a stat tracker for ascensions.",
    areward198: "Gain +4% Cubes on ascension!",
    areward199: "Gain +4% Cubes on ascension!",
    areward200: "Gain +4% Cubs on ascension! Did I spell that wrong? You bet I did.",
    areward201: "Gain +3% Cubes on ascension!",
    areward202: "Gain 20% of excess time after 10 seconds each Ascensions as a linear multiplier to ascensions (max 24 hours). Gain +0.1% Tesseracts per 500,000 ascensions, up to +200%!",
    areward204: "You will gain 25% of excess time after 10 seconds each Ascension as a linear multiplier to rewards.",
    areward205: "Gain +4% Tesseracts on ascension!",
    areward206: "Gain +4% Tesseracts on ascension!",
    areward207: "Gain +4% Tesseracts on ascension!",
    areward208: "Gain +3% Tesseracts on ascension!",
    areward209: "Gain 20% of excess time after 10 seconds each Ascensions as a linear multiplier to ascensions (max 24 hours).",
    areward211: "You will gain 25% MORE excess time (Total: 50%) after 10 seconds each Ascension as a linear multiplier to rewards.",
    areward212: "Gain +4% Hypercubes on ascension!",
    areward213: "Gain +4% Hypercubes on ascension!",
    areward214: "Gain +4% Hypercubes on ascension!",
    areward215: "Gain +3% Hypercubes on ascension!",
    areward216: "Gain 20% of excess time after 10 seconds each Ascensions as a linear multiplier to ascensions (max 24 hours). Gain +0.1% Hypercubes per 1,000,000 ascensions, up to +200%!",
    areward218: "You gain gain 50% MORE MORE excess time (Total: 100%) after 10 seconds each Ascension as a linear multiplier to rewards.",
    areward219: "Gain +4% Platonic Cubes on ascension!",
    areward220: "Gain +4% Platonic Cubes on ascension!",
    areward221: "Gain +4% Platonic Cubes on ascension!",
    areward222: "Gain +3% Platonic Cubes on ascension!",
    areward223: "Gain 20% of excess time after 10 seconds each Ascensions as a linear multiplier to ascensions (max 24 hours). Gain +0.1% Platonic Cubes per 1,337,000 ascensions, up to +200%!",
    areward240: "Ascension Cube Gain Multipliers is VERY slightly affected by global speed multipliers: 1 + log10(Speed)/20 (Min: 1.10x, Max: 1.50x)",
    areward250: "You gain a permanent +60% Obtainium and Offering bonus, with +6% all cube types!",
    areward251: "You gain a permanent +100% Obtainium and Offering bonus, with +10% all cube types!"
};
const resetachievementcheck = (i) => {
    if (i === 1) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigenoaccelerator === true) {
            achievementaward(60);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigenomultiplier === true) {
            achievementaward(57);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigenocoinupgrades === true) {
            achievementaward(64);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.prestigePointGain.gte(1)) {
            achievementaward(36);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.prestigePointGain.gte(1e6)) {
            achievementaward(37);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.prestigePointGain.gte(1e100)) {
            achievementaward(38);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.prestigePointGain.gte("1e1000")) {
            achievementaward(39);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.prestigePointGain.gte("1e10000")) {
            achievementaward(40);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.prestigePointGain.gte("1e77777")) {
            achievementaward(41);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.prestigePointGain.gte("1e250000")) {
            achievementaward(42);
        }
    }
    if (i === 2) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnoaccelerator === true) {
            achievementaward(61);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnomultiplier === true) {
            achievementaward(58);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnocoinupgrades === true) {
            achievementaward(65);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnocoinorprestigeupgrades === true) {
            achievementaward(66);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.transcendPointGain.gte(1)) {
            achievementaward(43);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.transcendPointGain.gte(1e6)) {
            achievementaward(44);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.transcendPointGain.gte(1e50)) {
            achievementaward(45);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.transcendPointGain.gte(1e308)) {
            achievementaward(46);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.transcendPointGain.gte("1e1500")) {
            achievementaward(47);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.transcendPointGain.gte("1e25000")) {
            achievementaward(48);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.transcendPointGain.gte("1e100000")) {
            achievementaward(49);
        }
    }
    if (i === 3) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenoaccelerator === true) {
            achievementaward(62);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenomultiplier === true) {
            achievementaward(59);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinupgrades === true) {
            achievementaward(67);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinorprestigeupgrades === true) {
            achievementaward(68);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinprestigeortranscendupgrades === true) {
            achievementaward(69);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinprestigetranscendorgeneratorupgrades === true) {
            achievementaward(70);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationPointGain.gte(1)) {
            achievementaward(50);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationPointGain.gte(1e5)) {
            achievementaward(51);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationPointGain.gte(1e30)) {
            achievementaward(52);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationPointGain.gte(1e200)) {
            achievementaward(53);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationPointGain.gte("1e1500")) {
            achievementaward(54);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationPointGain.gte("1e5000")) {
            achievementaward(55);
        }
        if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationPointGain.gte("1e7777")) {
            achievementaward(56);
        }
    }
};
const challengeCompletionsBar = [
    [1, 0.5, 78], [1, 2.5, 79], [1, 4.5, 80], [1, 9.5, 81], [1, 19.5, 82], [1, 49.5, 83], [1, 74.5, 84],
    [2, 0.5, 85], [2, 2.5, 86], [2, 4.5, 87], [2, 9.5, 88], [2, 19.5, 89], [2, 49.5, 90], [2, 74.5, 91],
    [3, 0.5, 92], [3, 2.5, 93], [3, 4.5, 94], [3, 9.5, 95], [3, 19.5, 96], [3, 49.5, 97], [3, 74.5, 98],
    [4, 0.5, 99], [4, 2.5, 100], [4, 4.5, 101], [4, 9.5, 102], [4, 19.5, 103], [4, 49.5, 104], [4, 74.5, 105],
    [5, 0.5, 106], [5, 2.5, 107], [5, 4.5, 108], [5, 9.5, 109], [5, 19.5, 110], [5, 49.5, 111], [5, 74.5, 112],
    [6, 0.5, 113], [6, 1.5, 114], [6, 2.5, 115], [6, 4.5, 116], [6, 9.5, 117], [6, 14.5, 118], [6, 24.5, 119],
    [7, 0.5, 120], [7, 1.5, 121], [7, 2.5, 122], [7, 4.5, 123], [7, 9.5, 124], [7, 14.5, 125], [7, 24.5, 126],
    [8, 0.5, 127], [8, 1.5, 128], [8, 2.5, 129], [8, 4.5, 130], [8, 9.5, 131], [8, 19.5, 132], [8, 24.5, 133],
    [9, 0.5, 134], [9, 1.5, 135], [9, 2.5, 136], [9, 4.5, 137], [9, 9.5, 138], [9, 19.5, 139], [9, 24.5, 140],
    [10, 0.5, 141], [10, 1.5, 142], [10, 2.5, 143], [10, 4.5, 144], [10, 9.5, 145], [10, 19.5, 146], [10, 24.5, 147]
];
const challengeCompletionsNotAuto = {
    1: ['1e1000', 75],
    2: ['1e1000', 76],
    3: ['1e99999', 77],
    5: ['1e120000', 63]
};
const challengeachievementcheck = (i, auto) => {
    const generatorcheck = (0,_Utility__WEBPACK_IMPORTED_MODULE_4__.sumContents)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades.slice(101, 106));
    for (const [, bar, ach] of challengeCompletionsBar.filter(([o]) => o === i)) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[i] > bar) {
            achievementaward(ach);
        }
    }
    if ([1, 2, 3, 5].includes(i) && !auto) {
        const [gte, ach] = challengeCompletionsNotAuto[i];
        if (i === 5) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinsThisTranscension.gte(gte) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought === 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought === 0) {
                achievementaward(ach);
            }
        }
        else if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinsThisTranscension.gte(gte) && generatorcheck === 0) {
            achievementaward(ach);
        }
    }
    if (i >= 11 && i <= 14) {
        const challengeArray = [0, 1, 2, 3, 5, 10, 20, 30];
        for (let j = 1; j <= 7; j++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[i] >= challengeArray[j] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[119 + 7 * i + j] < 1) {
                achievementaward(119 + 7 * i + j);
            }
        }
    }
};
const buildAchievementReq = [
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin >= 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[1] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin >= 10 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[2] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin >= 100 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[3] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin >= 1000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[4] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin >= 5000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[5] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin >= 10000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[6] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin >= 20000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[7] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin >= 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[8] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin >= 10 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[9] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin >= 100 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[10] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin >= 1000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[11] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin >= 5000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[12] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin >= 10000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[13] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin >= 20000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[14] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin >= 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[15] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin >= 10 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[16] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin >= 100 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[17] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin >= 1000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[18] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin >= 5000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[19] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin >= 10000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[20] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin >= 20000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[21] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin >= 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[22] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin >= 10 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[23] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin >= 100 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[24] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin >= 1000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[25] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin >= 5000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[26] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin >= 10000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[27] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin >= 20000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[28] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin >= 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[29] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin >= 10 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[30] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin >= 66 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[31] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin >= 666 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[32] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin >= 6666 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[33] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin >= 17777 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[34] < 0.5,
    () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin >= 42777 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[35] < 0.5,
];
const buildingAchievementCheck = () => {
    for (const req of buildAchievementReq) {
        if (req()) {
            const idx = buildAchievementReq.indexOf(req) + 1;
            achievementaward(idx);
        }
    }
};
const ascensionAchievementCheck = (i, score = 0) => {
    if (i === 1) {
        const ascendCountArray = [0, 1, 2, 10, 100, 1000, 14142, 141421, 1414213];
        for (let j = 1; j <= 7; j++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount >= ascendCountArray[j] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[182 + j] < 1) {
                achievementaward(182 + j);
            }
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount >= ascendCountArray[8] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[240] < 1) {
            achievementaward(240);
        }
    }
    if (i === 2) {
        const constantArray = [0, 3.14, 1e6, 4.32e10, 6.9e21, 1.509e33, 1e66, "1.8e308"];
        for (let j = 1; j <= 7; j++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.gte(constantArray[j]) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[189 + j] < 1) {
                achievementaward(189 + j);
            }
        }
    }
    if (i === 3) {
        const scoreArray = [0, 1e5, 1e6, 1e7, 1e8, 1e9, 5e9, 2.5e10];
        for (let j = 1; j <= 7; j++) {
            if (score >= scoreArray[j] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[224 + j] < 1) {
                achievementaward(224 + j);
            }
        }
    }
};
const achievementdescriptions = (i) => {
    const y = adesc[`adesc${i}`];
    const z = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[i] > 0.5 ? ' COMPLETED!' : '';
    const k = areward[`areward${i}`] || '';
    document.getElementById("achievementdescription").textContent = y + z;
    document.getElementById("achievementreward").textContent = "Reward: " + achievementpointvalues[i] + " AP. " + achievementpointvalues[i] + " Quarks! " + k;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[i] > 0.5) {
        document.getElementById("achievementdescription").style.color = "gold";
    }
    else {
        document.getElementById("achievementdescription").style.color = "white";
    }
};
const achievementaward = (num) => {
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[num] < 0.5) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievementPoints += achievementpointvalues[num];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += achievementpointvalues[num];
        document.getElementById("achievementprogress").textContent = "Achievement Points: " + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievementPoints + "/" + totalachievementpoints + " [" + (100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievementPoints / totalachievementpoints).toPrecision(4) + "%]";
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[num] = 1;
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_2__.revealStuff)();
    }
    document.getElementById(`ach${num}`).style.backgroundColor = "Green";
    _Events__WEBPACK_IMPORTED_MODULE_3__.Synergism.emit('achievement', num);
};


/***/ }),
/* 12 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Synergism": () => /* binding */ Synergism
/* harmony export */ });
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_0__);

const Synergism = new (eventemitter3__WEBPACK_IMPORTED_MODULE_0___default())();


/***/ }),
/* 13 */
/***/ ((module) => {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),
/* 14 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resetrepeat": () => /* binding */ resetrepeat,
/* harmony export */   "resetdetails": () => /* binding */ resetdetails,
/* harmony export */   "updateAutoReset": () => /* binding */ updateAutoReset,
/* harmony export */   "updateTesseractAutoBuyAmount": () => /* binding */ updateTesseractAutoBuyAmount,
/* harmony export */   "reset": () => /* binding */ reset,
/* harmony export */   "resetAnts": () => /* binding */ resetAnts
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var _Runes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(15);
/* harmony import */ var _Talismans__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _Tesseracts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(16);
/* harmony import */ var _UpdateHTML__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8);
/* harmony import */ var _Upgrades__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(18);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(5);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(1);
/* harmony import */ var _Utility__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(4);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(11);
/* harmony import */ var _Research__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(22);
/* harmony import */ var _Hypercubes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(23);
/* harmony import */ var _Challenges__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(6);
/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(12);















let repeatreset;
const resetrepeat = (input) => {
    (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.clearInt)(repeatreset);
    repeatreset = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.interval)(() => resetdetails(input), 50);
};
const resetdetails = (input) => {
    (0,_Utility__WEBPACK_IMPORTED_MODULE_9__.getElementById)('resetofferings1').src = "Pictures/Offering.png";
    const transcensionChallenge = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension;
    const reincarnationChallenge = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation;
    const offering = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateOfferings)(input);
    const offeringImage = (0,_Utility__WEBPACK_IMPORTED_MODULE_9__.getElementById)("resetofferings1");
    const offeringText = document.getElementById("resetofferings2");
    const currencyImage1 = (0,_Utility__WEBPACK_IMPORTED_MODULE_9__.getElementById)("resetcurrency1");
    const resetObtainiumImage = (0,_Utility__WEBPACK_IMPORTED_MODULE_9__.getElementById)("resetobtainium");
    const resetobtainiumText = document.getElementById("resetobtainium2");
    const resetInfo = document.getElementById('resetinfo');
    const resetCurrencyGain = document.getElementById("resetcurrency2");
    (input == "reincarnation") ?
        (resetObtainiumImage.src = "Pictures/Obtainium.png", resetobtainiumText.textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.obtainiumGain))) :
        (resetObtainiumImage.src = "", resetobtainiumText.textContent = "");
    (input == "ascensionChallenge" || input == "ascension") ?
        offeringImage.style.display = offeringText.style.display = "none" :
        offeringImage.style.display = offeringText.style.display = "block";
    switch (input) {
        case "prestige":
            if (currencyImage1.src !== "Pictures/Diamond.png") {
                currencyImage1.src = "Pictures/Diamond.png";
            }
            resetCurrencyGain.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.prestigePointGain);
            resetInfo.textContent = "Coins, Coin Producers, Coin Upgrades, and Crystals are reset, but in return you gain diamonds and a few offerings. Required: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinsThisPrestige) + "/1e16 Coins || TIME SPENT: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigecounter) + " seconds.";
            resetInfo.style.color = "turquoise";
            break;
        case "transcension":
            if (currencyImage1.src !== "Pictures/Mythos.png") {
                currencyImage1.src = "Pictures/Mythos.png";
            }
            resetCurrencyGain.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.transcendPointGain);
            resetInfo.textContent = "Reset all Coin and Diamond Upgrades/Features, Crystal Upgrades & Producers, for Mythos/Offerings. Required: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinsThisTranscension) + "/1e100 Coins || TIME SPENT: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendcounter) + " seconds.";
            resetInfo.style.color = "orchid";
            break;
        case "reincarnation":
            if (currencyImage1.src !== "Pictures/Particle.png") {
                currencyImage1.src = "Pictures/Particle.png";
            }
            resetCurrencyGain.textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.reincarnationPointGain);
            resetInfo.textContent = "Reset ALL previous reset tiers, but gain Particles, Obtainium and Offerings! Required: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendShards) + "/1e300 Mythos Shards || TIME SPENT: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter) + " seconds.";
            resetInfo.style.color = "limegreen";
            break;
        case "acceleratorBoost":
            if (currencyImage1.src !== "Pictures/Diamond.png") {
                currencyImage1.src = "Pictures/Diamond.png";
            }
            resetCurrencyGain.textContent = "-" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostCost);
            resetInfo.textContent = "Reset Coin Producers/Upgrades, Crystals and Diamonds in order to increase the power of your Accelerators. Required: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostCost) + " Diamonds.";
            resetInfo.style.color = "cyan";
            break;
        case "transcensionChallenge":
            currencyImage1.src = "";
            resetCurrencyGain.textContent = "";
            (transcensionChallenge !== 0) ?
                (resetInfo.style.color = "aquamarine", resetInfo.textContent = "Are you tired of being in your challenge or stuck? Click to leave challenge " + transcensionChallenge + ". Progress: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinsThisTranscension) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((0,_Challenges__WEBPACK_IMPORTED_MODULE_13__.challengeRequirement)(transcensionChallenge, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[transcensionChallenge])) + " Coins. TIME SPENT: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendcounter) + " seconds.") :
                (resetInfo.style.color = "crimson", resetInfo.textContent = "You're not in a Transcension Challenge right now. Get in one before you can leave it, duh!");
            break;
        case "reincarnationChallenge":
            let goal;
            let goaldesc;
            (reincarnationChallenge >= 9) ?
                (goal = "coins", goaldesc = " Coins") :
                (goal = "transcendShards", goaldesc = " Mythos Shards");
            currencyImage1.src = "";
            resetCurrencyGain.textContent = "";
            (reincarnationChallenge !== 0) ?
                (resetInfo.style.color = "silver", resetInfo.textContent = "Are you done or tired of being in your challenge? Click to leave challenge " + reincarnationChallenge + ". Progress: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[goal]) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((0,_Challenges__WEBPACK_IMPORTED_MODULE_13__.challengeRequirement)(reincarnationChallenge, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[reincarnationChallenge], reincarnationChallenge)) + goaldesc + ". TIME SPENT: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter) + " Seconds.") :
                (resetInfo.style.color = "crimson", resetInfo.textContent = "You're not in a Reincarnation Challenge right now. How could you leave what you are not in?");
            break;
        case "ascensionChallenge":
            currencyImage1.src = "";
            resetCurrencyGain.textContent = "";
            resetInfo.textContent = "Click this if you're in an Ascension Challenge and want to leave. You get it already!";
            resetInfo.style.color = "gold";
            break;
        case "ascension":
            currencyImage1.src = "";
            resetCurrencyGain.textContent = "";
            resetInfo.textContent = "Ascend. 10x1 is required! +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.CalcCorruptionStuff)()[4], 0, true) + " Wow! Cubes for doing it! Time: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter, 0, false) + " Seconds.";
            resetInfo.style.color = "gold";
            break;
    }
    document.getElementById("resetofferings2").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(offering);
};
const updateAutoReset = (i) => {
    if (i === 1) {
        const t = +(0,_Utility__WEBPACK_IMPORTED_MODULE_9__.getElementById)("prestigeamount").value;
        if (t >= 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeamount = t;
        }
        else {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeamount = 0;
        }
    }
    else if (i === 2) {
        const u = +(0,_Utility__WEBPACK_IMPORTED_MODULE_9__.getElementById)("transcendamount").value;
        if (u >= 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendamount = u;
        }
        else {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendamount = 0;
        }
    }
    else if (i === 3) {
        const v = +(0,_Utility__WEBPACK_IMPORTED_MODULE_9__.getElementById)("reincarnationamount").value;
        if (v >= 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationamount = v;
        }
        else {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationamount = 0;
        }
    }
    else if (i === 4) {
        let v = parseFloat((0,_Utility__WEBPACK_IMPORTED_MODULE_9__.getElementById)("ascensionAmount").value);
        v = Math.floor(v);
        if (v >= 1) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoAscendThreshold = v;
        }
        else {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoAscendThreshold = 1;
        }
    }
    else if (i === 5) {
        const v = parseFloat((0,_Utility__WEBPACK_IMPORTED_MODULE_9__.getElementById)("autoAntSacrificeAmount").value);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoAntSacTimer = Math.max(0, v);
    }
};
const updateTesseractAutoBuyAmount = () => {
    let v = parseFloat((0,_Utility__WEBPACK_IMPORTED_MODULE_9__.getElementById)("tesseractAmount").value);
    v = Math.floor(v);
    if (v >= 0) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractAutoBuyerAmount = v;
    }
    else {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractAutoBuyerAmount = 0;
    }
};
const reset = (input, fast = false, from = 'unknown') => {
    const historyEntry = {};
    let historyKind = "prestige";
    const historyCategory = (input === 'ascension' || input === 'ascensionChallenge') ? 'ascend' : 'reset';
    let historyUse = from !== "enterChallenge" && from !== "leaveChallenge";
    historyEntry.offerings = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateOfferings)(input);
    historyEntry.seconds = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigecounter;
    historyEntry.diamonds = _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.prestigePointGain;
    (0,_Runes__WEBPACK_IMPORTED_MODULE_2__.resetofferings)(input);
    resetUpgrades(1);
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("102");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinsThisPrestige = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("100");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstGeneratedCoin = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstCostCoin = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("100");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondGeneratedCoin = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondCostCoin = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("2e3");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdGeneratedCoin = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdCostCoin = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("4e4");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthGeneratedCoin = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthCostCoin = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("8e5");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthGeneratedCoin = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthCostCoin = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1.6e7");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstGeneratedDiamonds = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondGeneratedDiamonds = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdGeneratedDiamonds = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthGeneratedDiamonds = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthGeneratedDiamonds = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierCost = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e5");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorCost = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("500");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeCount += 1;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.add(_Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.prestigePointGain);
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeShards = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigenoaccelerator = true;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigenomultiplier = true;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigenocoinupgrades = true;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.prestige = true;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigecounter < _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fastestprestige) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fastestprestige = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigecounter;
    }
    _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.prestigePointGain = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default('0');
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigecounter = 0;
    _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.autoResetTimers.prestige = 0;
    if (input === "transcension" || input === "transcensionChallenge" || input == "reincarnation" || input == "reincarnationChallenge"
        || input === "ascension" || input === "ascensionChallenge") {
        historyKind = "transcend";
        historyEntry.seconds = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendcounter;
        historyEntry.mythos = _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.transcendPointGain;
        delete historyEntry.diamonds;
        resetUpgrades(2);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinsThisTranscension = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("100");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedDiamonds = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstCostDiamonds = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("100");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedDiamonds = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondCostDiamonds = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e5");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedDiamonds = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdCostDiamonds = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e15");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedDiamonds = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthCostDiamonds = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e40");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedDiamonds = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthCostDiamonds = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e100");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstGeneratedMythos = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondGeneratedMythos = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdGeneratedMythos = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthGeneratedMythos = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthGeneratedMythos = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostCost = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e3");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendCount += 1;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendPoints = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendPoints.add(_Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.transcendPointGain);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendShards = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnocoinupgrades = true;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnocoinorprestigeupgrades = true;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnoaccelerator = true;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnomultiplier = true;
        _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.transcendPointGain = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default('0');
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[78] > 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedDiamonds += 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[85] > 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedDiamonds += 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[92] > 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedDiamonds += 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[99] > 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedDiamonds += 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[106] > 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedDiamonds += 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[4] > 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[81] = 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[11] > 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[82] = 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[18] > 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[83] = 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[25] > 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[84] = 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[32] > 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[85] = 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[80] > 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[87] = 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendcounter < _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fastesttranscend && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension === 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fastesttranscend = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendcounter;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendcounter = 0;
        _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.autoResetTimers.transcension = 0;
    }
    if (input === 'reincarnation' || input === 'reincarnationChallenge' || input === 'ascension' || input === 'ascensionChallenge') {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount > 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[183] < 1) {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_10__.ascensionAchievementCheck)(1);
        }
        historyKind = "reincarnate";
        historyEntry.obtainium = _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.obtainiumGain;
        historyEntry.particles = _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.reincarnationPointGain;
        historyEntry.seconds = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter;
        delete historyEntry.mythos;
        if (!historyUse) {
            if (_Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.reincarnationPointGain.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints.div(10))) {
                historyUse = true;
            }
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints += Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.obtainiumGain);
        const opscheck = _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.obtainiumGain / (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter);
        if (opscheck > _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.obtainiumpersecond) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.obtainiumpersecond = opscheck;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension = 0;
        resetUpgrades(3);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinsThisReincarnation = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("100");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedMythos = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstCostMythos = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedMythos = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondCostMythos = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e2");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedMythos = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdCostMythos = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e4");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedMythos = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthCostMythos = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e8");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedMythos = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthCostMythos = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e16");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstGeneratedParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondGeneratedParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdGeneratedParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthGeneratedParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthGeneratedParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationCount += 1;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendPoints = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints.add(_Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.reincarnationPointGain);
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[6] > 10 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[11] > 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.add(_Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.reincarnationPointGain);
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationShards = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[1] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[2] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[3] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[5] = 0;
        _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.reincarnationPointGain = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default('0');
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.instantChallengeBought && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation === 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[1] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[1];
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[2] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[2];
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[3] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[3];
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[4];
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[5] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[5];
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinupgrades = true;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinorprestigeupgrades = true;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinprestigeortranscendupgrades = true;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinprestigetranscendorgeneratorupgrades = true;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenoaccelerator = true;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenomultiplier = true;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter < _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fastestreincarnate && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation === 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fastestreincarnate = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter;
        }
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateCubeBlessings)();
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationcounter = 0;
        _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.autoResetTimers.reincarnation = 0;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearchToggle && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch > 0.5) {
            const linGrowth = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch === 200) ? 0.01 : 0;
            (0,_Research__WEBPACK_IMPORTED_MODULE_11__.buyResearch)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch, true, linGrowth);
        }
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneLevels)();
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateAnts)();
    }
    if (input === 'ascension' || input === 'ascensionChallenge') {
        const metaData = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.CalcCorruptionStuff)();
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_10__.ascensionAchievementCheck)(3, metaData[3]);
        historyKind = "ascend";
        historyUse = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[10] > 0;
        delete historyEntry.offerings;
        delete historyEntry.obtainium;
        delete historyEntry.particles;
        historyEntry.seconds = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter;
        historyEntry.c10Completions = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[10];
        historyEntry.usedCorruptions = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions.slice(0);
        historyEntry.corruptionScore = metaData[3];
        historyEntry.wowCubes = metaData[4];
        historyEntry.wowTesseracts = metaData[5];
        historyEntry.wowHypercubes = metaData[6];
        historyEntry.wowPlatonicCubes = metaData[7];
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension && from !== "enterChallenge") {
            historyEntry.currentChallenge = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoChallengeIndex = 1;
        _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.autoChallengeTimerIncrement = 0;
        resetResearches();
        resetAnts();
        resetTalismans();
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationShards = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.obtainiumpersecond = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxobtainiumpersecond = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offeringpersecond = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificePoints = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimer = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimerReal = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[12 - 1] = 0;
        for (let j = 61; j <= 80; j++) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[j] = 0;
        }
        for (let j = 94; j <= 100; j++) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[j] = 0;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedParticles = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedParticles = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedParticles = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedParticles = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedParticles = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("100");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e4");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e8");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthCostParticles = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e16");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeexp = [0, 0, 0, 0, 0];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels = [0, 0, 0, 0, 0];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgrades = [0, 0, 0, 0, 0, 0, 0, 0];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[0] = 3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[26];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[1] = 3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[26];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[2] = 3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[26];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[3] = 3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[26];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[4] = 3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[26];
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[27] === 1) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedParticles = 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedParticles = 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedParticles = 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedParticles = 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedParticles = 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[48] > 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedAnts += 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[10] > 0) {
            let ascCount = 1;
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter >= 10) {
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[188] > 0) {
                    ascCount += 99;
                }
                ascCount *= 1 + (Math.min(24 * 3600, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter) / 10 - 1) * 0.2 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[189] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[202] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[209] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[216] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[223]);
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[187] > 0 && metaData[3] > 1e8) {
                ascCount *= (Math.log(metaData[3]) / Math.log(10) - 1);
            }
            ascCount *= _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.challenge15Rewards.ascensions;
            ascCount = Math.floor(ascCount);
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount += ascCount;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowCubes += metaData[4];
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowTesseracts += metaData[5];
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowHypercubes += metaData[6];
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowPlatonicCubes += metaData[7];
        }
        for (let j = 1; j <= 10; j++) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[j] = 0;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[j] = 0;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[6] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[6] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[49];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[7] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[7] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[49];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[8] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[49];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.roombaResearchIndex = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch = 1;
        for (let j = 1; j <= (200); j++) {
            const k = "res" + j;
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[j] > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[j] < _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.researchMaxLevels[j]) {
                document.getElementById(k).style.backgroundColor = "purple";
            }
            else if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[j] > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[j] >= _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.researchMaxLevels[j]) {
                document.getElementById(k).style.backgroundColor = "green";
            }
            else {
                document.getElementById(k).style.backgroundColor = "black";
            }
        }
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateAnts)();
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneLevels)();
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateAntSacrificeELO)();
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateTalismanEffects)();
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateObtainium)();
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_10__.ascensionAchievementCheck)(1);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubesThisAscension.challenges = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubesThisAscension.reincarnation = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubesThisAscension.maxCubesPerSec = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubesThisAscension.tesseracts = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubesThisAscension.hypercubes = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubesThisAscension.ascension = 100 / 100 * (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateCubeMultiplier)() * 250;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCounter = 0;
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_3__.updateTalismanInventory)();
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_3__.updateTalismanAppearance)(1);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_3__.updateTalismanAppearance)(2);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_3__.updateTalismanAppearance)(3);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_3__.updateTalismanAppearance)(4);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_3__.updateTalismanAppearance)(5);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_3__.updateTalismanAppearance)(6);
        (0,_Talismans__WEBPACK_IMPORTED_MODULE_3__.updateTalismanAppearance)(7);
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateCubeBlessings)();
        (0,_Tesseracts__WEBPACK_IMPORTED_MODULE_4__.calculateTesseractBlessings)();
        (0,_Hypercubes__WEBPACK_IMPORTED_MODULE_12__.calculateHypercubeBlessings)();
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[4] === 1) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[94] = 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[95] = 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[96] = 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[97] = 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[98] = 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[5] === 1) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[99] = 1;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[6] === 1) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[100] = 1;
        }
        for (let j = 61; j <= 80; j++) {
            document.getElementById("upg" + j).style.backgroundColor = "black";
        }
        for (let j = 94; j <= 100; j++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[j] === 0) {
                document.getElementById("upg" + j).style.backgroundColor = "black";
            }
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions = Array.from(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions);
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.prestige = true;
    if (input == "transcension" || input == "transcensionChallenge") {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.transcend = true;
    }
    if (input == "reincarnation" || input == "reincarnationChallenge") {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.reincarnate = true;
    }
    if (!fast) {
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_5__.revealStuff)();
    }
    if (historyUse) {
        _Events__WEBPACK_IMPORTED_MODULE_14__.Synergism.emit('historyAdd', historyCategory, historyKind, historyEntry);
    }
};
const resetUpgrades = (i) => {
    if (i > 2.5) {
        for (let i = 41; i < 61; i++) {
            if (i !== 46) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[i] = 0;
            }
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[41] === 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[46] = 0;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.keepUpgrades.autobuyers = false;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[41] < 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[88] = 0;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[50] === 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[89] = 0;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[42] < 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[90] = 0;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.keepUpgrades.generators = false;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[43] < 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[91] = 0;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.keepUpgrades.coinUpgrades = false;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[44] < 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[92] = 0;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.keepUpgrades.prestigeUpgrades = false;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[45] < 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[93] = 0;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.resourceGenerators.diamonds = false;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[116] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[117] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[118] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[119] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[120] = 0;
    }
    for (let j = 1; j <= 20; j++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[j] = 0;
    }
    for (let j = 121, k = 106; j <= 125; j++, k++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[j] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[k] = 0;
    }
    if (i > 1.5) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[4] < 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[81] = 0;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[11] < 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[82] = 0;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[18] < 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[83] = 0;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[25] < 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[84] = 0;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[32] < 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[85] = 0;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[87] < 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[86] = 0;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[80] < 0.5) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[87] = 0;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[101] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[102] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[103] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[104] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[105] = 0;
    }
    if (i > 1.5) {
        for (let k = 21; k < 41; k++) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[k] = 0;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[111] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[112] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[113] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[114] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[115] = 0;
    }
    if (i > 1.5) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgrades = [0, 0, 0, 0, 0, 0, 0, 0];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgradesCost = [7, 15, 20, 40, 100, 200, 500, 1000];
        let m = 0;
        m += Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.rune3level * _Variables__WEBPACK_IMPORTED_MODULE_7__.Globals.effectiveLevelMult / 16) * 100 / 100;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[73] > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation !== 0) {
            m += 10;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgrades = [m, m, m, m, m, m, m, m];
    }
    for (let x = 1; x <= 125; x++) {
        (0,_Upgrades__WEBPACK_IMPORTED_MODULE_6__.upgradeupdate)(x, true);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[87] > 0.5) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[86] = 1;
    }
};
const resetAnts = () => {
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedAnts = 0;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[48] > 0) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedAnts = 1;
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedAnts = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedAnts = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedAnts = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedAnts = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.sixthOwnedAnts = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.seventhOwnedAnts = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.eighthOwnedAnts = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.sixthGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.seventhGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.eighthGeneratedAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("0");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e800");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("3");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("100");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e4");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e12");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.sixthCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e36");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.seventhCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e100");
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.eighthCostAnts = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1e300");
    const ant12 = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[12 - 1];
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ant12];
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("1");
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 12) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints = new break_infinity_js__WEBPACK_IMPORTED_MODULE_8__.default("7");
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateAnts)();
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneLevels)();
};
const resetResearches = () => {
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints = 0;
    const destroy = [
        6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25,
        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        76, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98,
        101, 102, 103, 104, 106, 107, 108, 109, 110, 116, 117, 118, 121, 122, 123,
        126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149,
        151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174,
        176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199
    ];
    for (const item of destroy) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[item] = 0;
    }
};
const resetTalismans = () => {
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanLevels = [0, 0, 0, 0, 0, 0, 0];
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity = [1, 1, 1, 1, 1, 1, 1];
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanShards = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.commonFragments = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.uncommonFragments = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.rareFragments = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.epicFragments = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.legendaryFragments = 0;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.mythicalFragments = 0;
};


/***/ }),
/* 15 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "displayRuneInformation": () => /* binding */ displayRuneInformation,
/* harmony export */   "resetofferings": () => /* binding */ resetofferings,
/* harmony export */   "redeemShards": () => /* binding */ redeemShards,
/* harmony export */   "calculateOfferingsToLevelXTimes": () => /* binding */ calculateOfferingsToLevelXTimes
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);




const displayRuneInformation = (i, updatelevelup = true) => {
    const m = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveLevelMult;
    const SILevelMult = (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[84] / 200 * (1 + 1 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveRuneSpiritPower[5] * (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateCorruptionPoints)() / 400));
    const amountPerOffering = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneExpGiven)(i - 1, false, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[i - 1]);
    if (i === 1) {
        if (updatelevelup) {
            document.getElementById("runeshowlevelup").textContent = "+(Level/4)^1.25 Accelerator, +0.25% Accelerators per level. +1 Accelerator Boost every 20 levels!";
        }
        document.getElementById("runeshowpower1").textContent = "Speed Rune Bonus: " + "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor(Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune1level * m / 4, 1.25))) + " Accelerators, +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune1level / 4 * m), 2, true) + "% Accelerators, +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune1level / 20 * m)) + " Accelerator Boosts.";
    }
    if (i === 2) {
        if (updatelevelup) {
            document.getElementById("runeshowlevelup").textContent = "+(Level/10) Multipliers every 10th level, +0.25% Multipliers per level. Tax growth is delayed more for each level!";
        }
        document.getElementById("runeshowpower2").textContent = "Duplication Rune Bonus: " + "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune2level * m / 10) * Math.floor(1 + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune2level * m / 10) / 2) + " Multipliers, +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(m * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune2level / 4, 1, true) + "% Multipliers, -" + (99.9 * (1 - Math.pow(6, -(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune2level * m) / 1000))).toPrecision(4) + "% Tax Growth.";
    }
    if (i === 3) {
        if (updatelevelup) {
            document.getElementById("runeshowlevelup").textContent = "~(1 + (Level/2)^2 * 2^(Level/2) / 256)x Crystal Production. +1 free level for each Crystal upgrade per 16 levels!";
        }
        document.getElementById("runeshowpower3").textContent = "Prism Rune Bonus: " + "All Crystal Producer production multiplied by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune3level * m / 2, 2).times(break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default.pow(2, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune3level * m / 2 - 8)).add(1), 3) + ", gain +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune3level / 16 * m)) + " free crystal levels.";
    }
    if (i === 4) {
        if (updatelevelup) {
            document.getElementById("runeshowlevelup").textContent = "+0.125% building cost growth delay per level, +0.0625% offering recycle chance per level [MAX: 25%], 2^((1000 - Level)/1100) Tax growth multiplier AFTER level 400";
        }
        document.getElementById("runeshowpower4").textContent = "Thrift Rune Bonus: " + "Delay all producer cost increases by " + (_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune4level / 8 * m).toPrecision(3) + "%. Offering recycle chance: +" + Math.min(25, _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune4level / 16) + "%. -" + (99 * (1 - Math.pow(4, Math.min(0, (400 - _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune4level) / 1100)))).toPrecision(4) + "% Tax Growth";
    }
    if (i === 5) {
        if (updatelevelup) {
            document.getElementById("runeshowlevelup").textContent = "~(1 + level/200)x Obtainium, (1 + Level^2/2500)x Ant Hatch Speed, +0.005 base offerings for each tier per level";
        }
        document.getElementById("runeshowpower5").textContent = "S. Intellect Rune Bonus: " + "Obtainium gain x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((1 + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5level / 200 * m * SILevelMult), 2, true) + ". Ant Speed: x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5level * m * SILevelMult, 2) / 2500) + ". Base Offerings: +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.rune5level * m * SILevelMult * 0.005), 3, true);
    }
    if (updatelevelup) {
        const arr = calculateOfferingsToLevelXTimes(i - 1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[i - 1], _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offeringbuyamount);
        let offerings = 0;
        let j = 0;
        while (offerings < _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards && j < arr.length) {
            offerings += arr[j];
            j++;
        }
        const check = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offeringbuyamount === j && offerings <= _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards;
        const s = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offeringbuyamount === 1 ? "once" : `${check ? j : Math.max(j - 1, 0)} times`;
        document.getElementById("runeDisplayInfo").textContent = `+${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(amountPerOffering)} EXP per offering. ${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(offerings)} Offerings to level up ${s}.`;
    }
};
const resetofferings = (input) => {
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards += (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateOfferings)(input);
};
const redeemShards = (runeIndexPlusOne, auto = false, cubeUpgraded = 0) => {
    const runeIndex = runeIndexPlusOne - 1;
    const unlockedRune = [
        true,
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[38] > 0.5,
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[44] > 0.5,
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[102] > 0.5,
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[82] > 0.5
    ];
    let levelsToAdd = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offeringbuyamount;
    if (auto) {
        levelsToAdd = Math.pow(2, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel);
    }
    if (auto && cubeUpgraded > 0) {
        levelsToAdd = Math.min(1e4, (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateMaxRunes)(runeIndex + 1));
    }
    let levelsAdded = 0;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards > 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeIndex] < (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateMaxRunes)(runeIndex + 1) && unlockedRune[runeIndex]) {
        let all = 0;
        const maxLevel = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateMaxRunes)(runeIndex + 1);
        const amountArr = calculateOfferingsToLevelXTimes(runeIndex, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeIndex], levelsToAdd);
        let toSpendTotal = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards, amountArr.reduce((x, y) => x + y, 0));
        if (cubeUpgraded > 0) {
            toSpendTotal = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards, cubeUpgraded);
        }
        const fact = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneExpGiven)(runeIndex, false, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeIndex], true);
        const a = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[71] / 25;
        const add = fact[0] - a * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeIndex];
        const mult = fact.slice(1, fact.length).reduce((x, y) => x * y, 1);
        while (toSpendTotal > 0 && levelsAdded < levelsToAdd && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeIndex] < maxLevel) {
            const exp = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneExpToLevel)(runeIndex, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeIndex]) - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeexp[runeIndex];
            const expPerOff = (add + a * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeIndex]) * mult;
            let toSpend = Math.min(toSpendTotal, Math.ceil(exp / expPerOff));
            if (toSpend === undefined || isNaN(toSpend)) {
                toSpend = toSpendTotal;
            }
            toSpendTotal -= toSpend;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards -= toSpend;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeexp[runeIndex] += toSpend * expPerOff;
            all += toSpend;
            while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeexp[runeIndex] >= (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneExpToLevel)(runeIndex) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeIndex] < maxLevel) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeIndex] += 1;
                levelsAdded++;
            }
        }
        for (let runeToUpdate = 0; runeToUpdate < 5; ++runeToUpdate) {
            if (unlockedRune[runeToUpdate]) {
                if (runeToUpdate !== runeIndex) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeexp[runeToUpdate] += all * (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneExpGiven)(runeToUpdate, true);
                }
                while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeexp[runeToUpdate] >= (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneExpToLevel)(runeToUpdate) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeToUpdate] < (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateMaxRunes)(runeToUpdate + 1)) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[runeToUpdate] += 1;
                }
            }
        }
        displayRuneInformation(runeIndexPlusOne);
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneLevels)();
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards < 0 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards = 0;
    }
};
const calculateOfferingsToLevelXTimes = (runeIndex, runeLevel, levels) => {
    let exp = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneExpToLevel)(runeIndex, runeLevel) - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeexp[runeIndex];
    const maxLevel = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateMaxRunes)(runeIndex + 1);
    const arr = [];
    let sum = 0;
    const off = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards;
    let levelsAdded = 0;
    const fact = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneExpGiven)(runeIndex, false, runeLevel, true);
    const a = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[71] / 25;
    const add = fact[0] - a * runeLevel;
    const mult = fact.slice(1, fact.length).reduce((x, y) => x * y, 1);
    while (levelsAdded < levels && runeLevel + levelsAdded < maxLevel && sum < off) {
        const expPerOff = (add + a * (runeLevel + levelsAdded)) * mult;
        const amount = Math.ceil(exp / expPerOff);
        sum += amount;
        arr.push(amount);
        levelsAdded += 1;
        exp = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneExpToLevel)(runeIndex, runeLevel + levelsAdded)
            - (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneExpToLevel)(runeIndex, runeLevel + levelsAdded - 1);
    }
    return arr;
};


/***/ }),
/* 16 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "openTesseract": () => /* binding */ openTesseract,
/* harmony export */   "calculateTesseractBlessings": () => /* binding */ calculateTesseractBlessings
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _Cubes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17);



const openTesseract = (value, max = false) => {
    let toSpend = Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowTesseracts, value);
    if (max) {
        toSpend = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowTesseracts;
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowTesseracts -= toSpend;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractOpenedDaily += toSpend;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractQuarkDaily < 25 + 75 * +_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.tesseractToQuarkBought) {
        while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractOpenedDaily >= 10 * Math.pow(1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractQuarkDaily, 3) &&
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractQuarkDaily < 25 + 75 * +_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.tesseractToQuarkBought) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractQuarkDaily += 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += 1;
        }
    }
    const toSpendModulo = toSpend % 20;
    const toSpendDiv20 = Math.floor(toSpend / 20);
    const blessings = {
        accelerator: { weight: 4, pdf: (x) => 0 <= x && x <= 20 },
        multiplier: { weight: 4, pdf: (x) => 20 < x && x <= 40 },
        offering: { weight: 2, pdf: (x) => 40 < x && x <= 50 },
        runeExp: { weight: 2, pdf: (x) => 50 < x && x <= 60 },
        obtainium: { weight: 2, pdf: (x) => 60 < x && x <= 70 },
        antSpeed: { weight: 2, pdf: (x) => 70 < x && x <= 80 },
        antSacrifice: { weight: 1, pdf: (x) => 80 < x && x <= 85 },
        antELO: { weight: 1, pdf: (x) => 85 < x && x <= 90 },
        talismanBonus: { weight: 1, pdf: (x) => 90 < x && x <= 95 },
        globalSpeed: { weight: 1, pdf: (x) => 95 < x && x <= 100 }
    };
    for (const key in _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings[key] += blessings[key].weight * toSpendDiv20;
    }
    for (let i = 0; i < toSpendModulo; i++) {
        const num = 100 * Math.random();
        for (const key in _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings) {
            if (blessings[key].pdf(num))
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings[key] += 1;
        }
    }
    calculateTesseractBlessings();
    const extraCubeBlessings = Math.floor(12 * toSpend * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[153]);
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowCubes += extraCubeBlessings;
    (0,_Cubes__WEBPACK_IMPORTED_MODULE_2__.openCube)(extraCubeBlessings, false);
};
const calculateTesseractBlessings = () => {
    const tesseractArray = [_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings.accelerator, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings.multiplier, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings.offering, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings.runeExp, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings.obtainium, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings.antSpeed, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings.antSacrifice, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings.antELO, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings.talismanBonus, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings.globalSpeed];
    for (let i = 0; i < 10; i++) {
        let power = 1;
        let mult = 1;
        if (tesseractArray[i] >= 1000 && i !== 5) {
            power = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.giftDRPower[i];
            mult *= Math.pow(1000, (1 - _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.giftDRPower[i]));
        }
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.tesseractBonusMultiplier[i + 1] = 1 + mult * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.giftbase[i] * Math.pow(tesseractArray[i], power) * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.hypercubeBonusMultiplier[i + 1];
    }
};


/***/ }),
/* 17 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cubeDistributions": () => /* binding */ cubeDistributions,
/* harmony export */   "openCubes": () => /* binding */ openCubes,
/* harmony export */   "openCube": () => /* binding */ openCube,
/* harmony export */   "cubeUpgradeDesc": () => /* binding */ cubeUpgradeDesc,
/* harmony export */   "updateCubeUpgradeBG": () => /* binding */ updateCubeUpgradeBG,
/* harmony export */   "buyCubeUpgrades": () => /* binding */ buyCubeUpgrades
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
/* harmony import */ var _Challenges__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var _Upgrades__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(18);
/* harmony import */ var _UpdateHTML__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5);







const distributions = {
    cubes: {
        accelerator: { weight: 4, pdf: (x) => 0 <= x && x <= 20 },
        multiplier: { weight: 4, pdf: (x) => 20 < x && x <= 40 },
        offering: { weight: 2, pdf: (x) => 40 < x && x <= 50 },
        runeExp: { weight: 2, pdf: (x) => 50 < x && x <= 60 },
        obtainium: { weight: 2, pdf: (x) => 60 < x && x <= 70 },
        antSpeed: { weight: 2, pdf: (x) => 70 < x && x <= 80 },
        antSacrifice: { weight: 1, pdf: (x) => 80 < x && x <= 85 },
        antELO: { weight: 1, pdf: (x) => 85 < x && x <= 90 },
        talismanBonus: { weight: 1, pdf: (x) => 90 < x && x <= 95 },
        globalSpeed: { weight: 1, pdf: (x) => 95 < x && x <= 100 }
    },
    tesseracts: {
        accelerator: { weight: 4, pdf: (x) => 0 <= x && x <= 20 },
        multiplier: { weight: 4, pdf: (x) => 20 < x && x <= 40 },
        offering: { weight: 2, pdf: (x) => 40 < x && x <= 50 },
        runeExp: { weight: 2, pdf: (x) => 50 < x && x <= 60 },
        obtainium: { weight: 2, pdf: (x) => 60 < x && x <= 70 },
        antSpeed: { weight: 2, pdf: (x) => 70 < x && x <= 80 },
        antSacrifice: { weight: 1, pdf: (x) => 80 < x && x <= 85 },
        antELO: { weight: 1, pdf: (x) => 85 < x && x <= 90 },
        talismanBonus: { weight: 1, pdf: (x) => 90 < x && x <= 95 },
        globalSpeed: { weight: 1, pdf: (x) => 95 < x && x <= 100 }
    },
    hypercubes: {
        accelerator: { weight: 4, pdf: (x) => 0 <= x && x <= 20 },
        multiplier: { weight: 4, pdf: (x) => 20 < x && x <= 40 },
        offering: { weight: 2, pdf: (x) => 40 < x && x <= 50 },
        runeExp: { weight: 2, pdf: (x) => 50 < x && x <= 60 },
        obtainium: { weight: 2, pdf: (x) => 60 < x && x <= 70 },
        antSpeed: { weight: 2, pdf: (x) => 70 < x && x <= 80 },
        antSacrifice: { weight: 1, pdf: (x) => 80 < x && x <= 85 },
        antELO: { weight: 1, pdf: (x) => 85 < x && x <= 90 },
        talismanBonus: { weight: 1, pdf: (x) => 90 < x && x <= 95 },
        globalSpeed: { weight: 1, pdf: (x) => 95 < x && x <= 100 }
    },
    platonics: {
        cubes: { weight: 13200, pdf: (x) => 0 <= x && x <= 33.000 },
        tesseracts: { weight: 13200, pdf: (x) => 33.000 < x && x <= 66.000 },
        hypercubes: { weight: 13200, pdf: (x) => 66.000 < x && x <= 99.000 },
        platonics: { weight: 396, pdf: (x) => 99.000 < x && x <= 99.990 },
        hypercubeBonus: { weight: 1, pdf: (x) => 99.990 < x && x <= 99.9925 },
        taxes: { weight: 1, pdf: (x) => 99.9925 < x && x <= 99.995 },
        scoreBonus: { weight: 1, pdf: (x) => 99.995 < x && x <= 99.9975 },
        globalSpeed: { weight: 1, pdf: (x) => 99.9975 < x && x <= 100 },
    }
};
const cubeDistributions = (k) => distributions[k];
const openCubes = (value, cubeName, max = false) => {
    return [value, cubeName, max];
};
const openCube = (value, max = false) => {
    let toSpend = max ? _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.wowCubes : Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.wowCubes, value);
    if (value === 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeBlessings.accelerator >= 2e11 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.achievements[246] < 1) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_1__.achievementaward)(246);
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.wowCubes -= toSpend;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeOpenedDaily += toSpend;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeQuarkDaily < 25 + 75 * +_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.shopUpgrades.cubeToQuarkBought) {
        while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeOpenedDaily >= 10 * Math.pow(1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeQuarkDaily, 4) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeQuarkDaily < 25 + 75 * +_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.shopUpgrades.cubeToQuarkBought) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeQuarkDaily += 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.worlds += 1;
        }
    }
    toSpend *= (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.researches[138] / 1000);
    toSpend *= (1 + 0.8 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.researches[168] / 1000);
    toSpend *= (1 + 0.6 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.researches[198] / 1000);
    toSpend = Math.floor(toSpend);
    let toSpendModulo = toSpend % 20;
    let toSpendDiv20 = Math.floor(toSpend / 20);
    const blessings = {
        accelerator: { weight: 4, pdf: (x) => 0 <= x && x <= 20 },
        multiplier: { weight: 4, pdf: (x) => 20 < x && x <= 40 },
        offering: { weight: 2, pdf: (x) => 40 < x && x <= 50 },
        runeExp: { weight: 2, pdf: (x) => 50 < x && x <= 60 },
        obtainium: { weight: 2, pdf: (x) => 60 < x && x <= 70 },
        antSpeed: { weight: 2, pdf: (x) => 70 < x && x <= 80 },
        antSacrifice: { weight: 1, pdf: (x) => 80 < x && x <= 85 },
        antELO: { weight: 1, pdf: (x) => 85 < x && x <= 90 },
        talismanBonus: { weight: 1, pdf: (x) => 90 < x && x <= 95 },
        globalSpeed: { weight: 1, pdf: (x) => 95 < x && x <= 100 }
    };
    if (toSpendDiv20 > 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[13] === 1) {
        toSpendModulo += toSpendDiv20;
    }
    if (toSpendDiv20 > 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[23] === 1) {
        toSpendModulo += toSpendDiv20;
    }
    if (toSpendDiv20 > 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[33] === 1) {
        toSpendModulo += toSpendDiv20;
    }
    toSpendDiv20 += 100 / 100 * Math.floor(toSpendModulo / 20);
    toSpendModulo = toSpendModulo % 20;
    for (const key of Object.keys(_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeBlessings)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeBlessings[key] += blessings[key].weight * toSpendDiv20 * (1 + Math.floor((0,_Challenges__WEBPACK_IMPORTED_MODULE_2__.CalcECC)('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.challengecompletions[12])));
    }
    for (let i = 0; i < toSpendModulo; i++) {
        const num = 100 * Math.random();
        for (const key of Object.keys(_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeBlessings)) {
            if (blessings[key].pdf(num))
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeBlessings[key] += (1 + Math.floor((0,_Challenges__WEBPACK_IMPORTED_MODULE_2__.CalcECC)('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.challengecompletions[12])));
        }
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateCubeBlessings)();
};
const cubeUpgradeName = [
    "Wow! I want more Cubes.",
    "Wow! I want passive Offering gain too.",
    "Wow! I want better passive Obtainium",
    "Wow! I want to keep mythos building autobuyers.",
    "Wow! I want to keep mythos upgrade autobuyer.",
    "Wow! I want to keep auto mythos gain.",
    "Wow! I want the particle building automators.",
    "Wow! I want to automate Particle Upgrades.",
    "Wow! I want to automate researches better dangit.",
    "Wow! This is pretty good but expensive.",
    "Wow! I want more cubes 2.",
    "Wow! I want building power to be useful 1.",
    "Wow! I want opened cubes to give more tributes 1.",
    "Wow! I want Iris Tribute bonuses to scale better 1.",
    "Wow! I want Ares Tribute bonuses to scale better 1.",
    "Wow! I want more rune levels 1.",
    "Wow! I want just a little bit more crystal power.",
    "Wow! I want to accelerate time!",
    "Wow! I want to unlock a couple more coin upgrades.",
    "Wow! I want to improve automatic rune tools.",
    "Wow! I want more cubes 3.",
    "Wow! I wish my Artemis was a little better 1",
    "Wow! I want opened cubes to give more tributes 2.",
    "Wow! I want Plutus Tribute bonuses to scale better 1",
    "Wow! I want Moloch Tribute bonuses to scale better 1",
    "Wow! I want to start Ascensions with rune levels.",
    "Wow! I want to start Ascensions with one of each reincarnation building.",
    "Wow! I want to finally render Reincarnating obsolete.",
    "Wow! I want to increase maximum Reincarnation Challenge completions.",
    "Wow! I want to arbitrarily increase my cube and tesseract gain.",
    "Wow! I want more cubes 4.",
    "Wow! I want runes to be easier to level up over time.",
    "Wow! I want opened cubes to give more tributes 3.",
    "Wow! I want Chronos Tribute bonuses to scale better 1",
    "Wow! I want Aphrodite Tribute bonuses to scale better 1",
    "Wow! I want building power to be useful 2.",
    "Wow! I want more rune levels 2.",
    "Wow! I want more tesseracts while corrupted!",
    "Wow! I want more score from challenge 10 completions.",
    "Wow! I want Athena Tribute bonuses to scale better 1.",
    "Wow! I want more cubes 5.",
    "Wow! I want some Uncorruptable Obtainium.",
    "Wow! I want even more Uncorruptable Obtainium!",
    "Wow! I want Midas Tribute bonus to scale better 1.",
    "Wow! I want Hermes Tribute bonus to scale better 1.",
    "Wow! I want even MORE offerings!",
    "Wow! I want even MORE obtainium!",
    "Wow! I want to start ascension with an ant.",
    "Wow! I want to start ascension with a challenge 6-8 completion.",
    "Wow! I want to be enlightened by the power of a thousand suns."
];
const cubeBaseCost = [
    200, 200, 200, 500, 500, 500, 500, 500, 2000, 40000,
    5000, 1000, 10000, 20000, 40000, 10000, 4000, 1e4, 50000, 12500,
    5e4, 3e4, 3e4, 4e4, 2e5, 4e5, 1e5, 177777, 1e5, 1e6,
    5e5, 3e5, 2e6, 4e6, 2e6, 4e6, 1e6, 2e7, 5e7, 1e7,
    5e6, 1e7, 1e8, 4e7, 2e7, 4e7, 5e7, 1e8, 5e8, 1e8
];
const cubeMaxLevel = [
    2, 10, 5, 1, 1, 1, 1, 1, 1, 1,
    2, 10, 1, 10, 10, 10, 5, 1, 1, 1,
    2, 10, 1, 10, 10, 10, 1, 1, 5, 1,
    2, 1, 1, 10, 10, 10, 10, 1, 1, 10,
    2, 10, 10, 10, 10, 20, 20, 1, 1, 100000
];
const cubeUpgradeDescriptions = [
    "[1x1] You got it! +14% cubes from Ascending per level.",
    "[1x2] Plutus grants you +1 Offering per second, no matter what, per level. Also a +0.5% Recycling chance!",
    "[1x3] Athena grants you +10% more Obtainium, and +80% Auto Obtainium per level.",
    "[1x4] You keep those 5 useful automation upgrades in the upgrades tab!",
    "[1x5] You keep the mythos upgrade automation upgrade in the upgrades tab!",
    "[1x6] You keep the automatic mythos gain upgrade in the upgrades tab!",
    "[1x7] Automatically buy each Particle Building whenever possible.",
    "[1x8] Automatically buy Particle Upgrades.",
    "[1x9] The research automator in shop now automatically buys cheapest when enabled. It's like a roomba kinda!",
    "[1x10] Unlock some tools to automate Ascensions or whatever. Kinda expensive but cool.",
    "[2x1] You got it again! +7% cubes from Ascending per level.",
    "[2x2] Raise building power to the power of (1 + level * 0.09).",
    "[2x3] For each 20 cubes opened at once, you get 1 additional tribute at random.",
    "[2x4] Iris shines her light on you. The effect power is now increased by +0.01 (+0.005 if >1000 tributes) per level.",
    "[2x5] Ares teaches you the art of war. The effect power is now increased by +0.01 (+0.0033 if >1000 tributes) per level.",
    "[2x6] You got it buster! +20 ALL max rune levels per level.",
    "[2x7] Yep. +5 Exponent per level to crystals.",
    "[2x8] Quantum tunnelling ftw. +20% global game speed.",
    "[2x9] Unlocks new coin upgrades ranging from start of ascend to post c10 and beyond.",
    "[2x10] The rune automator in shop now spends all offerings automatically, 'splitting' them into each of the 5 runes equally.",
    "[3x1] You got it once more! +7% cubes from Ascending per level.",
    "[3x2] The exponent of the bonus of Artemis is increased by 0.05 per level.",
    "[3x3] For each 20 cubes opened at once, you get 1 additional tribute at random.",
    "[3x4] Plutus teaches you the Art of the Deal. The effect power is now increased by +0.01 (+0.0033 if >1000 tributes) per level.",
    "[3x5] Moloch lends you a hand in communicating with Ant God. The effect power is now increased by +0.01 (+0.0033 if >1000 tributes) per level.",
    "[3x6] Start ascensions with 3 additional rune levels [Does not decrease EXP requirement] per level.",
    "[3x7] Upon an ascension, you will start with 1 of each reincarnation building to speed up Ascensions.",
    "[3x8] Well, I think you got it? Gain +1% of particles on Reincarnation per second.",
    "[3x9] Add +5 to Reincarnation Challenge cap per level. Completions after 25 scale faster in requirement!",
    "[3x10] You now get +25% Cubes and Tesseracts forever!",
    "[4x1] You again? +7% cubes from Ascending per level.",
    "[4x2] Gain +0.1% Rune EXP per second you have spent in an Ascension. This has no cap!",
    "[4x3] For each 20 cubes opened at once, you get yet another additional tribute at random.",
    "[4x4] Chronos overclocks the universe for your personal benefit. (Rewards the same as others)",
    "[4x5] Aphrodite increases the fertility of your coins. (Rewards the same as others)",
    "[4x6] Raise building power to (1 + 0.05 * Level) once more.",
    "[4x7] Adds +20 to ALL rune caps again per level.",
    "[4x8] Gain +0.5% more tesseracts on ascension for each additional level in a corruption you enable.",
    "[4x9] Instead of the multiplier being 1.03^(C10 completions), it is now 1.035^(C10 completions)!",
    "[4x10] Athena is very smart (Rewards the same as others).",
    "[5x1] Yeah yeah yeah, +7% cubes from Ascending per level. Isn't it enough?",
    "[5x2] You now gain +4% Obtainium per level, which is not dependent on corruptions!",
    "[5x3] Gain another +3% corruption-independent Obtainium per level.",
    "[5x4] Blah blah blah Midas works harder (same rewards as before)",
    "[5x5] Blah blah blah Hermes works harder (same rewards as before)",
    "[5x6] Gain +5% more offerings per level!",
    "[5x7] Gain +10% more obtainium per level!",
    "[5x8] When you ascend, start with 1 worker ant (this is a lot better than it sounds!)",
    "[5x9] When you ascend, gain 1 of each challenge 6-8 completion.",
    "[5x10] What doesn't this boost? +0.01% Accelerators, Multipliers, Accelerator Boosts, +0.02% Obtainium, +0.02% Offerings, +0.1 Max Rune Levels, +1 Effective ELO, +0.001 Talisman bonuses per level."
];
const getCubeCost = (i, linGrowth = 0) => {
    let amountToBuy = _Variables__WEBPACK_IMPORTED_MODULE_6__.Globals.buyMaxCubeUpgrades ? 1e5 : 1;
    amountToBuy = Math.min(cubeMaxLevel[i - 1] - _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i], amountToBuy);
    const metaData = (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateSummationNonLinear)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i], cubeBaseCost[i - 1], _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.wowCubes, linGrowth, amountToBuy);
    return ([metaData[0], metaData[1]]);
};
const cubeUpgradeDesc = (i, linGrowth = 0) => {
    const metaData = getCubeCost(i, linGrowth);
    const a = document.getElementById("cubeUpgradeName");
    const b = document.getElementById("cubeUpgradeDescription");
    const c = document.getElementById("cubeUpgradeCost");
    const d = document.getElementById("cubeUpgradeLevel");
    a.textContent = cubeUpgradeName[i - 1];
    b.textContent = cubeUpgradeDescriptions[i - 1];
    c.textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(metaData[1], 0, true) + " Wow! Cubes [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(metaData[0] - _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i], 0, true) + " Levels]";
    c.style.color = "green";
    d.textContent = "Level: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i], 0, true) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(cubeMaxLevel[i - 1], 0, true);
    d.style.color = "white";
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.wowCubes < cubeBaseCost[i - 1]) {
        c.style.color = "crimson";
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i] === cubeMaxLevel[i - 1]) {
        c.style.color = "gold";
        d.style.color = "plum";
    }
};
const updateCubeUpgradeBG = (i) => {
    const a = document.getElementById("cubeUpg" + i);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i] > cubeMaxLevel[i - 1]) {
        console.log("Refunded " + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i] - cubeMaxLevel[i - 1]) + " levels of Cube Upgrade " + i + ", adding " + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i] - cubeMaxLevel[i - 1]) * cubeBaseCost[i - 1] + " Wow! Cubes to balance.");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.wowCubes += (_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i] - cubeMaxLevel[i - 1]) * cubeBaseCost[i - 1];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i] = cubeMaxLevel[i - 1];
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i] === 0) {
        a.style.backgroundColor = "black";
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i] > 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i] < cubeMaxLevel[i - 1]) {
        a.style.backgroundColor = "purple";
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i] === cubeMaxLevel[i - 1]) {
        a.style.backgroundColor = "green";
    }
};
const buyCubeUpgrades = (i, linGrowth = 0) => {
    const metaData = getCubeCost(i, linGrowth);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.default.wowCubes >= metaData[1] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i] < cubeMaxLevel[i - 1]) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.wowCubes -= 100 / 100 * metaData[1];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[i] = metaData[0];
    }
    if (i === 4 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[4] > 0) {
        for (let j = 94; j <= 98; j++) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.upgrades[j] = 1;
            (0,_Upgrades__WEBPACK_IMPORTED_MODULE_4__.upgradeupdate)(j, true);
        }
    }
    if (i === 5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[5] > 0) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.upgrades[99] = 1;
        (0,_Upgrades__WEBPACK_IMPORTED_MODULE_4__.upgradeupdate)(99, true);
    }
    if (i === 6 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.cubeUpgrades[6] > 0) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.default.upgrades[100] = 1;
        (0,_Upgrades__WEBPACK_IMPORTED_MODULE_4__.upgradeupdate)(100, true);
    }
    cubeUpgradeDesc(i, linGrowth);
    updateCubeUpgradeBG(i);
    (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_5__.revealStuff)();
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateCubeBlessings)();
};


/***/ }),
/* 18 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "upgradeeffects": () => /* binding */ upgradeeffects,
/* harmony export */   "upgradedescriptions": () => /* binding */ upgradedescriptions,
/* harmony export */   "crystalupgradedescriptions": () => /* binding */ crystalupgradedescriptions,
/* harmony export */   "upgradeupdate": () => /* binding */ upgradeupdate,
/* harmony export */   "returnConstUpgEffect": () => /* binding */ returnConstUpgEffect,
/* harmony export */   "getConstUpgradeMetadata": () => /* binding */ getConstUpgradeMetadata,
/* harmony export */   "constantUpgradeDescriptions": () => /* binding */ constantUpgradeDescriptions,
/* harmony export */   "buyConstantUpgrades": () => /* binding */ buyConstantUpgrades
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var _Utility__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4);
/* harmony import */ var _Buy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(19);
/* harmony import */ var _Generators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(20);
/* harmony import */ var _Automation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(21);
/* harmony import */ var _UpdateHTML__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8);









const upgdesc = {
    upgdesc1: "Increase production of Workers per producer bought.",
    upgdesc2: "Increase production of Investments per producer bought.",
    upgdesc3: "Increase production of Printers per producer bought.",
    upgdesc4: "Increase production of Mints per producer bought.",
    upgdesc5: "Increase production of Alchemies per producer bought.",
    upgdesc6: "Increase all production based on producer bought.",
    upgdesc7: "Gain free multipliers based on your purchased Alchemies.",
    upgdesc8: "Gain 1 free Accelerator per 7 purchased Multipliers.",
    upgdesc9: "Gain 1 free Multiplier per 10 purchased Accelerators.",
    upgdesc10: "Improve Workers based on the first 750 purchased Investments.",
    upgdesc11: "Accelerators improve generation production by 2% each.",
    upgdesc12: "Each prestige multiplies production by 1.01, multiplicatively (Max: 1e4x).",
    upgdesc13: "Augments buff the production of Investments.",
    upgdesc14: "Free Accelerators buff generation of Printers.",
    upgdesc15: "Free Accelerators buff generation of Mints.",
    upgdesc16: "Acceleration Multiplier buffs Diamond gain.",
    upgdesc17: "Multiply Mint production by 1e+100.",
    upgdesc18: "Multiply Printer production based on Mythos Shards.",
    upgdesc19: "Multiply Investment production based on Mythos.",
    upgdesc20: "Coin upgrade 1 is raised to the eleventh power.",
    upgdesc21: "Gain 1 Multiplier and 5 Accelerators plus 1% more free Multipliers/Accelerators.",
    upgdesc22: "Gain 1 Multiplier and 4 Accelerators plus 1% more free Multipliers/Accelerators.",
    upgdesc23: "Gain 1 Multiplier and 3 Accelerators plus 1% more free Multipliers/Accelerators.",
    upgdesc24: "Gain 1 Multiplier and 2 Accelerators plus 1% more free Multipliers/Accelerators.",
    upgdesc25: "Gain 1 Multiplier and 1 Accelerators plus 1% more free Multipliers/Accelerators.",
    upgdesc26: "Gain a free Accelerator Boost.",
    upgdesc27: "Gain free Accelerators based on unspent Coins.",
    upgdesc28: "Gain a free Multiplier per 160 Coin producers bought.",
    upgdesc29: "Gain a free Accelerator per 80 Coin producers bought.",
    upgdesc30: "Gain free Multipliers based on unspent Coins.",
    upgdesc31: "Gain 1 free Accelerator Boost per 2,000 Coin producers bought.",
    upgdesc32: "Gain free Accelerators based on Unspent Diamonds.",
    upgdesc33: "Gain 1 free Multiplier for each Accelerator Boost owned.",
    upgdesc34: "Gain 3% more free Multipliers.",
    upgdesc35: "Gain 2% more free Multipliers.",
    upgdesc36: "Multiply crystal production by Diamonds, maximum 1e5000x.",
    upgdesc37: "Multiply mythos shard production by the squared logarithm of Diamonds.",
    upgdesc38: "Gain +15% more offerings thanks to generous Discord Server Boosters!",
    upgdesc39: "Gain +50% more Ant Speed thanks to generous Discord Server Boosters!",
    upgdesc40: "Gain +25% more Ant Sacrifice rewards thanks to generous Discord Server Boosters!",
    upgdesc41: "Multiply production based on unspent Mythos.",
    upgdesc42: "Multiply Mythos Shard production based on unspent Diamonds.",
    upgdesc43: "Multiply coin production by 1.01 per transcension (Max: 1e30x).",
    upgdesc44: "Multiply Mythos gain on Transcend by 1.01 per transcension (Max: 1e6x).",
    upgdesc45: "Gain free Accelerators based on Mythos Shards.",
    upgdesc46: "Accelerator Boosts are 5% stronger and do not reset prestige features.",
    upgdesc47: "Multiply Mythos Shard production based on your AP.",
    upgdesc48: "Multiply production based on owned Accelerators and Multipliers.",
    upgdesc49: "Gain free Multipliers based on unspent Mythos.",
    upgdesc50: "Gain +25% free Accelerators and Multipliers, but ONLY while doing challenges.",
    upgdesc51: "Increase production of all Mythos buildings based on owned Accelerator Boosts.",
    upgdesc52: "Mythos building exponent +0.025.",
    upgdesc53: "Augments produce more Shards based on Acceleration Multiplier.",
    upgdesc54: "Wizards produce more Enchantments based on Multiplier.",
    upgdesc55: "Grandmasters produce more Oracles based on Building power.",
    upgdesc56: "Worker production is multiplied by 1e+5000.",
    upgdesc57: "Investment production is multiplied by 1e+7500.",
    upgdesc58: "Printer production is multiplied by 1e+15000.",
    upgdesc59: "Coin Mint production is multiplied by 1e+25000.",
    upgdesc60: "Alchemies production is multiplied by 1e+35000.",
    upgdesc61: "Welcome to reincarnation! +5% Offering Recycle, +5 EXP/Offering!",
    upgdesc62: "Completing challenges, automatically or manually, increase offerings gained in Reincarnation. Bonus subject to time multiplier!",
    upgdesc63: "Crystal Production is multiplied based on Particles to the sixth power [Caps at 1e6000x].",
    upgdesc64: "Mythos Shard Production is multiplied by your Particles squared.",
    upgdesc65: "Multiply the gain of Particles from Reincarnation by 5x!",
    upgdesc66: "When you use an Offering, every unlocked rune will get 3 free experience.",
    upgdesc67: "Atom gain is increased by 3% per Particle producer purchased!",
    upgdesc68: "Gain a free multiplier for every 1e1000x increase in tax.",
    upgdesc69: "Gain more Obtainium based on your particle gain. [Works with automation at a reduced rate!]",
    upgdesc70: "Time seems to go +0.333*log10(MAX obtainium +1)% faster when you buy this.",
    upgdesc71: "Runes will gain (Rune Level/25) additional EXP per offering used.",
    upgdesc72: "Obtainium gain from Reincarnations is multiplied (1 + 2C) where C is #Reincarnation Challenges completed, up to 50x!",
    upgdesc73: "Gain +100% free accelerator boosts and +10 free Crystal Upgrade levels, but only in Reincarnation Challenges.",
    upgdesc74: "Obtainium gain is increased based on highest ever unspent offerings. [Max: 100,000 unspent]",
    upgdesc75: "Offering gain is increased based on highest ever unspent obtainium [Max: 30,000,000 obtainium]",
    upgdesc76: "Ant generation kinda slow? I agree! Make all ant tiers 5x faster!",
    upgdesc77: "This is Synergism, right? Let's make each purchased ant make all ants 0.4% faster.",
    upgdesc78: "Gain an ant speed multiplier equivalent to (1 + 0.005 * (log10(MAX offerings + 1))^2).",
    upgdesc79: "The Ant God will accept an arbitrary number of Particles in order to give you 10% more from sacrifices.",
    upgdesc80: "The Ant God will accept a larger arbitrary number of Particles to give you more ant ELO.",
    upgdesc81: "Automatically buy Workers if affordable.",
    upgdesc82: "Automatically buy Investments if affordable.",
    upgdesc83: "Automatically buy Printers if affordable.",
    upgdesc84: "Automatically buy Coin Mints if affordable.",
    upgdesc85: "Automatically buy Alchemies if affordable.",
    upgdesc86: "Automatically buy Accelerators if affordable.",
    upgdesc87: "Automatically buy Multipliers if affordable.",
    upgdesc88: "Automatically buy Accelerator Boosts if affordable.",
    upgdesc89: "Unlock Automatic Transcensions.",
    upgdesc90: "Automatically buy from the Generator Shop.",
    upgdesc91: "Automatically buy Coin Upgrades.",
    upgdesc92: "Automatically buy Diamond Upgrades.",
    upgdesc93: "Generate 1% of Diamond Gain from prestiging per second.",
    upgdesc94: "Automatically buy Augments if affordable.",
    upgdesc95: "Automatically buy Enchantments if affordable.",
    upgdesc96: "Automatically buy Wizards if affordable.",
    upgdesc97: "Automatically buy Oracles if affordable.",
    upgdesc98: "Automatically buy Grandmasters if affordable.",
    upgdesc99: "Automatically buy Mythos Upgrades if affordable.",
    upgdesc100: "Generate 1% of Mythos Gain from transcending per second.",
    upgdesc101: "Alchemies will produce Coin Mints.",
    upgdesc102: "Coin Mints will produce Printers.",
    upgdesc103: "Printers will produce Investments.",
    upgdesc104: "Investments will produce Workers.",
    upgdesc105: "Purchased Workers will produce Alchemies.",
    upgdesc106: "Refineries can produce Alchemies equal to Refineries owned raised to 0.10",
    upgdesc107: "Refinery -> Alchemy exponent increased from 0.10 to 0.25.",
    upgdesc108: "Refinery -> Alchemy exponent increased from 0.25 to 0.50",
    upgdesc109: "Refinery -> Alchemy exponent increased from 0.50 to 0.75",
    upgdesc110: "Refinery -> Alchemy exponent increased from 0.75 to 1",
    upgdesc111: "Augments can produce Pandora Boxes equal to Augments owned raised to 0.08",
    upgdesc112: "Augment -> Box exponent increased from 0.08 to 0.16",
    upgdesc113: "Augment -> Box exponent increased from 0.16 to 0.24",
    upgdesc114: "Augment -> Box exponent increased from 0.24 to 0.32",
    upgdesc115: "Augment -> Box exponent increased from 0.32 to 0.40",
    upgdesc116: "Protons can produce Grandmasters equal to Protons owned raised to 0.05",
    upgdesc117: "Protons -> Grandmaster exponent increased from 0.05 to 0.10",
    upgdesc118: "Protons -> Grandmaster exponent increased from 0.10 to 0.15",
    upgdesc119: "Protons -> Grandmaster exponent increased from 0.15 to 0.20",
    upgdesc120: "Protons -> Grandmaster exponent increased from 0.20 to 0.25",
    upgdesc121: "You probably autobought this. -50% taxes!",
    upgdesc122: "Increase Crystal Upgrade 3 cap from +12% to +100%!",
    upgdesc123: "Raise coin production to the power of 1.025. More EXPONENTS.",
    upgdesc124: "Gain +3% more effective ELO.",
    upgdesc125: "Constant Tax divisor is 0.333% stronger per challenge 10 completion. [Divisor^(1 + upgrade)]"
};
const crystalupgdesc = {
    crystalupgdesc1: "Gain a 5% multiplicative boost to crystals per AP per level.",
    crystalupgdesc2: "Gain a boost to crystals based on held coins per level.",
    crystalupgdesc3: "Each purchased Crystal producer increases generation of Crystal producers by .1% per level. [MAX: 12%]",
    crystalupgdesc4: "Improve the multiplier to coin production by .05 exponent per level. [MAX: +10.00]",
    crystalupgdesc5: "Every challenge completion increases crystal gain by 1% per level.",
    crystalupgdesc6: "Coming SOON!",
    crystalupgdesc7: "Coming SOON!",
    crystalupgdesc8: "Coming SOON!"
};
const constantUpgDesc = {
    constantUpgDesc1: "Make all Tesseract buildings 5% more productive per level.",
    constantUpgDesc2: "Each Tesseract building bought increases the production of all of them by 0.1% per level [Max 10%].",
    constantUpgDesc3: "Increase offering gain +2% per level.",
    constantUpgDesc4: "Increase obtainium gain +4% per level.",
    constantUpgDesc5: "Multiply ant speed by (1 + log10(Constant + 1)/10)^level",
    constantUpgDesc6: "Add +2 free Ant Levels per level.",
    constantUpgDesc7: "Provides 7 free rune levels and increases the rune cap by 3 per level.",
    constantUpgDesc8: "Increase the rune EXP given by offerings by 10% per level [Additive]",
    constantUpgDesc9: "When bought, rune effectiveness is increased by Log4(Talisman Shards +1) %",
    constantUpgDesc10: "When bought, gain Log4(Constant + 1)% more Wow! Cubes and Tesseracts on ascension."
};
const upgradetexts = [
    () => "Worker Production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned + 1) * Math.min(1e30, Math.pow(1.008, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned)), 2),
    () => "Investment Production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned + 1) * Math.min(1e30, Math.pow(1.008, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned)), 2),
    () => "Printer Production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned + 1) * Math.min(1e30, Math.pow(1.008, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned)), 2),
    () => "Mint Production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned + 1) * Math.min(1e30, Math.pow(1.008, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned)), 2),
    () => "Alchemy Production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned + 1) * Math.min(1e30, Math.pow(1.008, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned)), 2),
    () => "All Coin production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned + 1) * Math.min(1e30, Math.pow(1.008, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned)), 2),
    () => "Gain " + Math.min(4, 1 + Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin + 1, 10))) + " free multipliers from bought Alchemies.",
    () => "+" + Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought / 7) + " free Accelerators.",
    () => "+" + Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought / 10) + " free Multipliers.",
    () => "Worker Production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(2, Math.min(50, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin / 15)), 2),
    () => "Generator efficiency x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.02, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeAccelerator), 2),
    () => "All Coin production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.min(1e4, break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.01, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeCount)), 2),
    () => "Investment Production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.min(1e50, break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstGeneratedMythos.add(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedMythos).add(1), 4 / 3).times(1e10)), 2),
    () => "Printer Generation x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.15, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeAccelerator), 2),
    () => "Mint Generation x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.15, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeAccelerator), 2),
    () => "Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.acceleratorEffect, 1 / 3), 2) + "x more Diamonds on prestige",
    () => "Mint Production x1e100 (Duh)",
    () => "Printer Production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.min(1e125, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendShards.add(1))),
    () => "Investment Production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.min(1e200, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendPoints.times(1e30).add(1))),
    () => "All coin production is further multiplied by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow((_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned + 1) * Math.min(1e30, Math.pow(1.008, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned)), 10), 2) + " [Stacks with upgrade 1]!",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor((1 + (1 / 101 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeMultiplier)))) + " Multipliers, +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor((5 + (1 / 101 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeAccelerator)))) + " Accelerators.",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor((1 + (1 / 101 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeMultiplier)))) + " Multipliers, +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor((4 + (1 / 101 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeAccelerator)))) + " Accelerators.",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor((1 + (1 / 101 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeMultiplier)))) + " Multipliers, +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor((3 + (1 / 101 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeAccelerator)))) + " Accelerators.",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor((1 + (1 / 101 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeMultiplier)))) + " Multipliers, +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor((2 + (1 / 101 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeAccelerator)))) + " Accelerators.",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor((1 + (1 / 101 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeMultiplier)))) + " Multipliers, +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor((1 + (1 / 101 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeAccelerator)))) + " Accelerators.",
    () => "+1 Accelerator Boost.",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(250, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.add(1), 1e3))) + Math.max(0, Math.min(1750, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.add(1), 1e15)) - 50))) + " Accelerators.",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(1000, Math.floor((_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin) / 160))) + " Multipliers.",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor(Math.min(2000, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin) / 80))) + " Accelerators.",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(75, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.add(1), 1e10))) + Math.min(925, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.add(1), 1e30)))) + " Multipliers.",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalCoinOwned / 2000)) + " Accelerator Boosts",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(500, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.add(1), 1e25)))) + " Accelerators",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalAcceleratorBoost) + " Multipliers",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor(3 / 103 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeMultiplier)) + " Multipliers",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor(2 / 102 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeMultiplier)) + " Multipliers",
    () => "All Crystal producers x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.min("1e5000", break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints, 1 / 500)), 2),
    () => "All Mythos producers production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.add(10), 10), 2), 2),
    () => "Thank you for getting the server above 30 boosts!",
    () => "Thank you for getting the server above 30 boosts!",
    () => "Thank you for getting the server above 30 boosts!",
    () => "Welcome to Transcension! Coin production is multiplied by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.min(1e30, break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendPoints.add(1), 1 / 2))) + ".",
    () => "All mythos shard producers are going into overdrive: x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.min(1e50, break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.add(1), 1 / 50).dividedBy(2.5).add(1)), 2) + " the production!",
    () => "Multiply all coin production by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.min(1e30, break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.01, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendCount)), 2) + "!",
    () => "Multiply Mythos gained in Transcension by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.min(1e6, break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.01, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendCount)), 2) + "!",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(2500, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendShards.add(1), 10)))) + " Accelerators!",
    () => "It's kinda self-evident, ain't it?",
    () => "Mythos-tier producers production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.pow(1.05, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievementPoints) * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievementPoints + 1), 2),
    () => "Multiply coin production by a factor of " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.pow((_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalMultiplier * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalAccelerator / 1000 + 1), 8)) + "!",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(50, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendPoints.add(1), 1e10)))) + " Multipliers through magic!",
    () => "It's quite obvious what the benefit is, but you must be in a challenge for it to be in use!",
    () => "Mythos-tier producers production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalAcceleratorBoost, 2), 2) + "!",
    () => "Mythos-tier producers production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.globalMythosMultiplier, 0.025), 2) + "! It's like inception, or something.",
    () => "Augments will produce " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.min("1e1250", break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.acceleratorEffect, 1 / 125)), 2) + "x as many Mythos Shards.",
    () => "Wizards will produce " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.min("1e2000", break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.multiplierEffect, 1 / 180)), 2) + "x as many Enchantments; what productive spirits!",
    () => "Grandmasters will produce " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow("1e1000", Math.min(1000, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.buildingPower - 1))), 2) + "x as many Oracles!",
    () => "It's quite obvious, ain't it?",
    () => "Look above!",
    () => "Look above!",
    () => "Look above!",
    () => "Look above!",
    () => "+5% Offering Recycle/+5EXP per Offerings. Duh!",
    () => "Base offering amount for Reincarnations +" + Math.floor(1 / 5 * ((0,_Utility__WEBPACK_IMPORTED_MODULE_4__.sumContents)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions))) + ". Challenge yourself!",
    () => "All crystal production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.min("1e6000", break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints.add(1), 6))),
    () => "All mythos shard production x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints.add(1), 2)),
    () => "5x Particle gain from Reincarnations. Duh!",
    () => "It's quite clear in the description!",
    () => "The first particle-tier producer is " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.03, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedParticles + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedParticles + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedParticles + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedParticles + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedParticles), 2) + "x as productive.",
    () => "Your compliance with tax laws provides you with " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(2500, Math.floor(1 / 1000 * break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.taxdivisor, 10)))) + " free Multipliers, for some reason.",
    () => {
        const a = break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationPointGain.add(10), 10), 0.5);
        const b = break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationPointGain.add(10), 10), 0.5);
        return "Cosmic Magnetics will allow you to gain " +
            (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(10, new break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default(a).toNumber()), 2) +
            "x as much Obtainium reincarnating, x" +
            (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(3, new break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default(b).toNumber()), 2) +
            " automation gain.";
    },
    () => "Contracted time makes your game timers run " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 / 3 * Math.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxobtainium + 1) / Math.log(10), 2, true) + "% more quickly.",
    () => "Writing's on the wall. Look above!",
    () => "Obtainium multiplier: x" + Math.min(50, (1 + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[6] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[7] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[9] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[10])),
    () => "Same as Transcend upgrade 10, except you MUST be in a Reincarnation challenge in particular.",
    () => "Obtainium multiplier: x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((1 + 4 * Math.min(1, Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxofferings / 100000, 0.5))), 2),
    () => "Offering Multiplier: x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((1 + 2 * Math.min(1, Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxobtainium / 30000000, 0.5))), 2),
    () => "Epic 5x Ants!",
    () => "Ant Speed Multiplier: x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.004 + 4 / 100000 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[96], _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedAnts + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedAnts + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedAnts + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedAnts + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedAnts + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.sixthOwnedAnts + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.seventhOwnedAnts + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.eighthOwnedAnts)), 3),
    () => "Ant Speed Multiplier: x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 0.005 * Math.pow(Math.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxofferings + 1) / Math.log(10), 2), 2, true),
    () => "You will gain +10% rewards =)",
    () => "Ant Elo +75 if this upgrade is purchased.",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "All you need to know is right above this message!",
    () => "-50% Taxes duh!",
    () => "+88% cap to Crystal Upgrade 3, duh!",
    () => "Coin Production ^1.025, duh!",
    () => "+3% Effective Ant ELO, duh!",
    () => "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(0.333 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[10], 0) + "% Constant Divisor power."
];
const upgradeeffects = (i) => {
    document.getElementById("upgradeeffect").textContent = "Effect: " + upgradetexts[i - 1]();
};
const upgradedescriptions = (i) => {
    const y = upgdesc[`upgdesc${i}`];
    const z = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[i] > 0.5 ? ' BOUGHT!' : '';
    const el = document.getElementById("upgradedescription");
    el.textContent = y + z;
    el.style.color = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[i] > 0.5 ? 'gold' : 'white';
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[9] === true) {
        let type = '';
        if (i <= 20 && i >= 1) {
            type = 'coin';
        }
        if (i <= 40 && i >= 21) {
            type = 'prestige';
        }
        if (i <= 60 && i >= 41) {
            type = 'transcend';
        }
        if (i <= 80 && i >= 61) {
            type = 'reincarnation';
        }
        if (i <= 87 && i >= 81) {
            type = 'prestige';
        }
        if (i <= 93 && i >= 88) {
            type = 'transcend';
        }
        if (i <= 100 && i >= 94) {
            type = 'reincarnation';
        }
        if (type !== '' && i <= 80 && i >= 1) {
            (0,_Buy__WEBPACK_IMPORTED_MODULE_5__.buyUpgrades)(type, i);
        }
        if (type !== '' && i <= 100 && i >= 81) {
            (0,_Automation__WEBPACK_IMPORTED_MODULE_7__.buyAutobuyers)(i - 80);
        }
        if (i <= 120 && i >= 101) {
            (0,_Generators__WEBPACK_IMPORTED_MODULE_6__.buyGenerator)(i - 100);
        }
    }
    let currency = '';
    let color = '';
    if ((i <= 20 && i >= 1) || (i <= 110 && i >= 106) || (i <= 125 && i >= 121)) {
        currency = "Coins";
        color = "yellow";
    }
    if ((i <= 40 && i >= 21) || (i <= 105 && i >= 101) || (i <= 115 && i >= 111) || (i <= 87 && i >= 81)) {
        currency = "Diamonds";
        color = "cyan";
    }
    if ((i <= 60 && i >= 41) || (i <= 120 && i >= 116) || (i <= 93 && i >= 88)) {
        currency = "Mythos";
        color = "plum";
    }
    if ((i <= 80 && i >= 61) || (i <= 100 && i >= 94)) {
        currency = "Particles";
        color = "limegreen";
    }
    document.getElementById("upgradecost").textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.upgradeCosts[i])) + " " + currency;
    document.getElementById("upgradecost").style.color = color;
    upgradeeffects(i);
};
const crystalupgradedescriptions = (i) => {
    const w = crystalupgdesc[`crystalupgdesc${i}`];
    const p = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgrades[i - 1];
    const c = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[73] > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation !== 0 ? 10 : 0) +
        (Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.rune3level * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.effectiveLevelMult / 16) * 100 / 100);
    const q = break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.crystalUpgradesCost[i - 1] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.crystalUpgradeCostIncrement[i - 1] * Math.floor(Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgrades[i - 1] + 0.5 - c, 2) / 2)));
    document.getElementById("crystalupgradedescription").textContent = w;
    document.getElementById("crystalupgradeslevel").textContent = "Level: " + p;
    document.getElementById("crystalupgradescost").textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(q) + " crystals";
};
const upgradeupdate = (num, fast) => {
    const el = document.getElementById(`upg${num}`);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[num] > 0.5 && ((num <= 60 || num > 80) && (num <= 93 || num > 100))) {
        el.style.backgroundColor = "green";
    }
    else if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[num] > 0.5 && ((num > 60 && num <= 80) || (num > 93 && num <= 100) || (num > 120))) {
        el.style.backgroundColor = "white";
    }
    const b = upgdesc[`upgdesc${num}`];
    const c = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[num] > 0.5 ? ' BOUGHT!' : '';
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[num] > 0.5) {
        if (!fast) {
            document.getElementById("upgradedescription").textContent = b + c;
            document.getElementById("upgradedescription").style.color = "gold";
        }
    }
    else {
        el.style.backgroundColor = "Black";
    }
    if (!fast)
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_8__.revealStuff)();
};
const constUpgEffect = {
    1: () => `Tesseract building production x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.05, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[1]), 2, true)}`,
    2: () => `Tesseract building production x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1 + 0.001 * Math.min(100, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[2]), _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendBuilding1.owned + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendBuilding2.owned + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendBuilding3.owned + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendBuilding4.owned + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendBuilding5.owned), 2, true)}`,
    3: () => `Offering gain x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 0.02 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[3], 2, true)}`,
    4: () => `Obtainium gain x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 0.04 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[4], 2, true)}`,
    5: () => `Ant Speed x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1 + 0.1 * break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.add(1), 10), _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[5]), 2, true)}`,
    6: () => `+ ${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[6])} free Ant Levels`,
    7: () => `+${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(7 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[7])} free Rune Levels, +${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[7])} to Rune Cap`,
    8: () => `Rune EXP x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 1 / 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[8], 2, true)}`,
    9: () => `Runes effectiveness x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 0.01 * Math.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanShards + 1) / Math.log(4) * Math.min(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[9]), 4, true)}`,
    10: () => `Cubes/Tesseracts on Ascension x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 0.01 * break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.add(1), 4) * Math.min(1, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[10]), 4, true)}`
};
const returnConstUpgEffect = (i) => { var _a; return (_a = constUpgEffect[i]) === null || _a === void 0 ? void 0 : _a.call(constUpgEffect); };
const getConstUpgradeMetadata = (i) => {
    const toBuy = Math.max(0, Math.floor(1 + break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.max(0.01, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards), 10) - Math.log(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.constUpgradeCosts[i]) / Math.log(10)));
    let cost = new break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default("1");
    if (toBuy > _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[i]) {
        cost = break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, toBuy - 1).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.constUpgradeCosts[i]);
    }
    else {
        cost = break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[i]).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.constUpgradeCosts[i]);
    }
    return [Math.max(1, toBuy - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[i]), cost];
};
const constantUpgradeDescriptions = (i) => {
    const [level, cost] = getConstUpgradeMetadata(i);
    const y = constantUpgDesc[`constantUpgDesc${i}`];
    document.getElementById("constUpgradeDescription").textContent = y;
    document.getElementById("constUpgradeLevel2").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[i]);
    document.getElementById("constUpgradeCost2").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(cost) + " [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(level) + " LVL]";
    document.getElementById("constUpgradeEffect2").textContent = returnConstUpgEffect(i);
};
const buyConstantUpgrades = (i, fast = false) => {
    const [level, cost] = getConstUpgradeMetadata(i);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.gte(cost)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades[i] += level;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[175] === 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.sub(cost);
        }
        if (!fast) {
            constantUpgradeDescriptions(i);
        }
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateAnts)();
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateRuneLevels)();
};


/***/ }),
/* 19 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getReductionValue": () => /* binding */ getReductionValue,
/* harmony export */   "buyAccelerator": () => /* binding */ buyAccelerator,
/* harmony export */   "buyMultiplier": () => /* binding */ buyMultiplier,
/* harmony export */   "getCost": () => /* binding */ getCost,
/* harmony export */   "buyMax": () => /* binding */ buyMax,
/* harmony export */   "buyProducer": () => /* binding */ buyProducer,
/* harmony export */   "buyUpgrades": () => /* binding */ buyUpgrades,
/* harmony export */   "calculateCrystalBuy": () => /* binding */ calculateCrystalBuy,
/* harmony export */   "buyCrystalUpgrades": () => /* binding */ buyCrystalUpgrades,
/* harmony export */   "boostAccelerator": () => /* binding */ boostAccelerator,
/* harmony export */   "buyParticleBuilding": () => /* binding */ buyParticleBuilding,
/* harmony export */   "getTesseractCost": () => /* binding */ getTesseractCost,
/* harmony export */   "buyTesseractBuilding": () => /* binding */ buyTesseractBuilding,
/* harmony export */   "buyRuneBonusLevels": () => /* binding */ buyRuneBonusLevels
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Challenges__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(11);
/* harmony import */ var _Utility__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4);
/* harmony import */ var _Upgrades__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(18);
/* harmony import */ var _Reset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(5);









const getReductionValue = () => {
    let reduction = 1;
    reduction += (_Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.rune4level * _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.effectiveLevelMult) / 160;
    reduction += (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[56] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[57] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[58] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[59] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[60]) / 200;
    reduction += (0,_Challenges__WEBPACK_IMPORTED_MODULE_1__.CalcECC)('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4]) / 200;
    reduction += Math.min(99999.9, (3 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[7 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.bonusant7)) / 100);
    return reduction;
};
const getCostAccelerator = (buyingTo) => {
    --buyingTo;
    const originalCost = 500;
    let cost = new break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default(originalCost);
    cost = cost.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(4 / _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.costDivisor, buyingTo));
    if (buyingTo > (125 + 5 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_1__.CalcECC)('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4]))) {
        const num = buyingTo - 125 - 5 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_1__.CalcECC)('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4]);
        const factorialBit = new break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default(num).factorial();
        const multBit = break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(4, num);
        cost = cost.times(multBit.times(factorialBit));
    }
    if (buyingTo > (2000 + 5 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_1__.CalcECC)('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4]))) {
        const sumNum = buyingTo - 2000 - 5 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_1__.CalcECC)('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4]);
        const sumBit = sumNum * (sumNum + 1) / 2;
        cost = cost.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(2, sumBit));
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension === 4) {
        const sumBit = buyingTo * (buyingTo + 1) / 2;
        cost = cost.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, sumBit));
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation === 8) {
        const sumBit = buyingTo * (buyingTo + 1) / 2;
        cost = cost.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1e50, sumBit));
    }
    return cost;
};
const buyAccelerator = (autobuyer) => {
    let buyTo = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought + 1;
    let cashToBuy = getCostAccelerator(buyTo);
    while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(cashToBuy)) {
        buyTo = buyTo * 4;
        cashToBuy = getCostAccelerator(buyTo);
    }
    let stepdown = Math.floor(buyTo / 8);
    while (stepdown !== 0) {
        if (getCostAccelerator(buyTo - stepdown).lte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins)) {
            stepdown = Math.floor(stepdown / 2);
        }
        else {
            buyTo = buyTo - stepdown;
        }
    }
    if (!autobuyer && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinbuyamount !== "max") {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinbuyamount < buyTo) {
            buyTo = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinbuyamount;
        }
    }
    let buyFrom = Math.max(buyTo - 7, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought + 1);
    let thisCost = getCostAccelerator(buyFrom);
    while (buyFrom <= buyTo && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(thisCost)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.sub(thisCost);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought = buyFrom;
        buyFrom = buyFrom + 1;
        thisCost = getCostAccelerator(buyFrom);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorCost = thisCost;
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigenoaccelerator = false;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnoaccelerator = false;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenoaccelerator = false;
    (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.updateAllTick)();
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought >= 5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[148] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(148);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought >= 25 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[149] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(149);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought >= 100 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[150] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(150);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought >= 666 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[151] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(151);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought >= 2000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[152] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(152);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought >= 12500 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[153] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(153);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBought >= 100000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[154] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(154);
    }
};
const getCostMultiplier = (buyingTo) => {
    --buyingTo;
    const originalCost = 1e5;
    let cost = new break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default(originalCost);
    cost = cost.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, buyingTo / _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.costDivisor));
    if (buyingTo > (75 + 2 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_1__.CalcECC)('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4]))) {
        const num = buyingTo - 75 - 2 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_1__.CalcECC)('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4]);
        const factorialBit = new break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default(num).factorial();
        const powBit = break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, num);
        cost = cost.times(factorialBit.times(powBit));
    }
    if (buyingTo > (2000 + 2 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_1__.CalcECC)('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4]))) {
        const sumNum = buyingTo - 2000 - 2 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_1__.CalcECC)('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4]);
        const sumBit = sumNum * (sumNum + 1) / 2;
        cost = cost.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(2, sumBit));
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension === 4) {
        const sumBit = buyingTo * (buyingTo + 1) / 2;
        cost = cost.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, sumBit));
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation === 8) {
        const sumBit = buyingTo * (buyingTo + 1) / 2;
        cost = cost.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1e50, sumBit));
    }
    return cost;
};
const buyMultiplier = (autobuyer) => {
    let buyTo = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought + 1;
    let cashToBuy = getCostMultiplier(buyTo);
    while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(cashToBuy)) {
        buyTo = buyTo * 4;
        cashToBuy = getCostMultiplier(buyTo);
    }
    let stepdown = Math.floor(buyTo / 8);
    while (stepdown !== 0) {
        if (getCostMultiplier(buyTo - stepdown).lte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins)) {
            stepdown = Math.floor(stepdown / 2);
        }
        else {
            buyTo = buyTo - stepdown;
        }
    }
    if (!autobuyer && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinbuyamount !== "max") {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinbuyamount < buyTo) {
            buyTo = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinbuyamount;
        }
    }
    let buyFrom = Math.max(buyTo - 7, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought + 1);
    let thisCost = getCostMultiplier(buyFrom);
    while (buyFrom <= buyTo && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(thisCost)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.sub(thisCost);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought = buyFrom;
        buyFrom = buyFrom + 1;
        thisCost = getCostMultiplier(buyFrom);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierCost = thisCost;
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigenomultiplier = false;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnomultiplier = false;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenomultiplier = false;
    (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.updateAllMultiplier)();
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought >= 2 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[155] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(155);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought >= 20 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[156] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(156);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought >= 100 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[157] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(157);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought >= 500 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[158] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(158);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought >= 2000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[159] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(159);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought >= 12500 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[160] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(160);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.multiplierBought >= 100000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[161] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(161);
    }
};
const mantissaFactorialPartExtra = Math.log10(2 * Math.PI);
const exponentFactorialPartExtra = Math.log10(Math.E);
const factorialByExponent = (fact) => {
    if (++fact === 0) {
        return 0;
    }
    return ((Math.log10(fact * Math.sqrt(fact * Math.sinh(1 / fact) + 1 / (810 * Math.pow(fact, 6)))) - exponentFactorialPartExtra) * fact) + ((mantissaFactorialPartExtra - Math.log10(fact)) / 2);
};
const fact100exponent = Math.log10(9.3326215443944152681699238856267e+157);
const precision16_loss_addition_of_ones = 188.582;
const known_log10s = function () {
    const needed = [1.03, 1.25];
    const nums = [1, 2, 3, 4, 5, 6, 10, 15];
    for (const num of nums) {
        needed.push(100 + (100 * num));
        needed.push(10 + (10 * num));
    }
    const chalcompletions = 1000;
    for (let i = 0; i < chalcompletions; ++i) {
        needed.push(1 + (i / 2));
    }
    const obj = {};
    for (const need of needed) {
        if (obj[need] === undefined) {
            obj[need] = Math.log10(need);
        }
    }
    return obj;
}();
const getCost = (originalCost, buyingTo, type, num, r) => {
    --buyingTo;
    const cost = new break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default(originalCost);
    let mlog10125 = num * buyingTo;
    if (buyingTo < precision16_loss_addition_of_ones / num) {
        cost.mantissa += buyingTo / Math.pow(10, cost.exponent);
    }
    let fastFactMultBuyTo = 0;
    let fr = Math.floor(r * 1000);
    if (buyingTo >= r * 1000) {
        ++fastFactMultBuyTo;
        cost.exponent -= factorialByExponent(fr);
        cost.exponent += (-3 + Math.log10(1 + (num / 2))) * (buyingTo - fr);
    }
    fr = Math.floor(r * 5000);
    if (buyingTo >= r * 5000) {
        ++fastFactMultBuyTo;
        cost.exponent -= factorialByExponent(fr);
        cost.exponent += ((known_log10s[10 + num * 10] + 1) * (buyingTo - fr - 1)) + 1;
    }
    fr = Math.floor(r * 20000);
    if (buyingTo >= r * 20000) {
        fastFactMultBuyTo += 3;
        cost.exponent -= factorialByExponent(fr) * 3;
        cost.exponent += (known_log10s[100 + (100 * num)] + 5) * (buyingTo - fr);
    }
    fr = Math.floor(r * 250000);
    if (buyingTo >= r * 250000) {
        cost.exponent += Math.log10(1.03) * (buyingTo - fr) * ((buyingTo - fr + 1) / 2);
    }
    cost.exponent += factorialByExponent(buyingTo) * fastFactMultBuyTo;
    let fastFactMultBuyTo100 = 0;
    if ((_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension === 4) && (type === "Coin" || type === "Diamonds")) {
        ++fastFactMultBuyTo100;
        if (buyingTo >= (1000 - (10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4]))) {
            mlog10125 += (buyingTo * (buyingTo + 1) / 2);
        }
    }
    if ((_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation === 10) && (type === "Coin" || type === "Diamonds")) {
        ++fastFactMultBuyTo100;
        if (buyingTo >= (r * 25000)) {
            mlog10125 += (buyingTo * (buyingTo + 1) / 2);
        }
    }
    cost.exponent += fastFactMultBuyTo100 * ((factorialByExponent(buyingTo + 100) - fact100exponent + (2 * buyingTo)) * (1.25 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4] / 4)));
    cost.exponent += known_log10s[1.25] * mlog10125;
    fr = Math.floor(r * 1000 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8]);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation === 8 && (type === "Coin" || type === "Diamonds" || type === "Mythos") && buyingTo >= (1000 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8] * r)) {
        cost.exponent += ((known_log10s[2] * ((buyingTo - fr + 1) / 2)) - known_log10s[1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8] / 2)]) * (buyingTo - fr);
    }
    const extra = cost.exponent - Math.floor(cost.exponent);
    cost.exponent = Math.floor(cost.exponent);
    cost.mantissa *= Math.pow(10, extra);
    cost.normalize();
    return cost;
};
const buyMax = (pos, type, num, originalCost) => {
    const r = getReductionValue();
    let tag = '';
    switch (type) {
        case 'Diamonds':
            tag = 'prestigePoints';
            break;
        case 'Mythos':
            tag = 'transcendPoints';
            break;
        case 'Particles':
            tag = 'reincarnationPoints';
            break;
        case 'Coin':
            tag = 'coins';
            break;
    }
    const buyStart = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type];
    let buyInc = 1;
    let cashToBuy = getCost(originalCost, buyStart + buyInc, type, num, r);
    while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag].gte(cashToBuy)) {
        buyInc = buyInc * 4;
        cashToBuy = getCost(originalCost, buyStart + buyInc, type, num, r);
    }
    let stepdown = Math.floor(buyInc / 8);
    while (stepdown !== 0) {
        if (getCost(originalCost, buyStart + buyInc - stepdown, type, num, r).lte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag])) {
            stepdown = Math.floor(stepdown / 2);
        }
        else {
            buyInc = buyInc - Math.max((0,_Utility__WEBPACK_IMPORTED_MODULE_4__.smallestInc)(buyInc), stepdown);
        }
    }
    let buyFrom = Math.max(buyStart + buyInc - 7, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] + 1);
    let thisCost = getCost(originalCost, buyFrom, type, num, r);
    while (buyFrom < buyStart + buyInc && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag].gte(thisCost)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag].sub(thisCost);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] = buyFrom;
        buyFrom = buyFrom + (0,_Utility__WEBPACK_IMPORTED_MODULE_4__.smallestInc)(buyFrom);
        thisCost = getCost(originalCost, buyFrom, type, num, r);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type] = thisCost;
    }
};
const buyProducerTypes = {
    Diamonds: ['prestigePoints', 'crystal'],
    Mythos: ['transcendPoints', 'mythos'],
    Particles: ['reincarnationPoints', 'particle'],
    Coin: ['coins', 'coin']
};
const buyProducer = (pos, type, num, autobuyer) => {
    const [tag, amounttype] = buyProducerTypes[type];
    const buythisamount = autobuyer ? 500 : _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[`${amounttype}buyamount`];
    let r = 1;
    r += (_Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.rune4level * _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.effectiveLevelMult) / 160;
    r += (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[56] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[57] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[58] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[59] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[60]) / 200;
    r += (0,_Challenges__WEBPACK_IMPORTED_MODULE_1__.CalcECC)('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4]) / 200;
    r += (3 * (_Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.bonusant7 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[7 - 1])) / 100;
    while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag].gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type]) && _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.ticker < buythisamount) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag].sub(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type]);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] += 1;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type].times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.25, num));
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type].add(1);
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] >= (1000 * r)) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type].times(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type]).dividedBy(1000).times(1 + num / 2);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] >= (5000 * r)) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type].times(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type]).times(10).times(10 + num * 10);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] >= (20000 * r)) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type].times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type], 3)).times(100000).times(100 + num * 100);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] >= (250000 * r)) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type].times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.03, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] - 250000 * r));
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.transcension === 4 && (type === "Coin" || type === "Diamonds")) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type].times(Math.pow(100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] + 10000, 1.25 + 1 / 4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4]));
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] >= 1000 - (10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[4])) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type].times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.25, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type]));
            }
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation === 8 && (type === "Coin" || type === "Diamonds" || type === "Mythos") && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] >= (1000 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8] * r)) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type].times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(2, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] - (1000 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8] * r)) / (1 + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8] / 2))));
        }
        _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.ticker += 1;
    }
    _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.ticker = 0;
};
const buyUpgrades = (type, pos, state) => {
    let addendum = "";
    if (type === "prestige" || type === "transcend" || type === "reincarnation") {
        addendum = "Point";
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[type + addendum + 's'].gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.upgradeCosts[pos])) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[pos] === 0) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[type + addendum + 's'] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[type + addendum + 's'].sub(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.upgradeCosts[pos]));
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[pos] = 1;
        (0,_Upgrades__WEBPACK_IMPORTED_MODULE_5__.upgradeupdate)(pos, state);
    }
    if (type === "transcend") {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinprestigeortranscendupgrades = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinprestigetranscendorgeneratorupgrades = false;
    }
    if (type === "prestige") {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnocoinorprestigeupgrades = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinorprestigeupgrades = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinprestigeortranscendupgrades = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinprestigetranscendorgeneratorupgrades = false;
    }
    if (type === "coin") {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigenocoinupgrades = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnocoinupgrades = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnocoinorprestigeupgrades = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinupgrades = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinorprestigeupgrades = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinprestigeortranscendupgrades = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenocoinprestigetranscendorgeneratorupgrades = false;
    }
};
const calculateCrystalBuy = (i) => {
    const u = i - 1;
    const exponent = break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeShards.add(1), 10);
    const toBuy = Math.floor(Math.pow(Math.max(0, 2 * (exponent - _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.crystalUpgradesCost[u]) / _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.crystalUpgradeCostIncrement[u] + 1 / 4), 1 / 2) + 1 / 2);
    return toBuy;
};
const buyCrystalUpgrades = (i, auto = false) => {
    const u = i - 1;
    let c = 0;
    c += Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.rune3level / 16 * _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.effectiveLevelMult) * 100 / 100;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[73] > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation !== 0) {
        c += 10;
    }
    const toBuy = calculateCrystalBuy(i);
    if (toBuy + c > _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgrades[u]) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.crystalUpgrades[u] = 100 / 100 * (toBuy + c);
        if (toBuy > 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeShards = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigeShards.sub(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.crystalUpgradesCost[u] + _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.crystalUpgradeCostIncrement[u] * (1 / 2 * Math.pow(toBuy - 1 / 2, 2) - 1 / 8)));
            if (!auto) {
                (0,_Upgrades__WEBPACK_IMPORTED_MODULE_5__.crystalupgradedescriptions)(i);
            }
        }
    }
};
const boostAccelerator = (automated) => {
    let buyamount = 1;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[46] === 1) {
        buyamount = automated ? 9999 : _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coinbuyamount;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[46] < 1) {
        while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostCost) && _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.ticker < buyamount) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostCost)) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought += 1;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostCost = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostCost.times(1e10).times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought));
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought > (1000 * (1 + 2 * _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.effectiveRuneBlessingPower[4]))) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostCost = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostCost.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought - (1000 * (1 + 2 * _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.effectiveRuneBlessingPower[4])), 2) / (1 + 2 * _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.effectiveRuneBlessingPower[4])));
                }
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnoaccelerator = false;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenoaccelerator = false;
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[46] < 0.5) {
                    for (let j = 21; j < 41; j++) {
                        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[j] = 0;
                    }
                    (0,_Reset__WEBPACK_IMPORTED_MODULE_6__.reset)("prestige");
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints = new break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default(0);
                }
            }
        }
    }
    else {
        const buyStart = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought;
        let buyInc = 1;
        let cost = getAcceleratorBoostCost(buyStart + buyInc);
        while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(cost)) {
            buyInc *= 4;
            cost = getAcceleratorBoostCost(buyStart + buyInc);
        }
        let stepdown = Math.floor(buyInc / 8);
        while (stepdown !== 0) {
            if (getAcceleratorBoostCost(buyStart + buyInc - stepdown).lte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints)) {
                stepdown = Math.floor(stepdown / 2);
            }
            else {
                buyInc = buyInc - Math.max((0,_Utility__WEBPACK_IMPORTED_MODULE_4__.smallestInc)(buyInc), stepdown);
            }
        }
        let buyFrom = Math.max(buyStart + buyInc - 7, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought + 1);
        let thisCost = getAcceleratorBoostCost(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought);
        while (buyFrom < buyStart + buyInc && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(getAcceleratorBoostCost(buyFrom))) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.sub(thisCost);
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought = buyFrom;
            buyFrom = buyFrom + (0,_Utility__WEBPACK_IMPORTED_MODULE_4__.smallestInc)(buyInc);
            thisCost = getAcceleratorBoostCost(buyFrom);
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostCost = thisCost;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendnoaccelerator = false;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnatenoaccelerator = false;
        }
    }
    _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.ticker = 0;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought >= 2 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[162] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(162);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought >= 10 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[163] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(163);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought >= 50 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[164] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(164);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought >= 200 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[165] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(165);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought >= 1000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[166] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(166);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought >= 5000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[167] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(167);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.acceleratorBoostBought >= 15000 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[168] === 0) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(168);
    }
};
const getAcceleratorBoostCost = (level = 1) => {
    level--;
    const base = new break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default(1e3);
    const eff = 1 + 2 * _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.effectiveRuneBlessingPower[4];
    const linSum = (n) => n * (n + 1) / 2;
    const sqrSum = (n) => n * (n + 1) * (2 * n + 1) / 6;
    if (level > 1000 * eff) {
        return base.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, 10 * level
            + linSum(level)
            + sqrSum(level - 1000 * eff) / eff));
    }
    else {
        return base.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, 10 * level + linSum(level)));
    }
};
const getParticleCost = (originalCost, buyTo) => {
    --buyTo;
    originalCost = new break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default(originalCost);
    let cost = originalCost.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(2, buyTo));
    const DR = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension !== 15) ? 325000 : 1000;
    if (buyTo > DR) {
        cost = cost.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(1.001, (buyTo - DR) * ((buyTo - DR + 1) / 2)));
    }
    return (cost);
};
const buyParticleBuilding = (pos, originalCost, autobuyer = false) => {
    let buyTo = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'OwnedParticles'] + 1;
    let cashToBuy = getParticleCost(originalCost, buyTo);
    while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints.gte(cashToBuy)) {
        buyTo = buyTo * 4;
        cashToBuy = getParticleCost(originalCost, buyTo);
    }
    let stepdown = Math.floor(buyTo / 8);
    while (stepdown !== 0) {
        if (getParticleCost(originalCost, buyTo - stepdown).lte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints)) {
            stepdown = Math.floor(stepdown / 2);
        }
        else {
            buyTo = buyTo - stepdown;
        }
    }
    if (!autobuyer) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.particlebuyamount + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'OwnedParticles'] < buyTo) {
            buyTo = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'OwnedParticles'] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.particlebuyamount + 1;
        }
    }
    let buyFrom = Math.max(buyTo - 7, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'OwnedParticles'] + 1);
    let thisCost = getParticleCost(originalCost, buyFrom);
    while (buyFrom < buyTo && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints.gte(getParticleCost(originalCost, buyFrom))) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints.sub(thisCost);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'OwnedParticles'] = buyFrom;
        buyFrom = buyFrom + 1;
        thisCost = getParticleCost(originalCost, buyFrom);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'CostParticles'] = thisCost;
    }
};
const getTesseractCost = (intCost, index) => {
    const buyFrom = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player['ascendBuilding' + index]['owned'];
    const subCost = intCost * Math.pow(buyFrom * (buyFrom + 1) / 2, 2);
    let buyTo = Math.floor(-1 / 2 + 1 / 2 * Math.pow(1 + 8 * Math.pow((_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowTesseracts + subCost) / intCost, 1 / 2), 1 / 2));
    buyTo = Math.min(buyTo, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractbuyamount + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player['ascendBuilding' + index]['owned']);
    const actualCost = intCost * Math.pow(buyTo * (buyTo + 1) / 2, 2) - subCost;
    return [buyTo, actualCost];
};
const buyTesseractBuilding = (intCost, index) => {
    const buyTo = getTesseractCost(intCost, index)[0];
    const actualCost = getTesseractCost(intCost, index)[1];
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player['ascendBuilding' + index]['owned'] = buyTo;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowTesseracts -= actualCost;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player['ascendBuilding' + index]['cost'] = intCost * Math.pow(1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player['ascendBuilding' + index]['owned'], 3);
};
const buyRuneBonusLevels = (type, index) => {
    let baseCost;
    let baseLevels;
    let levelCap;
    (type === 'Spirits') ?
        (baseCost = _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.spiritBaseCost, baseLevels = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeSpiritLevels[index], levelCap = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeSpiritBuyAmount) :
        (baseCost = _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.blessingBaseCost, baseLevels = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeBlessingLevels[index], levelCap = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeBlessingBuyAmount);
    const [level, cost] = (0,_Calculate__WEBPACK_IMPORTED_MODULE_7__.calculateSummationLinear)(baseLevels, baseCost, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards, levelCap);
    (type === 'Blessings') ?
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeSpiritLevels[index] = level :
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeBlessingLevels[index] = level;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards -= cost;
    if (index === 1) {
        const requirementArray = [0, 1e5, 1e8, 1e11];
        for (let i = 1; i <= 3; i++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeBlessingLevels[1] >= requirementArray[i] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[231 + i] < 1) {
                (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(231 + i);
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeSpiritLevels[1] >= 10 * requirementArray[i] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[234 + i] < 1) {
                (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(234 + i);
            }
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeBlessingLevels[1] >= 1e22 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[245] < 1) {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(245);
        }
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_7__.calculateRuneBonuses)();
    if (type === 'Blessings') {
        const blessingMultiplierArray = [0, 8, 10, 6.66, 2, 1];
        const t = (index === 5) ? 1 : 0;
        document.getElementById('runeBlessingPower' + index + 'Value1').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.runeBlessings[index]);
        document.getElementById('runeBlessingPower' + index + 'Value2').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 - t + blessingMultiplierArray[index] * _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.effectiveRuneBlessingPower[index], 4, true);
    }
    if (type === 'Spirits') {
        const spiritMultiplierArray = [0, 1, 1, 20, 1, 100];
        spiritMultiplierArray[index] *= ((0,_Calculate__WEBPACK_IMPORTED_MODULE_7__.calculateCorruptionPoints)() / 400);
        const t = (index === 3) ? 1 : 0;
        document.getElementById('runeSpiritPower' + index + 'Value1').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.runeSpirits[index]);
        document.getElementById('runeSpiritPower' + index + 'Value2').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 - t + spiritMultiplierArray[index] * _Variables__WEBPACK_IMPORTED_MODULE_8__.Globals.effectiveRuneSpiritPower[index], 4, true);
    }
};


/***/ }),
/* 20 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "buyGenerator": () => /* binding */ buyGenerator
/* harmony export */ });
/* harmony import */ var _Upgrades__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(11);
/* harmony import */ var _UpdateHTML__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5);






const buyGenerator = (i, state) => {
    if (i === 1 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.prestigePoints.gte(1e12) && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.unlocks.generation === false) {
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.unlocks.generation = true;
    }
    const q = 100 + i;
    let type = "transcendPoints";
    if (q <= 110 && q >= 106) {
        type = "coins";
    }
    else if (q <= 115) {
        type = "prestigePoints";
    }
    const cost = break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_5__.Globals.upgradeCosts[q]);
    const achievementCheck = Math.max(_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.upgrades[101], _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.upgrades[102], _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.upgrades[103], _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.upgrades[104], _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.upgrades[105]);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_1__.default.upgrades[q] === 0 && _Synergism__WEBPACK_IMPORTED_MODULE_1__.default[type].gte(cost)) {
        if (achievementCheck === 0) {
            if ([102, 103, 104, 105].includes(q)) {
                (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(q - 31);
            }
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.default[type] = _Synergism__WEBPACK_IMPORTED_MODULE_1__.default[type].sub(cost);
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.upgrades[q] = 1;
        (0,_Upgrades__WEBPACK_IMPORTED_MODULE_0__.upgradeupdate)(q, state);
        _Synergism__WEBPACK_IMPORTED_MODULE_1__.default.reincarnatenocoinprestigetranscendorgeneratorupgrades = false;
    }
    (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_4__.revealStuff)();
};


/***/ }),
/* 21 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "buyAutobuyers": () => /* binding */ buyAutobuyers,
/* harmony export */   "autoUpgrades": () => /* binding */ autoUpgrades
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _Upgrades__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(18);
/* harmony import */ var _UpdateHTML__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5);
/* harmony import */ var _Buy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(19);







const buyGenerator = (i, state, auto) => {
    if (i === 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(1e12) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.generation === false) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.generation = true;
    }
    const q = 100 + i;
    let type = "transcendPoints";
    if (q <= 110 && q >= 106) {
        type = "coins";
    }
    else if (q <= 115) {
        type = "prestigePoints";
    }
    const cost = break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_5__.Globals.upgradeCosts[q]);
    const achievementCheck = Math.max(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[101], _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[102], _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[103], _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[104], _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[105]);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[q] === 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[type].gte(cost)) {
        if (achievementCheck === 0 && q >= 102 && q <= 105) {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_1__.achievementaward)(q - 31);
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[type] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[type].sub(cost);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[q] = 1;
        (0,_Upgrades__WEBPACK_IMPORTED_MODULE_3__.upgradeupdate)(q, state);
    }
    if (!auto) {
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_4__.revealStuff)();
    }
};
const buyAutobuyers = (i, state) => {
    const q = i + 80;
    let type = "";
    if (q <= 87) {
        type = "prestigePoints";
    }
    else if (q <= 93) {
        type = "transcendPoints";
    }
    else {
        type = "reincarnationPoints";
    }
    const cost = break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_5__.Globals.upgradeCosts[q]);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[type].gte(cost) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[q] === 0) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[type] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[type].sub(cost);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[q] = 1;
        (0,_Upgrades__WEBPACK_IMPORTED_MODULE_3__.upgradeupdate)(q, state);
    }
};
const autoUpgrades = () => {
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[90] > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.generators === true) {
        for (let i = 1; i < 6; i++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_5__.Globals.upgradeCosts[(100 + i)])) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.generators === true) {
                buyGenerator(i, true, true);
            }
        }
        for (let j = 6; j < 11; j++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_5__.Globals.upgradeCosts[(100 + j)])) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.generators === true) {
                buyGenerator(j, true, true);
            }
        }
        for (let k = 11; k < 16; k++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_5__.Globals.upgradeCosts[(100 + k)])) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.generators === true) {
                buyGenerator(k, true, true);
            }
        }
        for (let l = 16; l < 21; l++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendPoints.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_5__.Globals.upgradeCosts[(100 + l)])) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.generators === true) {
                buyGenerator(l, true, true);
            }
        }
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[91] > 0.5) {
        for (let i = 1; i < 21; i++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_5__.Globals.upgradeCosts[i])) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.coin === true) {
                (0,_Buy__WEBPACK_IMPORTED_MODULE_6__.buyUpgrades)('coin', i, true);
            }
        }
        for (let i = 121; i <= 125; i++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.coins.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_5__.Globals.upgradeCosts[i])) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.coin === true && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[19] > 0) {
                (0,_Buy__WEBPACK_IMPORTED_MODULE_6__.buyUpgrades)('coin', i, true);
            }
        }
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[92] > 0.5) {
        for (let i = 21; i < 38; i++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_5__.Globals.upgradeCosts[i])) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.prestige === true) {
                (0,_Buy__WEBPACK_IMPORTED_MODULE_6__.buyUpgrades)('prestige', i, true);
            }
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, 50000)) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.prestige === true && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[120] === 1) {
            (0,_Buy__WEBPACK_IMPORTED_MODULE_6__.buyUpgrades)('prestige', 38, true);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, 100000)) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.prestige === true && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[127] === 1) {
            (0,_Buy__WEBPACK_IMPORTED_MODULE_6__.buyUpgrades)('prestige', 39, true);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigePoints.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, 200000)) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.prestige === true && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[134] === 1) {
            (0,_Buy__WEBPACK_IMPORTED_MODULE_6__.buyUpgrades)('prestige', 40, true);
        }
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[99] > 0.5) {
        for (let i = 41; i < 61; i++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.transcendPoints.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_5__.Globals.upgradeCosts[i])) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.transcend === true) {
                (0,_Buy__WEBPACK_IMPORTED_MODULE_6__.buyUpgrades)('transcend', i, true);
            }
        }
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[8] > 0) {
        for (let i = 61; i <= 80; i++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints.gte(break_infinity_js__WEBPACK_IMPORTED_MODULE_2__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_5__.Globals.upgradeCosts[i])) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.reincarnate) {
                (0,_Buy__WEBPACK_IMPORTED_MODULE_6__.buyUpgrades)('reincarnation', i, true);
            }
        }
    }
};


/***/ }),
/* 22 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "buyResearch": () => /* binding */ buyResearch,
/* harmony export */   "maxRoombaResearchIndex": () => /* binding */ maxRoombaResearchIndex,
/* harmony export */   "isResearchUnlocked": () => /* binding */ isResearchUnlocked,
/* harmony export */   "researchDescriptions": () => /* binding */ researchDescriptions,
/* harmony export */   "updateResearchBG": () => /* binding */ updateResearchBG
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var _UpdateHTML__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);




const getResearchCost = (index, buyAmount = 1, linGrowth = 0) => {
    buyAmount = Math.min(_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[index] - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[index], buyAmount);
    const metaData = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateSummationNonLinear)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[index], _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchBaseCosts[index], _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints, linGrowth, buyAmount);
    return [metaData[0], metaData[1]];
};
const buyResearch = (index, auto = false, linGrowth = 0) => {
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearchToggle && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch > 0 && !auto) {
        const p = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[p] === _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[p]) {
            document.getElementById("res" + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch).style.backgroundColor = "green";
        }
        else if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[p] >= 1) {
            document.getElementById("res" + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch).style.backgroundColor = "purple";
        }
        else {
            document.getElementById("res" + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch).style.backgroundColor = "black";
        }
    }
    if (!auto && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearchToggle && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumAutoLevel >= 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[9] < 1) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch = index;
        document.getElementById("res" + index).style.backgroundColor = "orange";
    }
    const buyamount = (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.maxbuyresearch || auto) ? 1e5 : 1;
    const metaData = getResearchCost(index, buyamount, linGrowth);
    if ((auto || !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearchToggle) && isResearchUnlocked(index) && !isResearchMaxed(index) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints >= metaData[1]) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints -= metaData[1];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[index] = metaData[0];
        _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchfiller2 = "Level: " + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[index] + "/" + (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[index]);
        researchDescriptions(index, auto, linGrowth);
        if (index === 47 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.rrow1 === false) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.rrow1 = true;
            (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_2__.revealStuff)();
        }
        if (index === 48 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.rrow2 === false) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.rrow2 = true;
            (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_2__.revealStuff)();
        }
        if (index === 49 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.rrow3 === false) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.rrow3 = true;
            (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_2__.revealStuff)();
        }
        if (index === 50 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.rrow4 === false) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.unlocks.rrow4 = true;
            (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_2__.revealStuff)();
        }
    }
    if (index > 0 && isResearchUnlocked(index)) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[index] === (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[index])) {
            document.getElementById("res" + index).style.backgroundColor = "green";
        }
    }
    if (auto && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[9] === 1) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchOrderByCost[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.roombaResearchIndex];
        if (isResearchMaxed(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch)) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.roombaResearchIndex += 1;
        }
        while (!isResearchUnlocked(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch < 200 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch >= 1) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.roombaResearchIndex += 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchOrderByCost[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.roombaResearchIndex];
        }
        if (isResearchUnlocked(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch)) {
            const doc = document.getElementById("res" + _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchOrderByCost[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.roombaResearchIndex]);
            if (doc)
                doc.style.backgroundColor = "orange";
        }
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneLevels)();
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateAnts)();
};
const maxRoombaResearchIndex = (p = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player) => {
    const base = p.ascensionCount > 0 ? 140 : 125;
    const c11 = p.challengecompletions[11] > 0 ? 15 : 0;
    const c12 = p.challengecompletions[12] > 0 ? 15 : 0;
    const c13 = p.challengecompletions[13] > 0 ? 15 : 0;
    const c14 = p.challengecompletions[14] > 0 ? 15 : 0;
    return base + c11 + c12 + c13 + c14;
};
const isResearchUnlocked = (index) => {
    const cumuSum = (sum => (value) => sum += value)(0);
    const indices = [3 * 25, 5, 20, 10, 15, 15, 15, 15, 15, 15].map(cumuSum);
    const chievos = [50, 124, 127, 134, 141, 183, 197, 204, 211, 218];
    for (let i = 0; i < indices.length; i++) {
        if (i === 3 && (index === 121 || index === 124 || index === 150)) {
            return _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[chievos[i]] > 0;
        }
        if (index <= indices[i]) {
            return _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[chievos[i]] > 0;
        }
    }
    return false;
};
const isResearchMaxed = (index) => _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[index] <= _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[index];
const resdesc = [
    "[1x1] Increase the number of free Accelerators gained by 20% from all sources.",
    "[1x2] Increase the number of free Multipliers gained by 20% from all sources.",
    "[1x3] Increase the number of free Accelerator Boosts gained by 20% from all sources.",
    "[1x4] Increase most rune effects by 10%. (Excludes any recycle chance bonus)",
    "[1x5] Multiply the production of all crystal producers by 1e4.",
    "[1x6] Gain +5% free accelerators per level.",
    "[1x7] Gain +4% free accelerators per level.",
    "[1x8] Gain +3% free accelerators per level.",
    "[1x9] Gain +2% free accelerators per level.",
    "[1x10] Gain +2% free accelerators per level.",
    "[1x11] Gain +5% free multipliers per level.",
    "[1x12] Gain +4% free multipliers per level.",
    "[1x13] Gain +2.5% free multipliers per level.",
    "[1x14] Gain +1.5% free multipliers per level.",
    "[1x15] Gain +0.5% free multipliers per level.",
    "[1x16] Gain +5% free accelerator boosts per level.",
    "[1x17] Gain +5% free accelerator boosts per level.",
    "[1x18] Gain +2 free accelerator per accelerator boost.",
    "[1x19] Gain +2 free accelerator per accelerator boost.",
    "[1x20] Gain +3 free accelerator per accelerator boost!",
    "[1x21] Most rune effects are increased by 1% per level. (Excludes any recycle chance bonus)",
    "[1x22] Each Offering used increases Rune EXP by 0.6 per level.",
    "[1x23] Each Offering used increases Rune EXP by another 0.3 per level!",
    "[1x24] Prestige and Transcensions base Offering is increased by 0.2 per level.",
    "[1x25] Reincarnations base Offering is increased by 0.6 per level.",
    "[2x1] Multiply all crystal producer production by 150% per level (multiplicative).",
    "[2x2] Multiply all crystal producer production by 150% per level (multiplicative).",
    "[2x3] Coin Exponent is increased by 0.08 per level.",
    "[2x4] Coin Exponent is increased by another 0.08 per level.",
    "[2x5] Coin Exponent is increased by ANOTHER 0.04 per level.",
    "[2x6] Want to bake cookies instead? You can go offline for 2 additional hours per level (base 24hr).",
    "[2x7] Want to bake a lot of cookies instead? Extend the offline maximum timer by another 2 hours per level!",
    "[2x8] Gain +11% more multiplier boosts from Mythos Shards per level.",
    "[2x9] Gain another +11% more multiplier boosts from Mythos Shards per level.",
    "[2x10] Gain ANOTHER +11% more multiplier boosts from Mythos Shards per level.",
    "[2x11] Building power scales 5% faster per level.",
    "[2x12] Building power scales 2.5% faster per level.",
    "[2x13] Building power scales 2.5% faster per level.",
    "[2x14] Building power affects crystal production at a reduced rate.",
    "[2x15] Building power affects mythos shard production at a reduced rate.",
    "[2x16] Start Reincarnations with automatic A.Boosts unlocked. Note: this research doesn't affect earning achievements.",
    "[2x17] Start Reincarnations with automatic Generators unlocked.",
    "[2x18] Start Reincarnations with automatic C.Upgrades unlocked.",
    "[2x19] Start Reincarnations with automatic D.Upgrades unlocked.",
    "[2x20] Start Reincarnations with automatic Diamond production unlocked.",
    "[2x21] Unlock the ability to automatically Reincarnate!",
    "[2x22] Unlock Reincarnation upgrades 1-5. [Upgrades cost between 1 and 1,000 Particles]",
    "[2x23] Unlock Reincarnation upgrades 6-10. [Upgrades cost between 100,000 and 1e22 Particles]",
    "[2x24] Unlock Reincarnation upgrades 11-15. [Upgrades cost between 1e30 and 1e60 Particles]",
    "[2x25] Unlock Reincarnation upgrades 16-20. [You might want to wait until challenge 8 is doable!]",
    "[3x1] Taxation scales 5.0% slower per level. [Up to -50%]",
    "[3x2] Taxation scales 2.5% slower per level. [Up to -75%]",
    "[3x3] Taxation scales 1.25% slower per level. [Up to -87.5%]",
    "[3x4] Taxation scales 0.625% slower per level. [Up to -93.75%]",
    "[3x5] Taxation scales 0.3125% slower per level. [Up to -96.875%]",
    "[3x6] Building Cost Scale is delayed by 0.5% per level.",
    "[3x7] Building Cost Scale is delayed by 0.5% per level.",
    "[3x8] Building Cost Scale is delayed by 0.5% per level.",
    "[3x9] Building Cost Scale is delayed by 0.5% per level.",
    "[3x10] Building Cost Scale is delayed by 0.5% per level.",
    "[3x11] Gain +50% of your best obtainium per second AUTOMATICALLY!",
    "[3x12] Gain an additional +10% of your best obtainium per second automatically.",
    "[3x13] If your Reincarnation lasts at least 2 seconds you gain +1 obtainium per level.",
    "[3x14] If your Reincarnation lasts at least 5 seconds you gain +2 obtainium per level.",
    "[3x15] Increase the rate of gaining obtainium through reincarnations by 20% per level.",
    "[3x16] Increase the maximum number of [No Multipliers] completions by 5 per level.",
    "[3x17] Increase the maximum number of [No Accelerators] completions by 5 per level.",
    "[3x18] Increase the maximum number of [No Shards] completions by 5 per level.",
    "[3x19] Increase the maximum number of [Cost+] completions by 5 per level.",
    "[3x20] Increase the maximum number of [Reduced Diamonds] completions by 5 per level.",
    "[3x21] Automatically gain completions for Challenge 1, even without running it!",
    "[3x22] Automatically gain completions for Challenge 2, even without running it!",
    "[3x23] Automatically gain completions for Challenge 3, even without running it!",
    "[3x24] Automatically gain completions for Challenge 4, even without running it!",
    "[3x25] Automatically gain completions for Challenge 5, even without running it!",
    "[4x1] Welcome to the land of expensive researches. Here's +10% obtainium per level to help you out!",
    "[4x2] Increase the level cap of Thrift rune by 10 per level, and +2% exp for that rune in particular.",
    "[4x3] Increase the level cap of Speed rune by 10 per level, and +2% exp for that rune in particular.",
    "[4x4] Increase the level cap of Prism rune by 10 per level, and +2% exp for that rune in particular.",
    "[4x5] Increase the level cap of Duplication rune by 10 per level, and +2% exp for that rune in particular.",
    "[4x6] You thought the previous researches are expensive? You're going to need this! [+10% Obtainium/level]",
    "[4x7] Permanently UNLOCK the Rune of Superior Intellect! [+%Ob / +Ant Speed / +Base Offerings.]",
    "[4x8] Taking forever to level up that SI Rune? Here's +5% SI Rune EXP per level.",
    "[4x9] Does the new rune kinda suck? Power it up! +0.5% level effectiveness for SI rune per level!",
    "[4x10] Gain +0.01% more offerings per level per challenge completion!",
    "[4x11] Yeah, going back to basics. +5% Accelerators/Level.",
    "[4x12] 0/5 Multipliers SUCK: +5% Multipliers/Level.",
    "[4x13] -1/5 A.Boosts SUCK: +5% Accelerator Boosts/Level.",
    "[4x14] -5/5 MULTIPLIERS STILL SUCK: +20% Multiplier Boosts/Level",
    "[4x15] Runes don't suck at all, but why not make them even BETTER? +1% Rune Effect/level!",
    "[4x16] A simple +5% Rune EXP for all runes!",
    "[4x17] Another simple +5% Rune EXP for all runes!",
    "[4x18] +1 Accelerator Boost per 20 Summative Rune Levels, per level.",
    "[4x19] +20 Multiplier per 8 Summative Rune Levels, per level.",
    "[4x20] Gain +4 base Offerings from Reincarnations by purchasing this. Math Nerds will love this!",
    "[4x21] Ants slow? Add +0.0002 to ant efficiency increase per ant purchased per level.",
    "[4x22] Add +4 level to the first six upgradable ants per level!",
    "[4x23] Add +4 level to the next five upgradable ants per level!",
    "[4x24] Is the Quark Shop too hot to resist? Get +1 Quark per hour from Exporting for each level (Up to +75)!",
    "[4x25] Alright, Platonic is off his rocker. I don't expect you to get this but this will give +1 MORE Quark per hour from Exporting (Up to +100)!",
    "[5x1] Alright, you're past the big wall. How about adding +.001 to Inceptus Ant efficiency per level?",
    "[5x2] Gain +1 bonus level to ALL ants per level! A rainbow attack!",
    "[5x3] Pray to Ant God for +5% sacrifice rewards per level!",
    "[5x4] You're beginning to feel like an ant god (ant god): +5% sacrifice reward per level!",
    "[5x5] Buy this and be able to run the first five challenges infinitely! (Note that requirements scale a LOT faster after 75)",
    "[5x6] Engrave your talismans with obtainium to get +0.03 Rune Levels per talisman level per level.",
    "[5x7] Refine your talismans with the powder of Obtainium to get +0.03 Rune Levels per talisman level per level again.",
    "[5x8] A simple trick makes your base ant ELO increase by 25 per level!",
    "[5x9] A more convoluted trick makes your base ant ELO increase by 25 per level again!",
    "[5x10] Gain +1% more ELO from ant sources per level because why not?",
    "[5x11] Gotta go fast [+10 max Speed Rune Level per level, +1% EXP to that rune]",
    "[5x12] Double Trouble [+10 max Duplication Rune level per level, +1% EXP to that rune]",
    "[5x13] Newton's Delight [+10 max Prism Rune Level per level, +1% EXP to that rune]",
    "[5x14] Five-Finger discounts [+10 max Thrift Rune Level per level, +1% EXP to that rune]",
    "[5x15] Scientific Breakthrough [+10 max SI Rune Level per level +1% EXP to that rune]",
    "[5x16] Talismans have +0.015 Rune levels per talisman level per level. Levelception!",
    "[5x17] Talismans have another +0.015 Rune levels per talisman level per level!",
    "[5x18] For 'neutral' talisman effects, increase by +0.06 per level!",
    "[5x19] Gain +0.25% Wow! Cubes per level upon Ascension.",
    "[5x20] Gain another +0.25% Wow! per level upon Ascension.",
    "[5x21] Bend time to your will, making all ticks 2% faster each level.",
    "[5x22] Adds +2% ant sacrifice reward per level.",
    "[5x23] Adds +40 base ant ELO per level.",
    "[5x24] Unlock the automator for Ant Sacrifice! [Good luck buying this.]",
    "[5x25] Good luck, buddy. [+1 Export Quark/hour]",
    "[6x1] 6 rows? That can't be... You've angered ant god (+1% Accelerators / level)",
    "[6x2] Ant God gets angrier (+1% Accelerator Boosts / level)",
    "[6x3] Ant God cannot believe your bravery (+1% Multipliers / level)",
    "[6x4] Add +1 extra level to Crystal upgrade caps multiplied by Level * Log4(Common Fragments + 1)",
    "[6x5] Unlock automation for Fortifying talismans! Activates every 2 real life seconds.",
    "[6x6] Turn some Ant Disciples against Ant God, giving +0.5% Rune Effectiveness per level.",
    "[6x7] Recruit a couple other ants towards your side as well, giving +2 free ant levels per level.",
    "[6x8] Using some coalesced Obtainium, you can make Ant Sacrifice 3% better per level.",
    "[6x9 lol] The funny number. Gain a +6.9% bonus to blessing level.",
    "[6x10] Unlock automation for Enhancing talismans! Activates every 2 real life seconds.",
    "[6x11] It may be time to look back. Makes all ticks 1.5% faster each level.",
    "[6x12] Paying off Wow! Industries, they'll sponsor +1% cubes per level towards your Ascension bank.",
    "[6x13] When you open Wow! Cubes you will get +0.1% tributes per level!",
    "[6x14] Make all Tesseract buildings produce 2% faster per level.",
    "[6x15] The first of a Tetralogy, this tome reduces the base requirements of Challenge 10 by dividing it by 1e100M! A must-read!",
    "[6x16] The Ant God has infiltrated your mind. Run away from your conscience! (+0.8% Accelerators / level)",
    "[6x17] Run... RUN FASTER from your nightmares! (+0.8% Accelerator Boosts / level)",
    "[6x18] Your resilience somehow gives you +0.8% Multipliers / level!",
    "[6x19] Your obtainium gain is increased by 3 * Log4(Uncommon Fragments + 1) * level%! Why is this? I don't know.",
    "[6x20] Your knowledge from the ant war will help you automatically gain Mortuus Est Ant levels.",
    "[6x21] Feed your Disciples pure Obtainium to make your runes +0.4% more effective per level.",
    "[6x22] Feed your ants their own crumbs to make them Log(Crumbs + 10)x faster!",
    "[6x23] Increase your base Ant ELO by 2.5% per level!",
    "[6x24] You will gain +0.03% more Offerings per level per level in the Midas Talisman!",
    "[6x25] Auto Challenge. Enough said. (Lets you automatically run and complete challenges!)",
    "[7x1] A new row, old upgrade. Makes all ticks 1.2% faster each level.",
    "[7x2] Wow! Industries sponsors another +0.9% cubes per level towards your Ascension bank!",
    "[7x3] Hey, I totally didn't steal this idea. You gain 12 tributes of Wow! Cube tier for every Tesseract opened.",
    "[7x4] Make all Tesseract buildings produce 3% faster per level. Hey, isn't that more than the last research tier?",
    "[7x5] Tome 2 of 4: How to win over the Ant universe. Another e100M Divider to Challenge 10 Base Requirement on purchase.",
    "[7x6] What, again? Alright. +0.6% Accelerators / level.",
    "[7x7] Gas, gas, gas. +0.6% Accelerator Boosts / level.",
    "[7x8] Dupe DUPE DUPE. +0.6% Multipliers / level.",
    "[7x9] Somehow, I can't explain why, you reduce your taxes by 2% multiplicative, based on 3/5 * log10(Rare Fragments)!",
    "[7x10] Want a permanent blessing boost? I know you do. A permanent +25% effect to all blessings.",
    "[7x11] SIGMA KAPPA: +0.3% Rune Effectiveness each level!",
    "[7x12] More exponentiation! +0.0001% more inceptus power per level!",
    "[7x13] Ant God's wanting blood: +2% Ant Sacrifice rewards / level",
    "[7x14] Spirit power still sucks, so add +8% power per level!",
    "[7x15] Gain 2x the Spirit buffs in challenges!",
    "[7x16] < T I M E >: +0.9% faster ticks / level ",
    "[7x17] Because of sponsorships, Wow! Industries is raising cubes gained in Ascension by 0.8% per level.",
    "[7x18] Gain +0.08% tributes from cubes per level. You know, you should expect it at this point.",
    "[7x19] +4% faster Tesseract Buildings / level. It's GROWING.",
    "[7x20] Tome 3 of 4: How to totally ROCK challenge 10. e100m divisor!",
    "[7x21] You should know how this goes. +0.4% Accelerator Boosts / level",
    "[7x22] Accelerator Boosts += 0.004 * Accelerator Boosts",
    "[7x23] A lot of a small +0.4% Multipliers per level",
    "[7x24] Epic Fragments boost Blessing power by 10% * Log10(Epic Shards + 1)",
    "[7x25] Automatically buy Constant Upgrades, if they are affordable! They also no longer subtract from your constant.",
    "[8x1] Row 8 baby! +0.2% Rune Effectiveness / level.",
    "[8x2] +Log10(Crumbs)% to ant production per level. Pretty cool buff ain't it?",
    "[8x3] +666 Base ELO per level! Spooky number of the devil.",
    "[8x4] +0.04% more offerings per level per midas level!",
    "[8x5] +1 Export Quark per hour, yet again.",
    "[8x6] +0.6% faster ticks / level because why not? You're already the speed of light.",
    "[8x7] +0.7% cubes in ascension bank / level, from dividends in Wow! Stock.",
    "[8x8] When you open a Hypercube, you also open 100 Tesseracts! (This works with 7x3, if you were curious.)",
    "[8x9] +5% faster Tesseract Buildings / level. ASCENDED.",
    "[8x10] Tome 4 of 4: You need to prepare for your ascent. e100m divisor!",
    "[8x11] Something something +0.2% Accelerators pretty cool!",
    "[8x12] Something somewhere, +0.2% Accelerator Boosts!",
    "[8x13] You are DUPLICATED. +0.2% Multipliers/level",
    "[8x14] Legendary Fragments increase Spirit power by +15% multiplied by Log10(Legendary Fragments + 1)",
    "[8x15] Unlock Automations for all 5 of the Tesseract buildings.",
    "[8x16] +0.1% Rune Effectiveness / level. Does this even do anything at this point?",
    "[8x17] Each purchased level of Mortuus Est also increases Ascension Cube reward by +0.03%",
    "[8x18] +1% Ant Sacrifice Reward per level. Singularity HYPE.",
    "[8x19] Increases both Spirit AND Blessing power by 2% per level.",
    "[8x20] Gain +1 export Quark per level, and increases the max timer to redeem quarks by 12.5 hours each!",
    "[8x21] +0.3% faster ticks / level, because you just can't wait to become the singularity.",
    "[8x22] +0.6% cubes in Ascension Bank / level. No one knows how. Bank error perhaps.",
    "[8x23] +0.06% tributes from cubes / level!. Wow! Cubes really has a lot of manufacturing errors in your favor.",
    "[8x24] +10% faster Tesseract Buildings / level. THE ARISEN. WITH THE PRAISE OF THE SINGULARITY.",
    "[8x25] Gain the power of a thousand suns! +0.01% Accelerators, A. Boosts, Multipliers, Offerings, and +0.004% Cubes, +0.04 Max Rune level, + Floor(level/400) max Talisman Level, +Floor(level/200) free ants."
];
const researchDescriptions = (i, auto = false, linGrowth = 0) => {
    const buyAmount = (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.maxbuyresearch || auto) ? 100000 : 1;
    const y = resdesc[i - 1];
    let z = "";
    const p = "res" + i;
    const metaData = getResearchCost(i, buyAmount, linGrowth);
    z = " Cost: " + ((0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(metaData[1], 0, false)) + " Obtainium [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(metaData[0] - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[i], 0, true) + " Levels]";
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[i] === (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[i])) {
        document.getElementById("researchcost").style.color = "Gold";
        document.getElementById("researchinfo3").style.color = "plum";
        z = z + " || MAXED!";
    }
    else {
        document.getElementById("researchcost").style.color = "limegreen";
        document.getElementById("researchinfo3").style.color = "white";
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints < _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchBaseCosts[i] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[i] < (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[i])) {
        document.getElementById("researchcost").style.color = "crimson";
    }
    if (!auto && !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearchToggle) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[i] > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[i] < (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[i])) {
            document.getElementById(p).style.backgroundColor = "purple";
        }
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[i] > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[i] >= (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[i])) {
        document.getElementById(p).style.backgroundColor = "green";
    }
    document.getElementById("researchinfo2").textContent = y;
    document.getElementById("researchcost").textContent = z;
    document.getElementById("researchinfo3").textContent = "Level " + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[i] + "/" + (_Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[i]);
};
const updateResearchBG = (j) => {
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[j] > _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[j]) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints += (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[j] - _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[j]) * _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchBaseCosts[j];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[j] = _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[j];
    }
    const k = "res" + j;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[j] > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[j] < _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[j]) {
        document.getElementById(k).style.backgroundColor = "purple";
    }
    else if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[j] > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[j] >= _Variables__WEBPACK_IMPORTED_MODULE_3__.Globals.researchMaxLevels[j]) {
        document.getElementById(k).style.backgroundColor = "green";
    }
    else {
        document.getElementById(k).style.backgroundColor = "black";
    }
};


/***/ }),
/* 23 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "openHypercube": () => /* binding */ openHypercube,
/* harmony export */   "calculateHypercubeBlessings": () => /* binding */ calculateHypercubeBlessings
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Tesseracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);



const openHypercube = (value, max = false) => {
    const toSpend = max ? _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowHypercubes : Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowHypercubes, value);
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowHypercubes -= toSpend;
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeOpenedDaily += toSpend;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeQuarkDaily < 25 + 75 * +_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.hypercubeToQuarkBought) {
        while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeOpenedDaily >= 5 * Math.pow(1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeQuarkDaily, 2) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeQuarkDaily < 25 + 75 * +_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.hypercubeToQuarkBought) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeQuarkDaily += 1;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += 1;
        }
    }
    const toSpendModulo = toSpend % 20;
    const toSpendDiv20 = Math.floor(toSpend / 20);
    const blessings = {
        accelerator: { weight: 4, pdf: (x) => 0 <= x && x <= 20 },
        multiplier: { weight: 4, pdf: (x) => 20 < x && x <= 40 },
        offering: { weight: 2, pdf: (x) => 40 < x && x <= 50 },
        runeExp: { weight: 2, pdf: (x) => 50 < x && x <= 60 },
        obtainium: { weight: 2, pdf: (x) => 60 < x && x <= 70 },
        antSpeed: { weight: 2, pdf: (x) => 70 < x && x <= 80 },
        antSacrifice: { weight: 1, pdf: (x) => 80 < x && x <= 85 },
        antELO: { weight: 1, pdf: (x) => 85 < x && x <= 90 },
        talismanBonus: { weight: 1, pdf: (x) => 90 < x && x <= 95 },
        globalSpeed: { weight: 1, pdf: (x) => 95 < x && x <= 100 }
    };
    for (const key in _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeBlessings) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeBlessings[key] += blessings[key].weight * toSpendDiv20;
    }
    for (let i = 0; i < toSpendModulo; i++) {
        const num = 100 * Math.random();
        for (const key in _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeBlessings) {
            if (blessings[key].pdf(num))
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeBlessings[key] += 1;
        }
    }
    calculateHypercubeBlessings();
    const extraTesseractBlessings = Math.floor(toSpend * 100 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[183]);
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowTesseracts += extraTesseractBlessings;
    (0,_Tesseracts__WEBPACK_IMPORTED_MODULE_1__.openTesseract)(extraTesseractBlessings, false);
};
const calculateHypercubeBlessings = () => {
    const keys = Object.keys(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeBlessings);
    for (const key of keys) {
        const obj = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeBlessings[key];
        const idx = keys.indexOf(key) + 1;
        let power = 1;
        let mult = 1;
        if (obj >= 1000) {
            power = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.benedictionDRPower[idx];
            mult *= Math.pow(1000, (1 - _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.benedictionDRPower[idx]));
        }
        _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.hypercubeBonusMultiplier[idx] = 1 + mult * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.benedictionbase[idx] * Math.pow(obj, power) * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.platonicBonusMultiplier[4];
    }
};


/***/ }),
/* 24 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "visualUpdateBuildings": () => /* binding */ visualUpdateBuildings,
/* harmony export */   "visualUpdateUpgrades": () => /* binding */ visualUpdateUpgrades,
/* harmony export */   "visualUpdateAchievements": () => /* binding */ visualUpdateAchievements,
/* harmony export */   "visualUpdateRunes": () => /* binding */ visualUpdateRunes,
/* harmony export */   "visualUpdateChallenges": () => /* binding */ visualUpdateChallenges,
/* harmony export */   "visualUpdateResearch": () => /* binding */ visualUpdateResearch,
/* harmony export */   "visualUpdateAnts": () => /* binding */ visualUpdateAnts,
/* harmony export */   "visualUpdateCubes": () => /* binding */ visualUpdateCubes,
/* harmony export */   "visualUpdateCorruptions": () => /* binding */ visualUpdateCorruptions,
/* harmony export */   "visualUpdateSettings": () => /* binding */ visualUpdateSettings,
/* harmony export */   "visualUpdateShop": () => /* binding */ visualUpdateShop
/* harmony export */ });
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);
/* harmony import */ var _Challenges__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
/* harmony import */ var _Runes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(15);
/* harmony import */ var _Ants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(25);
/* harmony import */ var _Utility__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(4);








const visualUpdateBuildings = () => {
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab !== "buildings") {
        console.log("buildings update happened not in buildings");
        return;
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.buildingSubTab === "coin") {
        const upper = ['produceFirst', 'produceSecond', 'produceThird', 'produceFourth', 'produceFifth'];
        const names = [null, 'Workers', 'Investments', 'Printers', 'Coin Mints', 'Alchemies'];
        let percentage = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default();
        let totalProductionDivisor = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceTotal);
        if (totalProductionDivisor.equals(0)) {
            totalProductionDivisor = new break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default(1);
        }
        for (let i = 1; i <= 5; i++) {
            const place = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals[upper[i - 1]];
            document.getElementById("buildtext" + (2 * i - 1)).textContent = names[i] + ": " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'OwnedCoin'], 0, true) + " [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'GeneratedCoin']) + "]";
            document.getElementById("buycoin" + i).textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'CostCoin']) + " coins.";
            percentage = percentage.fromMantissaExponent(place.mantissa / totalProductionDivisor.mantissa, place.exponent - totalProductionDivisor.exponent).times(100);
            document.getElementById("buildtext" + (2 * i)).textContent = "Coins/Sec: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((place.dividedBy(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.taxdivisor)).times(40), 2) + " [" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(percentage, 3) + "%]";
        }
        document.getElementById("buildtext11").textContent = "Accelerators: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.acceleratorBought, 0, true) + " [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeAccelerator, 0, true) + "]";
        document.getElementById("buildtext12").textContent = "Acceleration Power: " + ((_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.acceleratorPower - 1) * (100)).toPrecision(4) + "% || Acceleration Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.acceleratorEffect, 2) + "x";
        document.getElementById("buildtext13").textContent = "Multipliers: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.multiplierBought, 0, true) + " [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeMultiplier, 0, true) + "]";
        document.getElementById("buildtext14").textContent = "Multiplier Power: " + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.multiplierPower.toPrecision(4) + "x || Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.multiplierEffect, 2) + "x";
        document.getElementById("buildtext15").textContent = "Accelerator Boost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.acceleratorBoostBought, 0, true) + " [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeAcceleratorBoost, 0, false) + "]";
        document.getElementById("buildtext16").textContent = "Reset Diamonds and Prestige Upgrades, but add " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.tuSevenMulti * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[16] / 50) * (1 + (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('transcend', _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.challengecompletions[2]) / 100)).toPrecision(4) + "% Acceleration Power and 5 free Accelerators.";
        document.getElementById("buyaccelerator").textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.acceleratorCost) + " coins.";
        document.getElementById("buymultiplier").textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.multiplierCost) + " coins.";
        document.getElementById("buyacceleratorboost").textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.acceleratorBoostCost) + " Diamonds.";
        let warning = "";
        if (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.reincarnationCount > 0.5) {
            warning = `Your tax also caps your Coin gain at ${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.maxexponent - break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.taxdivisorcheck, 10)))}/s.`;
        }
        document.getElementById("taxinfo").textContent =
            `Due to your excessive wealth, coin production is divided by ${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.taxdivisor, 2)} to pay taxes! ${warning}`;
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.buildingSubTab === "diamond") {
        const upper = ['produceFirstDiamonds', 'produceSecondDiamonds', 'produceThirdDiamonds', 'produceFourthDiamonds', 'produceFifthDiamonds'];
        const names = [null, 'Refineries', 'Coal Plants', 'Coal Rigs', 'Pickaxes', 'Pandoras Boxes'];
        const perSecNames = [null, "Crystal/sec", "Ref./sec", "Plants/sec", "Rigs/sec", "Pickaxes/sec"];
        document.getElementById("prestigeshardinfo").textContent = "You have " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.prestigeShards, 2) + " Crystals, multiplying Coin production by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.prestigeMultiplier, 2) + "x.";
        for (let i = 1; i <= 5; i++) {
            const place = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals[upper[i - 1]];
            document.getElementById("prestigetext" + (2 * i - 1)).textContent = names[i] + ": " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'OwnedDiamonds'], 0, true) + " [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'GeneratedDiamonds'], 2) + "]";
            document.getElementById("prestigetext" + (2 * i)).textContent = perSecNames[i] + ": " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((place).times(40), 2);
            document.getElementById("buydiamond" + i).textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'CostDiamonds'], 2) + " Diamonds";
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.resettoggle1 === 1 || _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.resettoggle1 === 0) {
            const p = break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.prestigePointGain.add(1), 10) - break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.prestigePoints.sub(1), 10));
            document.getElementById("autoprestige").textContent = "Prestige when your Diamonds can increase by a factor " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.prestigeamount)) + " [Toggle number above]. Current Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(p) + ".";
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.resettoggle1 === 2) {
            document.getElementById("autoprestige").textContent = "Prestige when the autotimer is at least " + (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.prestigeamount) + " real-life seconds. [Toggle number above]. Current timer: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.autoResetTimers.prestige, 1) + "s.";
        }
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.buildingSubTab === "mythos") {
        const upper = ['produceFirstMythos', 'produceSecondMythos', 'produceThirdMythos', 'produceFourthMythos', 'produceFifthMythos'];
        const names = [null, 'Augments', 'Enchantments', 'Wizards', 'Oracles', 'Grandmasters'];
        const perSecNames = [null, "Shards/sec", "Augments/sec", "Enchantments/sec", "Wizards/sec", "Oracles/sec"];
        document.getElementById("transcendshardinfo").textContent = "You have " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.transcendShards, 2) + " Mythos Shards, providing " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalMultiplierBoost, 0, true) + " Multiplier Power boosts.";
        for (let i = 1; i <= 5; i++) {
            const place = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals[upper[i - 1]];
            document.getElementById("transcendtext" + (2 * i - 1)).textContent = names[i] + ": " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'OwnedMythos'], 0, true) + " [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'GeneratedMythos'], 2) + "]";
            document.getElementById("transcendtext" + (2 * i)).textContent = perSecNames[i] + ": " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((place).times(40), 2);
            document.getElementById("buymythos" + i).textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'CostMythos'], 2) + " Mythos";
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.resettoggle2 === 1 || _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.resettoggle2 === 0) {
            document.getElementById("autotranscend").textContent = "Prestige when your Mythos can increase by a factor " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.transcendamount)) + " [Toggle number above]. Current Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.transcendPointGain.add(1), 10) - break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.transcendPoints.add(1), 10)), 2) + ".";
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.resettoggle2 === 2) {
            document.getElementById("autotranscend").textContent = "Transcend when the autotimer is at least " + (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.transcendamount) + " real-life seconds. [Toggle number above]. Current timer: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.autoResetTimers.transcension, 1) + "s.";
        }
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.buildingSubTab === "particle") {
        const upper = ['produceFirstParticles', 'produceSecondParticles', 'produceThirdParticles', 'produceFourthParticles', 'produceFifthParticles'];
        const names = [null, 'Protons', 'Elements', 'Pulsars', 'Quasars', 'Galactic Nuclei'];
        const perSecNames = [null, "Atoms/sec", "Protons/sec", "Elements/sec", "Pulsars/sec", "Quasars/sec"];
        for (let i = 1; i <= 5; i++) {
            const place = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals[upper[i - 1]];
            document.getElementById("reincarnationtext" + (i)).textContent = names[i] + ": " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'OwnedParticles'], 0, true) + " [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'GeneratedParticles'], 2) + "]";
            document.getElementById("reincarnationtext" + (5 + i)).textContent = perSecNames[i] + ": " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((place).times(40), 2);
            document.getElementById("buyparticles" + i).textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1] + 'CostParticles'], 2) + " Particles";
        }
        document.getElementById("reincarnationshardinfo").textContent = "You have " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.reincarnationShards, 2) + " Atoms, providing " + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.buildingPower.toPrecision(4) + " Building Power. Multiplier to Coin Production: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationMultiplier);
        document.getElementById("reincarnationCrystalInfo").textContent = "Thanks to Research 2x14, you also multiply Crystal production by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationMultiplier, 1 / 50), 3, false);
        document.getElementById("reincarnationMythosInfo").textContent = "Thanks to Research 2x15, you also multiply Mythos Shard production by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationMultiplier, 1 / 250), 3, false);
        if (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.resettoggle3 === 1 || _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.resettoggle3 === 0) {
            document.getElementById("autoreincarnate").textContent = "Reincarnate when your Particles can increase by a factor " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.reincarnationamount)) + " [Toggle number above]. Current Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(10, break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.reincarnationPointGain.add(1), 10) - break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.reincarnationPoints.add(1), 10)), 2) + ".";
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.resettoggle3 === 2) {
            document.getElementById("autoreincarnate").textContent = "Reincarnate when the autotimer is at least " + (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.reincarnationamount) + " real-life seconds. [Toggle number above]. Current timer: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.autoResetTimers.reincarnation, 1) + "s.";
        }
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.buildingSubTab === "tesseract") {
        const names = [null, 'Dot', 'Vector', 'Three-Space', 'Bent Time', 'Hilbert Space'];
        const perSecNames = [null, '+Constant/sec', 'Dot/sec', 'Vector/sec', 'Three-Space/sec', 'Bent Time/sec'];
        for (let i = 1; i <= 5; i++) {
            document.getElementById("ascendText" + i).textContent = names[i] + ": " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player['ascendBuilding' + i]['owned'], 0, true) + " [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player['ascendBuilding' + i]['generated'], 2) + "]";
            document.getElementById("ascendText" + (5 + i)).textContent =
                perSecNames[i] + ": " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ascendBuildingProduction[_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.ordinals[i - 1]]), 2);
            document.getElementById("buyTesseracts" + i).textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player['ascendBuilding' + i]['cost'], 0) + " Tesseracts";
        }
        document.getElementById("tesseractInfo").textContent = "You have " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.wowTesseracts) + " Wow! Tesseracts. Gain more by beating Challenge 10 on each Ascension.";
        document.getElementById("ascendShardInfo").textContent = "You have a mathematical constant of " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.ascendShards, 2) + ". Taxes are divided by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(Math.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.ascendShards.add(1), 10) + 1, 1 + .2 / 60 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.challengecompletions[10] * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.upgrades[125] + 0.1 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.platonicUpgrades[5] + 0.2 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.platonicUpgrades[10] + 0.5 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.platonicUpgrades[15] + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.platonicBonusMultiplier[5] - 1)), 4, true) + ".";
        document.getElementById("autotessbuyeramount").textContent = "Auto buyer will save at least " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.tesseractAutoBuyerAmount) + " tesseracts. [Enter number above].";
    }
};
const visualUpdateUpgrades = () => {
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab !== "upgrades")
        return;
};
const visualUpdateAchievements = () => {
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab !== "achievements")
        return;
};
const visualUpdateRunes = () => {
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab !== "runes")
        return;
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.runescreen === "runes") {
        const talismans = [
            'rune1Talisman',
            'rune2Talisman',
            'rune3Talisman',
            'rune4Talisman',
            'rune5Talisman'
        ];
        document.getElementById("offeringCount").textContent = "You have " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeshards, 0, true) + " Offerings.";
        for (let i = 1; i <= 5; i++) {
            const place = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals[talismans[i - 1]];
            document.getElementById('rune' + i + 'level').childNodes[0].textContent = "Level: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runelevels[i - 1]) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateMaxRunes)(i));
            document.getElementById('rune' + i + 'exp').textContent = "+1 in " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateRuneExpToLevel)(i - 1) - _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeexp[i - 1], 2) + " EXP";
            document.getElementById('bonusrune' + i).textContent = " [Bonus: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(7 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.constantUpgrades[7] + Math.min(1e7, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.antUpgrades[9 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.bonusant9) + place) + "]";
            (0,_Runes__WEBPACK_IMPORTED_MODULE_5__.displayRuneInformation)(i, false);
        }
        document.getElementById("offeringExperienceValue").textContent = "Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((1 + Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.highestchallengecompletions[1], 1) + 1 / 25 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.highestchallengecompletions[1] + 0.6 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[22] + 0.3 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[23] + 3 / 25 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.upgrades[66] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.upgrades[61]) * (0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateRecycleMultiplier)(), 2, true) + "* EXP per offering sacrificed.";
        document.getElementById("offeringRecycleInfo").textContent = "You have " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((5 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.achievements[80] + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.achievements[87] + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.achievements[94] + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.achievements[101] + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.achievements[108] + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.achievements[115] + 7.5 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.achievements[122] + 7.5 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.achievements[129] + 5 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.upgrades[61] + Math.min(25, _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.rune4level / 16) + 0.5 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.cubeUpgrades[2]), 2, true) + "% chance of recycling your offerings. This multiplies EXP gain by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateRecycleMultiplier)(), 2, true) + "!";
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.runescreen === "talismans") {
        for (let i = 1; i <= 7; i++) {
            document.getElementById('talisman' + i + 'level').textContent = "Level " + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.talismanLevels[i - 1] + "/" + (30 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.talismanRarity[i - 1] + 6 * (0,_Challenges__WEBPACK_IMPORTED_MODULE_3__.CalcECC)('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.challengecompletions[13]) + Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[200] / 400));
        }
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.runescreen === "blessings") {
        const blessingMultiplierArray = [0, 8, 10, 6.66, 2, 1];
        let t = 0;
        for (let i = 1; i <= 5; i++) {
            document.getElementById('runeBlessingLevel' + i + 'Value').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeBlessingLevels[i], 0, true);
            document.getElementById('runeBlessingPower' + i + 'Value1').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.runeBlessings[i]);
            document.getElementById('runeBlessingPurchaseAmount' + i).textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(Math.max(1, (0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateSummationLinear)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeBlessingLevels[i], _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.blessingBaseCost, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeshards, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeBlessingBuyAmount)[0] - _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeBlessingLevels[i]));
            document.getElementById('runeBlessingPurchaseCost' + i).textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(Math.max(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.blessingBaseCost * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeBlessingLevels[i]), (0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateSummationLinear)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeBlessingLevels[i], _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.blessingBaseCost, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeshards, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeBlessingBuyAmount)[1]));
            if (i === 5) {
                t = 1;
            }
            document.getElementById('runeBlessingPower' + i + 'Value2').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(1 - t + blessingMultiplierArray[i] * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.effectiveRuneBlessingPower[i], 4, true);
        }
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.runescreen === "spirits") {
        const spiritMultiplierArray = [0, 1, 1, 20, 1, 100];
        const subtract = [0, 0, 0, 1, 0, 0];
        for (let i = 1; i <= 5; i++) {
            spiritMultiplierArray[i] *= ((0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateCorruptionPoints)() / 400);
            document.getElementById('runeSpiritLevel' + i + 'Value').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeSpiritLevels[i], 0, true);
            document.getElementById('runeSpiritPower' + i + 'Value1').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.runeSpirits[i]);
            document.getElementById('runeSpiritPurchaseAmount' + i).textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(Math.max(1, (0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateSummationLinear)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeSpiritLevels[i], _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.spiritBaseCost, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeshards, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeSpiritBuyAmount)[0] - _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeSpiritLevels[i]));
            document.getElementById('runeSpiritPurchaseCost' + i).textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(Math.max(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.spiritBaseCost * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeSpiritLevels[i]), (0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateSummationLinear)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeSpiritLevels[i], _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.spiritBaseCost, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeshards, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.runeSpiritBuyAmount)[1]));
            document.getElementById('runeSpiritPower' + i + 'Value2').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(1 - subtract[i] + spiritMultiplierArray[i] * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.effectiveRuneSpiritPower[i], 4, true);
        }
    }
};
const visualUpdateChallenges = () => {
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab !== "challenges")
        return;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[150] > 0) {
        document.getElementById("autoIncrementerAmount").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.autoChallengeTimerIncrement, 2) + "s";
    }
};
const visualUpdateResearch = () => {
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab !== "researches")
        return;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[61] > 0) {
        document.getElementById("automaticobtainium").textContent = "Thanks to researches you automatically gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateAutomaticObtainium)() * (0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateTimeAcceleration)(), 3, true) + " Obtainium per real life second.";
    }
};
const visualUpdateAnts = () => {
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab !== "ants")
        return;
    document.getElementById("crumbcount").textContent = "You have " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.antPoints, 2) + " Galactic Crumbs [" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.antOneProduce, 2) + "/s], providing a " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.pow(break_infinity_js__WEBPACK_IMPORTED_MODULE_0__.default.max(1, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.antPoints), 100000 + (0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateSigmoidExponential)(49900000, (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.antUpgrades[2 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.bonusant2) / 5000 * 500 / 499))) + "x Coin Multiplier.";
    const mode = _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.autoAntSacrificeMode === 2 ? "Real-time" : "In-game time";
    const timer = _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.autoAntSacrificeMode === 2 ? _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.antSacrificeTimerReal : _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.antSacrificeTimer;
    document.getElementById("autoAntSacrifice").textContent = `Sacrifice when the timer is at least ${_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.autoAntSacTimer} seconds (${mode}), Currently: ${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(timer)}`;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.achievements[173] === 1) {
        document.getElementById("antSacrificeTimer").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.formatTimeShort)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.antSacrificeTimer);
        (0,_Ants__WEBPACK_IMPORTED_MODULE_6__.showSacrifice)();
    }
};
const visualUpdateCubes = () => {
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab !== "cubes")
        return;
    document.getElementById("cubeToQuarkTimerValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.dayTimer / 3600), 0) + " Hours " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.dayTimer / 60 % 60), 0) + " Mins " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.dayTimer % 60), 0) + " Secs ";
    const prefixes = ['cube', 'tesseract', 'hypercube'];
    const power = [4, 3, 2];
    const multipliers = [10, 10, 5];
    for (let i = 0; i <= 2; i++) {
        document.getElementById(prefixes[i] + 'QuarksTodayValue').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[prefixes[i] + 'QuarkDaily']) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(25 + 75 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades[prefixes[i] + 'ToQuarkBought']);
        document.getElementById(prefixes[i] + 'QuarksOpenTodayValue').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player[prefixes[i] + 'OpenedDaily'], 0, true);
        document.getElementById(prefixes[i] + 'QuarksOpenRequirementValue').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(Math.max(0, multipliers[i] * Math.pow(Math.min(25 + 75 * +_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades[`${prefixes[i]}ToQuarkBought`], 1 + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player[prefixes[i] + 'QuarkDaily']), power[i]) - _Synergism__WEBPACK_IMPORTED_MODULE_2__.player[prefixes[i] + 'OpenedDaily']), 0, true);
    }
    let accuracy;
    switch (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.subtabNumber) {
        case 0:
            document.getElementById("cubeQuantity").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.wowCubes, 0, true);
            const cubeArray = [null, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.cubeBlessings.accelerator, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.cubeBlessings.multiplier, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.cubeBlessings.offering, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.cubeBlessings.runeExp, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.cubeBlessings.obtainium, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.cubeBlessings.antSpeed, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.cubeBlessings.antSacrifice, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.cubeBlessings.antELO, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.cubeBlessings.talismanBonus, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.cubeBlessings.globalSpeed];
            accuracy = [null, 2, 2, 2, 2, 2, 2, 2, 1, 4, 3];
            for (let i = 1; i <= 10; i++) {
                let augmentAccuracy = 0;
                if (cubeArray[i] >= 1000 && i !== 6) {
                    augmentAccuracy += 2;
                }
                document.getElementById(`cubeBlessing${i}Amount`).textContent = `x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(cubeArray[i], 0, true)}`;
                document.getElementById(`cubeBlessing${i}Effect`).textContent = `+${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(100 * (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.cubeBonusMultiplier[i] - 1), accuracy[i] + augmentAccuracy, true)}%`;
                if (i === 1 || i === 8 || i === 9) {
                    document.getElementById(`cubeBlessing${i}Effect`).textContent = `+${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.cubeBonusMultiplier[i] - 1, accuracy[i] + augmentAccuracy, true)}`;
                }
            }
            document.getElementById("cubeBlessingTotalAmount").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((0,_Utility__WEBPACK_IMPORTED_MODULE_7__.sumContents)(cubeArray), 0, true);
            break;
        case 1:
            document.getElementById("tesseractQuantity").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.wowTesseracts, 0, true);
            const tesseractArray = [null, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.tesseractBlessings.accelerator, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.tesseractBlessings.multiplier, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.tesseractBlessings.offering, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.tesseractBlessings.runeExp, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.tesseractBlessings.obtainium, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.tesseractBlessings.antSpeed, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.tesseractBlessings.antSacrifice, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.tesseractBlessings.antELO, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.tesseractBlessings.talismanBonus, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.tesseractBlessings.globalSpeed];
            accuracy = [null, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2];
            for (let i = 1; i <= 10; i++) {
                let augmentAccuracy = 0;
                if (tesseractArray[i] >= 1000 && i !== 6) {
                    augmentAccuracy += 2;
                }
                document.getElementById(`tesseractBlessing${i}Amount`).textContent = `x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(tesseractArray[i], 0, true)}`;
                document.getElementById(`tesseractBlessing${i}Effect`).textContent = `+${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(100 * (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.tesseractBonusMultiplier[i] - 1), accuracy[i] + augmentAccuracy, true)}%`;
            }
            document.getElementById("tesseractBlessingTotalAmount").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((0,_Utility__WEBPACK_IMPORTED_MODULE_7__.sumContents)(tesseractArray), 0, true);
            break;
        case 2:
            document.getElementById("hypercubeQuantity").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.wowHypercubes, 0, true);
            const hypercubeArray = [null, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.hypercubeBlessings.accelerator, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.hypercubeBlessings.multiplier, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.hypercubeBlessings.offering, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.hypercubeBlessings.runeExp, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.hypercubeBlessings.obtainium, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.hypercubeBlessings.antSpeed, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.hypercubeBlessings.antSacrifice, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.hypercubeBlessings.antELO, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.hypercubeBlessings.talismanBonus, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.hypercubeBlessings.globalSpeed];
            accuracy = [null, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2];
            for (let i = 1; i <= 10; i++) {
                let augmentAccuracy = 0;
                if (hypercubeArray[i] >= 1000) {
                    augmentAccuracy += 2;
                }
                document.getElementById(`hypercubeBlessing${i}Amount`).textContent = `x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(hypercubeArray[i], 0, true)}`;
                document.getElementById(`hypercubeBlessing${i}Effect`).textContent = `+${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(100 * (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.hypercubeBonusMultiplier[i] - 1), accuracy[i] + augmentAccuracy, true)}%`;
            }
            document.getElementById("hypercubeBlessingTotalAmount").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((0,_Utility__WEBPACK_IMPORTED_MODULE_7__.sumContents)(hypercubeArray), 0, true);
            break;
        case 3:
            document.getElementById("platonicQuantity").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.wowPlatonicCubes, 0, true);
            const platonicArray = [_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.platonicBlessings.cubes, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.platonicBlessings.tesseracts, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.platonicBlessings.hypercubes, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.platonicBlessings.platonics, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.platonicBlessings.hypercubeBonus, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.platonicBlessings.taxes, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.platonicBlessings.scoreBonus, _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.platonicBlessings.globalSpeed];
            const DRThreshold = [4e6, 4e6, 4e6, 8e4, 1e4, 1e4, 1e4, 1e4];
            accuracy = [5, 5, 5, 5, 2, 3, 3, 2];
            for (let i = 0; i < platonicArray.length; i++) {
                let augmentAccuracy = 0;
                if (platonicArray[i] >= DRThreshold[i]) {
                    augmentAccuracy += 1;
                }
                document.getElementById(`platonicBlessing${i + 1}Amount`).textContent = `x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(platonicArray[i], 0, true)}`;
                document.getElementById(`platonicBlessing${i + 1}Effect`).textContent = `+${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(100 * (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.platonicBonusMultiplier[i] - 1), accuracy[i] + augmentAccuracy, true)}%`;
            }
            document.getElementById("platonicBlessingTotalAmount").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((0,_Utility__WEBPACK_IMPORTED_MODULE_7__.sumContents)(platonicArray), 0, true);
            break;
        case 4:
            document.getElementById("cubeAmount2").textContent = `You have ${(0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.wowCubes, 0, true)} Wow! Cubes =)`;
            break;
        case 5:
            break;
        default:
            break;
    }
};
const visualUpdateCorruptions = () => {
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab !== "traits")
        return;
    document.getElementById("autoAscendMetric").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.autoAscendThreshold, 0, true);
    const metaData = (0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.CalcCorruptionStuff)();
    document.getElementById("corruptionBankValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(metaData[0]);
    document.getElementById("corruptionScoreValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(metaData[1], 0, true);
    document.getElementById("corruptionMultiplierValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(metaData[2], 1, true);
    document.getElementById("corruptionTotalScore").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(metaData[3], 0, true);
    document.getElementById("corruptionCubesValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(metaData[4], 0, true);
    document.getElementById("corruptionTesseractsValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(metaData[5]);
    document.getElementById("corruptionHypercubesValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(metaData[6]);
    document.getElementById("corruptionPlatonicCubesValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(metaData[7]);
    document.getElementById("corruptionAntExponentValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((1 - 0.9 / 90 * (0,_Utility__WEBPACK_IMPORTED_MODULE_7__.sumContents)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.usedCorruptions)) * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.extinctionMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.usedCorruptions[7]], 3);
    document.getElementById("corruptionSpiritBonusValue").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((0,_Calculate__WEBPACK_IMPORTED_MODULE_4__.calculateCorruptionPoints)() / 400, 2, true);
};
const visualUpdateSettings = () => {
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab !== "settings")
        return;
    document.getElementById("prestigeCountStatistic").childNodes[1].textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.prestigeCount, 0, true);
    document.getElementById("transcensionCountStatistic").childNodes[1].textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.transcendCount, 0, true);
    document.getElementById("reincarnationCountStatistic").childNodes[1].textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.reincarnationCount, 0, true);
    document.getElementById("fastestPrestigeStatistic").childNodes[1].textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(1000 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.fastestprestige) + "ms";
    document.getElementById("fastestTranscensionStatistic").childNodes[1].textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(1000 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.fastesttranscend) + "ms";
    document.getElementById("fastestReincarnationStatistic").childNodes[1].textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(1000 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.fastestreincarnate) + "ms";
    document.getElementById("mostOfferingStatistic").childNodes[1].textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.maxofferings);
    document.getElementById("mostObtainiumStatistic").childNodes[1].textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.maxobtainium);
    document.getElementById("mostObtainiumPerSecondStatistic").childNodes[1].textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.maxobtainiumpersecond, 2, true);
    document.getElementById("runeSumStatistic").childNodes[1].textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.runeSum);
    document.getElementById("obtainiumPerSecondStatistic").childNodes[1].textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.obtainiumpersecond, 2, true);
    document.getElementById("ascensionCountStatistic").childNodes[1].textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.ascensionCount, 0, true);
    document.getElementById("saveString").textContent =
        `Currently: ${_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.saveString.replace("$VERSION$", "v" + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.version)}`;
    const onExportQuarks = (Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.quarkstimer / 3600) * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[99] + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[100] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman7Quarks + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[125] + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[180] + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[195]));
    const maxExportQuarks = ((25 * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[195] / 2)) * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[99] + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[100] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman7Quarks + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[125] + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[180] + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[195]));
    document.getElementById("quarktimerdisplay").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)((3600 - (_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.quarkstimer % 3600.00001)), 2) + "s until +" + (1 + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[99] + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[100] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.talisman7Quarks + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[125] + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[180] + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.researches[195]) + " export Quark";
    document.getElementById("quarktimeramount").textContent = "Quarks on export: "
        + onExportQuarks
        + " [Max "
        + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(maxExportQuarks)
        + "]";
    if (onExportQuarks === maxExportQuarks) {
        const settingsTab = document.getElementById('settingstab');
        settingsTab.style.backgroundColor = 'orange';
        settingsTab.style.border = '1px solid gold';
        settingsTab.setAttribute('full', '1');
    }
};
const visualUpdateShop = () => {
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.currentTab !== "shop")
        return;
    document.getElementById("quarkamount").textContent = "You have " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.worlds) + " Quarks!";
    document.getElementById("offeringpotionowned").textContent = "Own: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.offeringPotion);
    document.getElementById("obtainiumpotionowned").textContent = "Own: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.obtainiumPotion);
    document.getElementById("offeringtimerlevel").textContent = "Level: " + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.offeringTimerLevel + "/100";
    document.getElementById("obtainiumtimerlevel").textContent = "Level: " + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.obtainiumTimerLevel + "/100";
    document.getElementById("offeringautolevel").textContent = "Level: " + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.offeringAutoLevel + "/100";
    document.getElementById("obtainiumautolevel").textContent = "Level: " + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.obtainiumAutoLevel + "/100";
    document.getElementById("instantchallenge").textContent = _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.instantChallengeBought ? "Bought" : "Not Bought";
    document.getElementById("antspeed").textContent = "Level: " + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.antSpeedLevel + "/100";
    document.getElementById("cashgrab").textContent = "Level: " + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.cashGrabLevel + "/100";
    document.getElementById("shoptalisman").textContent = _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.talismanBought ? "Bought" : "Not Bought";
    document.getElementById("challengeUpgradeLevel").textContent = "Level: " + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.challengeExtension + "/5";
    document.getElementById("challenge10TomeLevel").textContent = "Level: " + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.challenge10Tomes + "/15";
    document.getElementById("seasonPassLevel").textContent = "Level: " + _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.seasonPassLevel + "/100";
    document.getElementById("cubeToQuark").textContent = _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.cubeToQuarkBought ? "Bought" : "Not Bought";
    document.getElementById("tesseractToQuark").textContent = _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.tesseractToQuarkBought ? "Bought" : "Not Bought";
    document.getElementById("hypercubeToQuark").textContent = _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.hypercubeToQuarkBought ? "Bought" : "Not Bought";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.offeringTimerLevel === 100 ?
        document.getElementById("offeringtimerbutton").textContent = "Maxed!" :
        document.getElementById("offeringtimerbutton").textContent = "Upgrade for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.offerTimer + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.offeringTimerLevel) + " Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.offeringAutoLevel === 100 ?
        document.getElementById("offeringautobutton").textContent = "Maxed!" :
        document.getElementById("offeringautobutton").textContent = "Upgrade for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.offerAuto + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.offeringAutoLevel) + " Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.obtainiumTimerLevel === 100 ?
        document.getElementById("obtainiumtimerbutton").textContent = "Maxed!" :
        document.getElementById("obtainiumtimerbutton").textContent = "Upgrade for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.obtainiumTimer + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.obtainiumTimerLevel) + " Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.obtainiumAutoLevel === 100 ?
        document.getElementById("obtainiumautobutton").textContent = "Maxed!" :
        document.getElementById("obtainiumautobutton").textContent = "Upgrade for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.obtainiumAuto + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.obtainiumAutoLevel) + " Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.instantChallengeBought ?
        (document.getElementById("instantchallengebutton").textContent = "Bought!") :
        document.getElementById("instantchallengebutton").textContent = "Buy for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.instantChallenge) + " Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.antSpeedLevel === 100 ?
        document.getElementById("antspeedbutton").textContent = "Maxed!" :
        document.getElementById("antspeedbutton").textContent = "Upgrade for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.antSpeed + 25 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.antSpeedLevel) + " Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.cashGrabLevel === 100 ?
        document.getElementById("cashgrabbutton").textContent = "Maxed!" :
        document.getElementById("cashgrabbutton").textContent = "Upgrade for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.cashGrab + 40 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.cashGrabLevel) + " Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.talismanBought ?
        (document.getElementById("shoptalismanbutton").textContent = "Bought!") :
        document.getElementById("shoptalismanbutton").textContent = "Buy for 1500 Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.challengeExtension === 5 ?
        document.getElementById("challengeUpgradeButton").textContent = "Maxed!" :
        document.getElementById("challengeUpgradeButton").textContent = "Buy for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.challengeExtension + 250 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.challengeExtension) + " Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.challenge10Tomes === 15 ?
        document.getElementById("challenge10TomeButton").textContent = "Maxed!" :
        document.getElementById("challenge10TomeButton").textContent = "Buy for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.challenge10Upgrade + 250 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.challenge10Tomes) + " Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.seasonPassLevel === 100 ?
        document.getElementById("seasonPassButton").textContent = "Maxed!" :
        document.getElementById("seasonPassButton").textContent = "Buy for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.seasonPass + 75 * _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.seasonPassLevel) + " Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.cubeToQuarkBought ?
        (document.getElementById("cubeToQuarkButton").textContent = "Maxed!") :
        document.getElementById("cubeToQuarkButton").textContent = "Buy for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.cubeToQuark) + " Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.tesseractToQuarkBought ?
        (document.getElementById("tesseractToQuarkButton").textContent = "Maxed!") :
        document.getElementById("tesseractToQuarkButton").textContent = "Buy for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.tesseractToQuark) + " Quarks";
    _Synergism__WEBPACK_IMPORTED_MODULE_2__.player.shopUpgrades.hypercubeToQuarkBought ?
        (document.getElementById("hypercubeToQuarkButton").textContent = "Maxed!") :
        document.getElementById("hypercubeToQuarkButton").textContent = "Buy for " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.hypercubeToQuark) + " Quarks";
};


/***/ }),
/* 25 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateCrumbToCoinExp": () => /* binding */ calculateCrumbToCoinExp,
/* harmony export */   "antRepeat": () => /* binding */ antRepeat,
/* harmony export */   "updateAntDescription": () => /* binding */ updateAntDescription,
/* harmony export */   "buyAntProducers": () => /* binding */ buyAntProducers,
/* harmony export */   "buyAntUpgrade": () => /* binding */ buyAntUpgrade,
/* harmony export */   "antUpgradeDescription": () => /* binding */ antUpgradeDescription,
/* harmony export */   "antSacrificePointsToMultiplier": () => /* binding */ antSacrificePointsToMultiplier,
/* harmony export */   "showSacrifice": () => /* binding */ showSacrifice,
/* harmony export */   "sacrificeAnts": () => /* binding */ sacrificeAnts,
/* harmony export */   "autoBuyAnts": () => /* binding */ autoBuyAnts
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11);
/* harmony import */ var _UpdateHTML__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8);
/* harmony import */ var _Runes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(15);
/* harmony import */ var _Talismans__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(10);
/* harmony import */ var _Research__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(22);
/* harmony import */ var _Reset__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(14);
/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(12);











const antdesc = {
    antdesc1: "Gain a worker ant for your everyday life. Gathers Galactic Crumbs. Essential!",
    antdesc2: "Gain a breeder ant that produces worker ants automatically!",
    antdesc3: "Gain a meta-breeder ant that produces breeder ants automatically!",
    antdesc4: "Gain a mega-breeder ant that produces meta-breeder ants automatically!",
    antdesc5: "Gain a Queen ant that produces mega-breeder ants automatically!",
    antdesc6: "Gain a Lord Royal ant that produces Queen ants automatically!",
    antdesc7: "Gain an ALMIGHTY ANT that produces Lord Royal ants automatically!",
    antdesc8: "Gain a DISCIPLE OF ANT GOD that produces ALMIGHTY ANTS automatically!"
};
const antspecies = {
    antspecies1: "Inceptus Formicidae",
    antspecies2: "Fortunae Formicidae",
    antspecies3: "Tributum Formicidae",
    antspecies4: "Celeritas Formicidae",
    antspecies5: "Multa Formicidae",
    antspecies6: "Sacrificium Formicidae",
    antspecies7: "Hic Formicidae",
    antspecies8: "Experientia Formicidae",
    antspecies9: "Praemoenio Formicidae",
    antspecies10: "Scientia Formicidae",
    antspecies11: "Phylacterium Formicidae",
    antspecies12: "Mortuus Est Formicidae"
};
const antupgdesc = {
    antupgdesc1: "Promotes romance and unity within the colony. [+12% Ant Speed / level]",
    antupgdesc2: "Sweetens crumbs to increase their value [Each level increases Crumb --> Coin Conversion efficiency, up to ^50,000,000]",
    antupgdesc3: "Swarms the Taxman into submission [Up to -99% taxes!]",
    antupgdesc4: "Scares you into running faster [up to x20]",
    antupgdesc5: "Imitates your body through magic shape-shifting powers [up to x40]",
    antupgdesc6: "Tries to please Ant God... but fails [Additional Offerings!]",
    antupgdesc7: "Helps you build a few things here and there [+3% Building Cost Delay / level, Cap 9,999,999%]",
    antupgdesc8: "Knows how to salt and pepper food [Up to 1,000x Rune EXP!]",
    antupgdesc9: "Can make your message to Ant God a little more clear [+1 all Rune Levels / level, Cap 10 Million]",
    antupgdesc10: "Has big brain energy [Additional Obtainium!]",
    antupgdesc11: "A valuable offering to the Ant God [Gain up to 3x Sacrifice Rewards!]",
    antupgdesc12: "Betray Ant God increasing the fragility of your dimension [Unlocks ant talisman, Up to 2x faster timers on most things]"
};
const calculateCrumbToCoinExp = () => {
    const exponent = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension !== 15
        ? 100000 + (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateSigmoidExponential)(49900000, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[2 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant2) / 5000 * 500 / 499)
        : 1 / 10000 * (100000 + (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateSigmoidExponential)(49900000, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[2 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant2) / 5000 * 500 / 499));
    return exponent;
};
const antUpgradeTexts = [
    () => "ALL Ants work at " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default.pow(1.12 + 1 / 1000 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[101], _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[1 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant1), 2) + "x speed.",
    () => "Crumb --> Coin exponent is ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(calculateCrumbToCoinExp()),
    () => "Tax growth is multiplied by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(0.005 + 0.995 * Math.pow(0.99, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[3 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant3), 4),
    () => "Accelerator Boosts +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(100 * ((0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateSigmoidExponential)(20, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[4 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant4) / 1000 * 20 / 19) - 1), 3) + "%",
    () => "Multipliers +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(100 * ((0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateSigmoidExponential)(40, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[5 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant5) / 1000 * 40 / 39) - 1), 3) + "%",
    () => "Offerings x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + Math.pow((_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[6 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant6) / 50, 0.75), 4),
    () => "Building Costs scale " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(9999999, 3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[7 - 1] + 3 * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant7), 0, true) + "% slower!",
    () => "Rune EXP is multiplied by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateSigmoidExponential)(999, 1 / 10000 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[8 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant8, 1.1)), 3) + "!",
    () => "Each rune has +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 * Math.min(1e7, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[9 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant9)), 0, true) + " effective levels.",
    () => "Obtainium x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 2 * Math.pow((_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[10 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant10) / 50, 0.75), 4),
    () => "Sacrificing is " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 2 * (1 - Math.pow(2, -(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[11 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant11) / 125)), 4) + "x as effective",
    () => "Global timer is sped up by a factor of " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateSigmoid)(2, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[12 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.bonusant12, 69), 4)
];
let repeatAnt = null;
const antRepeat = (i) => {
    (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.clearInt)(repeatAnt);
    repeatAnt = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.interval)(() => updateAntDescription(i), 50);
};
const updateAntDescription = (i) => {
    const el = document.getElementById("anttierdescription");
    const la = document.getElementById("antprice");
    const ti = document.getElementById("antquantity");
    const me = document.getElementById("generateant");
    let priceType = "Galactic Crumbs";
    let tier = "";
    el.textContent = antdesc["antdesc" + i];
    switch (i) {
        case 1:
            priceType = "Particles";
            tier = "first";
            me.textContent = "Generates " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antOneProduce, 5) + " Crumbs/sec";
            break;
        case 2:
            tier = "second";
            me.textContent = "Generates " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antTwoProduce, 5) + " Workers/sec";
            break;
        case 3:
            tier = "third";
            me.textContent = "Generates " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antThreeProduce, 5) + " Breeders/sec";
            break;
        case 4:
            tier = "fourth";
            me.textContent = "Generates " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antFourProduce, 5) + " MetaBreeders/sec";
            break;
        case 5:
            tier = "fifth";
            me.textContent = "Generates " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antFiveProduce, 5) + " MegaBreeders/sec";
            break;
        case 6:
            tier = "sixth";
            me.textContent = "Generates " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antSixProduce, 5) + " Queens/sec";
            break;
        case 7:
            tier = "seventh";
            me.textContent = "Generates " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antSevenProduce, 5) + " Royals/sec";
            break;
        case 8:
            tier = "eighth";
            me.textContent = "Generates " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antEightProduce, 5) + " ALMIGHTIES/sec";
            break;
    }
    la.textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tier + "CostAnts"]) + " " + priceType;
    ti.textContent = "Owned: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tier + "OwnedAnts"]) + " [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tier + "GeneratedAnts"], 2) + "]";
};
const getAntCost = (originalCost, buyTo, index) => {
    --buyTo;
    const cost = originalCost
        .times(break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antCostGrowth[index - 1], buyTo))
        .add(1 * buyTo);
    return cost;
};
const getAntUpgradeCost = (originalCost, buyTo, index) => {
    --buyTo;
    const cost = originalCost.times(break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antUpgradeCostIncreases[index - 1], buyTo));
    return cost;
};
const buyAntProducers = (pos, type, originalCost, index) => {
    const sacrificeMult = antSacrificePointsToMultiplier(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificePoints);
    originalCost = new break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default(originalCost);
    const tag = index === 1 ? 'reincarnationPoints' : 'antPoints';
    let buyTo = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + "Owned" + type] + 1;
    let cashToBuy = getAntCost(originalCost, buyTo, index);
    while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag].gte(cashToBuy)) {
        buyTo = buyTo * 4;
        cashToBuy = getAntCost(originalCost, buyTo, index);
    }
    let stepdown = Math.floor(buyTo / 8);
    while (stepdown !== 0) {
        if (getAntCost(originalCost, buyTo - stepdown, index).lte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag])) {
            stepdown = Math.floor(stepdown / 2);
        }
        else {
            buyTo = buyTo - stepdown;
        }
    }
    if (!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antMax) {
        if (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + "Owned" + type] < buyTo) {
            buyTo = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + "Owned" + type] + 1;
        }
    }
    let buyFrom = Math.max(buyTo - 7, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] + 1);
    let thisCost = getAntCost(originalCost, buyFrom, index);
    while (buyFrom <= buyTo && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag].gte(getAntCost(originalCost, buyFrom, index))) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[tag].sub(thisCost);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Owned' + type] = buyFrom;
        buyFrom = buyFrom + 1;
        thisCost = getAntCost(originalCost, buyFrom, index);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[pos + 'Cost' + type] = thisCost;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints.lt(0)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints = new break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default("0");
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints.lt(0)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints = new break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default("0");
    }
    (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateAntSacrificeELO)();
    const achRequirements = [2, 6, 20, 100, 500, 6666, 77777];
    for (let j = 0; j < achRequirements.length; j++) {
        if (sacrificeMult > achRequirements[j] && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.ordinals[j + 1] + "OwnedAnts"] > 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[176 + j] === 0) {
            (0,_Achievements__WEBPACK_IMPORTED_MODULE_4__.achievementaward)(176 + j);
        }
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedAnts > 6.9e7) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedAnts = 6.9e7;
    }
};
const buyAntUpgrade = (originalCost, auto, index) => {
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension !== 11) {
        originalCost = new break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default(originalCost);
        let buyTo = 1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[index - 1];
        let cashToBuy = getAntUpgradeCost(originalCost, buyTo, index);
        while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints.gte(cashToBuy)) {
            buyTo = buyTo * 4;
            cashToBuy = getAntUpgradeCost(originalCost, buyTo, index);
        }
        let stepdown = Math.floor(buyTo / 8);
        while (stepdown !== 0) {
            if (getAntUpgradeCost(originalCost, buyTo - stepdown, index).lte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints)) {
                stepdown = Math.floor(stepdown / 2);
            }
            else {
                buyTo = buyTo - stepdown;
            }
        }
        if (!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antMax) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[index - 1] + 1 < buyTo) {
                buyTo = 1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[index - 1];
            }
        }
        let buyFrom = Math.max(buyTo - 7, 1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[index - 1]);
        let thisCost = getAntUpgradeCost(originalCost, buyFrom, index);
        while (buyFrom <= buyTo && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints.gte(thisCost)) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints.sub(thisCost);
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[index - 1] = buyFrom;
            buyFrom = buyFrom + 1;
            thisCost = getAntUpgradeCost(originalCost, buyFrom, index);
        }
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateAnts)();
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateRuneLevels)();
        (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateAntSacrificeELO)();
        if (!auto) {
            antUpgradeDescription(index);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[12 - 1] === 1 && index === 12) {
            (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_5__.revealStuff)();
        }
    }
};
const antUpgradeDescription = (i) => {
    const el = document.getElementById("antspecies");
    const al = document.getElementById("antlevelbonus");
    const la = document.getElementById("antupgradedescription");
    const ti = document.getElementById("antupgradecost");
    const me = document.getElementById("antupgradeeffect");
    const content1 = antspecies["antspecies" + i];
    const content2 = antupgdesc["antupgdesc" + i];
    const bonuslevel = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals["bonusant" + i];
    const c11 = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 11 ? 999 : 0;
    el.childNodes[0].textContent = content1 + " Level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[i - 1]);
    al.textContent = " [+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[i - 1] + c11, bonuslevel)) + "]";
    la.textContent = content2;
    ti.textContent = "Cost: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default.pow(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antUpgradeCostIncreases[i - 1], _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[i - 1] * _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.extinctionMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[10]]).times(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antUpgradeBaseCost[i - 1])) + " Galactic Crumbs";
    me.textContent = "CURRENT EFFECT: " + antUpgradeTexts[i - 1]();
};
const antSacrificePointsToMultiplier = (points) => {
    let multiplier = Math.pow(1 + points / 5000, 2);
    multiplier *= (1 + 0.2 * Math.log(1 + points) / Math.log(10));
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[174] > 0) {
        multiplier *= (1 + 0.4 * Math.log(1 + points) / Math.log(10));
    }
    return multiplier;
};
const showSacrifice = () => {
    const sacRewards = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateAntSacrificeRewards)();
    document.getElementById("antSacrificeSummary").style.display = "block";
    document.getElementById("antELO").childNodes[0].textContent = "Your Ant ELO is ";
    document.getElementById("ELO").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO, 2);
    document.getElementById("effectiveELO").textContent = "[" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO, 2, false) + " effective]";
    document.getElementById("antSacrificeMultiplier").childNodes[0].textContent = "Ant Multiplier x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(antSacrificePointsToMultiplier(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificePoints), 3, false) + " --> ";
    document.getElementById("SacrificeMultiplier").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(antSacrificePointsToMultiplier(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificePoints + sacRewards.antSacrificePoints), 3, false);
    document.getElementById("SacrificeUpgradeMultiplier").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.upgradeMultiplier, 3, true) + "x";
    document.getElementById("SacrificeTimeMultiplier").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.timeMultiplier, 3, true) + "x";
    document.getElementById("antSacrificeOffering").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(sacRewards.offerings);
    document.getElementById("antSacrificeObtainium").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(sacRewards.obtainium);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[9] > 0) {
        document.getElementById("antSacrificeTalismanShard").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(sacRewards.talismanShards) + " [>500 ELO]";
        document.getElementById("antSacrificeCommonFragment").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(sacRewards.commonFragments) + " [>750 ELO]";
        document.getElementById("antSacrificeUncommonFragment").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(sacRewards.uncommonFragments) + " [>1,000 ELO]";
        document.getElementById("antSacrificeRareFragment").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(sacRewards.rareFragments) + " [>1,500 ELO]";
        document.getElementById("antSacrificeEpicFragment").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(sacRewards.epicFragments) + " [>2,000 ELO]";
        document.getElementById("antSacrificeLegendaryFragment").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(sacRewards.legendaryFragments) + " [>3,000 ELO]";
        document.getElementById("antSacrificeMythicalFragment").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(sacRewards.mythicalFragments) + " [>5,000 ELO]";
    }
};
const sacrificeAnts = (auto = false) => {
    const historyEntry = {};
    let p = true;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints.gte("1e40")) {
        if (!auto && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificePoints < 100 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[32]) {
            p = confirm("This resets your Crumbs, Ants and Ant Upgrades in exchange for some multiplier and resources. Continue?");
        }
        if (p) {
            historyEntry.antSacrificePointsBefore = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificePoints;
            const sacRewards = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateAntSacrificeRewards)();
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificePoints += sacRewards.antSacrificePoints;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards += sacRewards.offerings;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints += sacRewards.obtainium;
            historyEntry.seconds = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimer;
            historyEntry.offerings = sacRewards.offerings;
            historyEntry.obtainium = sacRewards.obtainium;
            historyEntry.antSacrificePointsAfter = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificePoints;
            historyEntry.baseELO = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antELO;
            historyEntry.effectiveELO = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.effectiveELO;
            historyEntry.crumbs = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints;
            historyEntry.crumbsPerSecond = _Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antOneProduce;
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[9] > 0) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanShards += sacRewards.talismanShards;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.commonFragments += sacRewards.commonFragments;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.uncommonFragments += sacRewards.uncommonFragments;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.rareFragments += sacRewards.rareFragments;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.epicFragments += sacRewards.epicFragments;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.legendaryFragments += sacRewards.legendaryFragments;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.mythicalFragments += sacRewards.mythicalFragments;
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel > 0.5 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoSacrificeToggle) {
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[20] === 1 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards >= 5) {
                    let unmaxed = 0;
                    for (let i = 1; i <= 5; i++) {
                        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[i - 1] < (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateMaxRunes)(i))
                            unmaxed++;
                    }
                    if (unmaxed > 0) {
                        const baseAmount = Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards / unmaxed);
                        for (let i = 1; i <= 5; i++) {
                            (0,_Runes__WEBPACK_IMPORTED_MODULE_6__.redeemShards)(i, true, baseAmount);
                        }
                        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.sacrificeTimer = 0;
                    }
                }
            }
            (0,_Reset__WEBPACK_IMPORTED_MODULE_9__.resetAnts)();
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimer = 0;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimerReal = 0;
            (0,_Talismans__WEBPACK_IMPORTED_MODULE_7__.updateTalismanInventory)();
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch > 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearchToggle) {
                const linGrowth = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch === 200) ? 0.01 : 0;
                (0,_Research__WEBPACK_IMPORTED_MODULE_8__.buyResearch)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoResearch, true, linGrowth);
            }
            (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateAntSacrificeELO)();
            _Events__WEBPACK_IMPORTED_MODULE_10__.Synergism.emit('historyAdd', 'ants', 'antsacrifice', historyEntry);
        }
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.mythicalFragments >= 1e11 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 14 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[248] < 1) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_4__.achievementaward)(248);
    }
};
const autoBuyAnts = () => {
    const canAffordUpgrade = (x, m) => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints.gte(getAntUpgradeCost(new break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.antUpgradeBaseCost[x - 1]), _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[x - 1] + 1, x).times(m));
    const ach = [176, 176, 177, 178, 178, 179, 180, 180, 181, 182, 182, 145];
    const cost = ["100", "100", "1000", "1000", "1e5", "1e6", "1e8", "1e11", "1e15", "1e20", "1e40", "1e100"];
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension !== 11) {
        for (let i = 1; i <= ach.length; i++) {
            const check = i === 12 ? _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[ach[i - 1]] : _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[ach[i - 1]];
            if (check && canAffordUpgrade(i, 2)) {
                buyAntUpgrade(cost[i - 1], true, i);
            }
        }
    }
    const _ach = [173, 176, 177, 178, 179, 180, 181, 182];
    const _cost = ["1e800", "3", "100", "10000", "1e12", "1e36", "1e100", "1e300"];
    for (let i = 1; i <= _ach.length; i++) {
        const res = i === 1 ? _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.reincarnationPoints : _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antPoints;
        const m = i === 1 ? 1 : 2;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[_ach[i - 1]] && res.gte(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player[_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.ordinals[i - 1] + "CostAnts"].times(m))) {
            buyAntProducers(_Variables__WEBPACK_IMPORTED_MODULE_2__.Globals.ordinals[i - 1], "Ants", _cost[i - 1], i);
        }
    }
};


/***/ }),
/* 26 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "loadStatisticsAccelerator": () => /* binding */ loadStatisticsAccelerator,
/* harmony export */   "loadStatisticsMultiplier": () => /* binding */ loadStatisticsMultiplier,
/* harmony export */   "loadStatisticsCubeMultipliers": () => /* binding */ loadStatisticsCubeMultipliers,
/* harmony export */   "loadStatisticsOfferingMultipliers": () => /* binding */ loadStatisticsOfferingMultipliers,
/* harmony export */   "c15RewardUpdate": () => /* binding */ c15RewardUpdate
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);



const loadStatisticsAccelerator = () => {
    document.getElementById("sA1").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeUpgradeAccelerator, 0, false);
    document.getElementById("sA2").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.totalAcceleratorBoost * (4 + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[18] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[19] + 3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[20] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.cubeBonusMultiplier[1]), 0, false);
    document.getElementById("sA3").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor(Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.rune1level * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.effectiveLevelMult / 10, 1.1)), 0, true);
    document.getElementById("sA4").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.rune1level * 1 / 200 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.effectiveLevelMult, 3, true);
    document.getElementById("sA5").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.pow(1.01, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[21] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[22] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[23] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[24] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[25]), 3, true);
    document.getElementById("sA6").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.pow(1.01, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[60] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[61] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[62]), 3, true);
    document.getElementById("sA7").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 1 / 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[1], 3, true);
    document.getElementById("sA8").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 1 / 20 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[6] + 1 / 25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[7] + 1 / 40 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[8] + 3 / 200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[9] + 1 / 200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[10], 3, true);
    document.getElementById("sA9").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 1 / 20 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[86], 3, true);
    document.getElementById("sA10").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1.25, 3, true);
    document.getElementById("sA11").textContent = "^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(1, (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[6] / 30) * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.maladaptivePower[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[2]] / (1 + Math.abs(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[1] - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[2]))), 3, true);
    document.getElementById("sA12").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeAccelerator, 0, true);
};
const loadStatisticsMultiplier = () => {
    document.getElementById("sM1").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeUpgradeMultiplier, 0, true);
    document.getElementById("sM2").textContent = "+" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.floor(Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.rune2level / 10 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.effectiveLevelMult) * Math.floor(10 + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.rune2level / 10 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.effectiveLevelMult) / 2) * 100 / 100, 0, true);
    document.getElementById("sM3").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.rune2level / 200 * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.effectiveLevelMult, 3, true);
    document.getElementById("sM4").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.pow(1.01, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[21] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[22] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[23] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[24] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[25]) * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[34] * 3 / 100) * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[34] * (2 / 103)), 3, true);
    document.getElementById("sM5").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.pow(1.01, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[57] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[58] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[59]), 3, true);
    document.getElementById("sM6").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 1 / 5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[2], 3, true);
    document.getElementById("sM7").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 1 / 20 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[11] + 1 / 25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[12] + 1 / 40 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[13] + 3 / 200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[14] + 1 / 200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[15], 3, true);
    document.getElementById("sM8").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 + 1 / 20 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[87], 3, true);
    document.getElementById("sM9").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((0,_Calculate__WEBPACK_IMPORTED_MODULE_2__.calculateSigmoidExponential)(40, (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[5 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.bonusant5) / 1000 * 40 / 39), 2, true);
    document.getElementById("sM10").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.cubeBonusMultiplier[2], 3, true);
    document.getElementById("sM11").textContent = "x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1.25, 3, true);
    document.getElementById("sM12").textContent = "^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.min(1, (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[6] / 30) * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.divisivenessPower[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[1]] / (1 + Math.abs(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[1] - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[2]))), 3, true);
    document.getElementById("sM13").textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.freeMultiplier, 3, true);
};
const loadStatisticsCubeMultipliers = () => {
    const arr = (0,_Calculate__WEBPACK_IMPORTED_MODULE_2__.calculateCubeMultiplier)(false);
    const map = {
        1: { acc: 4, desc: "Ascension Timer Multiplier" },
        2: { acc: 2, desc: "Season pass:" },
        3: { acc: 4, desc: "Research 5x19:" },
        4: { acc: 4, desc: "Research 5x20:" },
        5: { acc: 2, desc: "Cube upgrade 1x1:" },
        6: { acc: 2, desc: "Cube upgrade 2x1:" },
        7: { acc: 2, desc: "Cube upgrade 3x1:" },
        8: { acc: 2, desc: "Cube upgrade 4x1:" },
        9: { acc: 2, desc: "Cube upgrade 5x1:" },
        10: { acc: 2, desc: "Research 6x12:" },
        11: { acc: 3, desc: "Research 7x2:" },
        12: { acc: 3, desc: "Research 7x17:" },
        13: { acc: 3, desc: "Research 8x7:" },
        14: { acc: 3, desc: "Research 8x22:" },
        15: { acc: 3, desc: "Ascension Count Achievement:" },
        16: { acc: 4, desc: "Bought Mortuus Est ants (R8x17):" },
        17: { acc: 4, desc: "Duplication Spirit Power:" },
        18: { acc: 5, desc: "Research 8x25:" },
        19: { acc: 4, desc: "Constant upgrade 10:" },
        20: { acc: 2, desc: "Cube upgrade 3x10:" },
        21: { acc: 2, desc: "Number Achievement 4 Bonus:" },
        22: { acc: 2, desc: "Number Achievement 6 Bonus:" },
        23: { acc: 2, desc: "Challenge 11 Ach:" },
        24: { acc: 4, desc: "ASCENDED Achievement:" },
        25: { acc: 2, desc: "Sun & Moon Achievements:" },
        26: { acc: 4, desc: "Cube Shards:" },
        27: { acc: 4, desc: "Challenge 15 Reward:" },
    };
    for (let i = 0; i < arr.length; i++) {
        const statCMi = document.getElementById(`statCM${i + 1}`);
        statCMi.childNodes[0].textContent = map[i + 1].desc;
        document.getElementById(`sCM${i + 1}`).textContent = `x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(arr[i], map[i + 1].acc, true)}`;
    }
    document.getElementById("sCMT").textContent = `x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((0,_Calculate__WEBPACK_IMPORTED_MODULE_2__.calculateCubeMultiplier)(), 3)}`;
};
const loadStatisticsOfferingMultipliers = () => {
    const arr = (0,_Calculate__WEBPACK_IMPORTED_MODULE_2__.calculateOfferings)("prestige", false);
    const map = {
        1: { acc: 3, desc: "Alchemy Achievement 5:" },
        2: { acc: 3, desc: "Alchemy Achievement 6:" },
        3: { acc: 3, desc: "Alchemy Achievement 7:" },
        4: { acc: 3, desc: "Diamond Upgrade 4x3:" },
        5: { acc: 3, desc: "Particle Upgrade 3x5:" },
        6: { acc: 3, desc: "Auto Offering Shop Upgrade:" },
        7: { acc: 3, desc: "Offering EX Shop Upgrade:" },
        8: { acc: 3, desc: "Cash Grab Shop Upgrade:" },
        9: { acc: 3, desc: "Research 4x10:" },
        10: { acc: 3, desc: "Sacrificium Formicidae:" },
        11: { acc: 3, desc: "Plutus Cube Tribute:" },
        12: { acc: 3, desc: "Constant Upgrade 3:" },
        13: { acc: 3, desc: "Research 6x24,8x4:" },
        14: { acc: 3, desc: "Challenge 12:" },
        15: { acc: 3, desc: "Research 8x25:" },
        16: { acc: 3, desc: "Ascension Count Achievement:" },
        17: { acc: 3, desc: "Sun and Moon Achievements:" },
        18: { acc: 3, desc: "Cube Upgrade 5x6:" },
        19: { acc: 3, desc: "Cube Upgrade 5x10:" },
        20: { acc: 3, desc: "Platonic ALPHA:" },
        21: { acc: 3, desc: "Platonic BETA:" },
        22: { acc: 3, desc: "Platonic OMEGA:" },
        23: { acc: 3, desc: "Challenge 15:" },
    };
    for (let i = 0; i < arr.length; i++) {
        const statOffi = document.getElementById(`statOff${i + 1}`);
        statOffi.childNodes[0].textContent = map[i + 1].desc;
        document.getElementById(`sOff${i + 1}`).textContent = `x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(arr[i], map[i + 1].acc, true)}`;
    }
    document.getElementById("sOffT").textContent = `x${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((0,_Calculate__WEBPACK_IMPORTED_MODULE_2__.calculateOfferings)("prestige", true, true), 3)}`;
};
const c15RewardUpdate = () => {
    const exponentRequirements = [750, 1.5e3, 3e3, 5e3, 7.5e3, 7.5e3, 1e4, 1e4, 2e4, 4e4, 6e4, 1e5, 1e5, 2e5, 5e5, 1e6, 3e6, 1e7, 3e7, 1e8, 5e8, 2e9, 1e10];
    const keys = Object.keys(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards);
    const e = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challenge15Exponent;
    for (const obj in _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[obj] = 1;
    }
    if (e >= exponentRequirements[0]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[0]] = 1 + 1 / 50 * Math.log(e / 175) / Math.log(2);
    }
    if (e >= exponentRequirements[1]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[1]] = 1 + 1 / 20 * Math.log(e / 375) / Math.log(2);
    }
    if (e >= exponentRequirements[2]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[2]] = 1 + 1 / 150 * Math.log(e / 750) / Math.log(2);
    }
    if (e >= exponentRequirements[3]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[3]] = Math.pow(0.98, Math.log(e / 1.25e3) / Math.log(2));
    }
    if (e >= exponentRequirements[4]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[4]] = 1 + 1 / 5 * Math.pow(e / 7.5e3, 0.75);
    }
    if (e >= exponentRequirements[5]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[5]] = 1 + 1 / 5 * Math.pow(e / 7.5e3, 0.75);
    }
    if (e >= exponentRequirements[6]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[6]] = 1 + 1 / 20 * Math.log(e / 2.5e3) / Math.log(2);
    }
    if (e >= exponentRequirements[7]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[7]] = 1 + 1 / 20 * Math.log(e / 2.5e3) / Math.log(2);
    }
    if (e >= exponentRequirements[8]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[8]] = 1 + Math.pow(e / 2e4, 1.5);
    }
    if (e >= exponentRequirements[9]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[9]] = 1 + 1 / 33 * Math.log(e / 1e4) / Math.log(2);
    }
    if (e >= exponentRequirements[10]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[10]] = 1 + 1 / 100 * Math.log(e / 1.5e4) / Math.log(2);
    }
    if (e >= exponentRequirements[11]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[11]] = Math.pow(0.98, Math.log(e / 2.5e4) / Math.log(2));
    }
    if (e >= exponentRequirements[12]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[12]] = Math.pow(0.98, Math.log(e / 2.5e4) / Math.log(2));
    }
    if (e >= exponentRequirements[13]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[13]] = Math.pow(1 + Math.log(e / 2e5) / Math.log(2), 4);
    }
    if (e >= exponentRequirements[14]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[14]] = 1 + 1 / 20 * Math.log(e / 1.5e5) / Math.log(2);
    }
    if (e >= exponentRequirements[15]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[15]] = 1 + 1 / 150 * Math.log(e / 2.5e5) / Math.log(2);
    }
    if (e >= exponentRequirements[16]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[16]] = 1 + 1 / 20 * Math.log(e / 7.5e5) / Math.log(2);
    }
    if (e >= exponentRequirements[17]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[17]] = 1 + 1 / 20 * Math.log(e / 2.5e6) / Math.log(2);
    }
    if (e >= exponentRequirements[18]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[18]] = 1 + 1 / 5 * Math.pow(e / 3e7, 1 / 4);
    }
    if (e >= exponentRequirements[19]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[19]] = 1 + 1 / 5 * Math.pow(e / 1e8, 2 / 3);
    }
    if (e >= exponentRequirements[20]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[20]] = 1 + 1 / 200 * Math.log(e / 1.25e8) / Math.log(2);
    }
    if (e >= exponentRequirements[21]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[21]] = 1 + 1 / 5 * Math.pow(e / 2e9, 1 / 4);
    }
    if (e >= exponentRequirements[22]) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards[keys[22]] = 1 + 1 / 4 * Math.pow(e / 1e10, 1 / 4);
    }
    updateDisplayC15Rewards();
};
const updateDisplayC15Rewards = () => {
    document.getElementById('c15Reward0Num').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challenge15Exponent, 0, true);
    const exponentRequirements = [750, 1.5e3, 3e3, 5e3, 7.5e3, 7.5e3, 1e4, 1e4, 2e4, 4e4, 6e4, 1e5, 1e5, 2e5, 5e5, 1e6, 3e6, 1e7, 3e7, 1e8, 5e8, 2e9, 1e10];
    const values = Object.values(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards);
    let keepExponent = 'None';
    for (let i = 0; i < exponentRequirements.length; i++) {
        if (keepExponent === 'None' && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challenge15Exponent < exponentRequirements[i]) {
            keepExponent = exponentRequirements[i];
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challenge15Exponent >= exponentRequirements[i]) {
            document.getElementById('c15Reward' + (i + 1) + 'Num').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(100 * values[i] - 100, 2, true);
        }
        document.getElementById('c15Reward' + (i + 1)).style.display = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challenge15Exponent >= exponentRequirements[i]) ? 'block' : 'none';
        document.getElementById('c15RewardList').textContent = typeof keepExponent === 'string'
            ? 'You have unlocked all reward types from Challenge 15!'
            : 'Next reward type requires ' + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(keepExponent, 0, true) + ' exponent.';
    }
};


/***/ }),
/* 27 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "corruptionDisplay": () => /* binding */ corruptionDisplay,
/* harmony export */   "corruptionButtonsAdd": () => /* binding */ corruptionButtonsAdd,
/* harmony export */   "corruptionLoadoutTableCreate": () => /* binding */ corruptionLoadoutTableCreate,
/* harmony export */   "corruptionLoadoutTableUpdate": () => /* binding */ corruptionLoadoutTableUpdate,
/* harmony export */   "corruptionCleanseConfirm": () => /* binding */ corruptionCleanseConfirm
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _Toggles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);
/* harmony import */ var _Utility__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);




const corruptionDisplay = (index) => {
    if (document.getElementById("corruptionDetails").style.visibility !== "visible") {
        document.getElementById("corruptionDetails").style.visibility = "visible";
    }
    if (document.getElementById("corruptionSelectedPic").style.visibility !== "visible") {
        document.getElementById("corruptionSelectedPic").style.visibility = "visible";
    }
    _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionTrigger = index;
    const corruptionTexts = {
        1: {
            name: "Corruption I: Divisiveness",
            description: "Your multipliers get disintegrated! Is extra devious without also using Maladaption Corruption",
            current: "On this Ascension, this corruption is level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[1]) + ". Effect: Free Mult Exponent ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.divisivenessPower[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[1]], 3),
            planned: "On next Ascension, this corruption will be level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[1]) + ". Effect: Free Multiplier Exponent ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.divisivenessPower[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[1]], 3),
            multiplier: "Current Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[1]], 1) + " / Next Ascension Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[1]], 1),
            spiritContribution: "This Ascension gives Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[1], 2), 1) + "% / Next Ascension Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[1], 2), 1) + "%",
            image: "Pictures/Divisiveness Level 7.png"
        },
        2: {
            name: "Corruption II: Maladaption",
            description: "Insert Cool Text Here. Is extra devious without also using Divisiveness Corruption. Yin/Yang!",
            current: "On this Ascension, this corruption is level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[2]) + ". Effect: Free Accel. Exponent ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.maladaptivePower[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[2]], 3),
            planned: "On next Ascension, this corruption will be level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[2]) + ". Effect: Free Accelerator Exponent ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.maladaptivePower[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[2]], 3),
            multiplier: "Current Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[2]], 1) + " / Next Ascension Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[2]], 1),
            spiritContribution: "This Ascension gives Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[2], 2), 1) + "% / Next Ascension Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[2], 2), 1) + "%",
            image: "Pictures/Maladaption Lvl 7.png"
        },
        3: {
            name: "Corruption III: Spacial Dilation",
            description: "Way to go, Albert.",
            current: "On this Ascension, this corruption is level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[3]) + ". Effect: Time Speed is divided by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 / _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.lazinessMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[3]], 5),
            planned: "On next Ascension, this corruption will be level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[3]) + ". Effect: Time is divided by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(1 / _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.lazinessMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[3]], 5),
            multiplier: "Current Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[3]], 1) + " / Next Ascension Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[3]], 1),
            spiritContribution: "This Ascension gives Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[3], 2), 1) + "% / Next Ascension Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[3], 2), 1) + "%",
            image: "Pictures/Laziness Lvl 7.png"
        },
        4: {
            name: "Corruption IV: Hyperchallenged",
            description: "What's in a challenge?",
            current: "On this Ascension, this corruption is level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[4]) + ". Effect: Challenge Exponent Reqs.  x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.hyperchallengedMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[4]], 3),
            planned: "On next Ascension, this corruption will be level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[4]) + ". Effect: Challenge Exponent Reqs.  x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.hyperchallengedMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[4]], 3),
            multiplier: "Current Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[4]], 1) + " / Next Ascension Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[4]], 1),
            spiritContribution: "This Ascension gives Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[4], 2), 1) + "% / Next Ascension Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[4], 2), 1) + "%",
            image: "Pictures/Hyperchallenged Lvl 7.png"
        },
        5: {
            name: "Corruption V: Scientific Illiteracy",
            description: "Maybe Albert wouldn't have theorized Dilation after all.",
            current: "On this Ascension, this corruption is level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[5]) + ". Effect: Obtainium gain ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.illiteracyPower[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[5]], 3),
            planned: "On next Ascension, this corruption will be level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[5]) + ". Effect: Obtainium gain ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.illiteracyPower[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[5]], 3),
            multiplier: "Current Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[5]], 1) + " / Next Ascension Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[5]], 1),
            spiritContribution: "This Ascension gives Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[5], 2), 1) + "% / Next Ascension Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[5], 2), 1) + "%",
            image: "Pictures/Scientific Illiteracy Lvl 7.png"
        },
        6: {
            name: "Corruption VI: Market Deflation",
            description: "Diamond Mine destroyed... no more monopolies!",
            current: "On this Ascension, this corruption is level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[6]) + ". Effect: Diamond gain ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.deflationMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[6]], 9),
            planned: "On next Ascension, this corruption will be level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[6]) + ". Effect: Diamond gain ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.deflationMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[6]], 9),
            multiplier: "Current Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[6]], 1) + " / Next Ascension Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[6]], 1),
            spiritContribution: "This Ascension gives Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[6], 2), 1) + "% / Next Ascension Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[6], 2), 1) + "%",
            image: "Pictures/Deflation Lvl 7.png"
        },
        7: {
            name: "Corruption VII: Extinction",
            description: "It killed the dinosaurs too, ya dingus.",
            current: "On this Ascension, this corruption is level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[7]) + ". Effect: Ant Production ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.extinctionMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[7]], 3),
            planned: "On next Ascension, this corruption will be level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[7]) + ". Effect: Ant Production ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.extinctionMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[7]], 3),
            multiplier: "Current Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[7]], 1) + " / Next Ascension Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[7]], 1),
            spiritContribution: "This Ascension gives Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[7], 2), 1) + "% / Next Ascension Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[7], 2), 1) + "%",
            image: "Pictures/Extinction Lvl 7.png"
        },
        8: {
            name: "Corruption VIII: Drought",
            description: "More like California, am I right?",
            current: "On this Ascension, this corruption is level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[8]) + ". Effect: Offering EXP divided by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.droughtMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[8]], 3),
            planned: "On next Ascension, this corruption will be level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[8]) + ". Effect: Offering EXP divided by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.droughtMultiplier[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[8]], 3),
            multiplier: "Current Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[8]], 1) + " / Next Ascension Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[8]], 1),
            spiritContribution: "This Ascension gives Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[8], 2), 1) + "% / Next Ascension Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[8], 2), 1) + "%",
            image: "Pictures/Drought Lvl 7.png"
        },
        9: {
            name: "Corruption IX: Financial Recession",
            description: "2008.exe has stopped working.",
            current: "On this Ascension, this corruption is level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[9]) + ". Effect: Coin Gain ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.financialcollapsePower[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[9]], 3),
            planned: "On next Ascension, this corruption will be level " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[9]) + ". Effect: Coin Gain ^" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.financialcollapsePower[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[9]], 3),
            multiplier: "Current Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[9]], 1) + " / Next Ascension Score Multiplier: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.corruptionPointMultipliers[_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[9]], 1),
            spiritContribution: "This Ascension gives Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[9], 2), 1) + "% / Next Ascension Rune Spirit Effect +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * Math.pow(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[9], 2), 1) + "%",
            image: "Pictures/Financial Collapse Lvl 7.png"
        },
        10: {
            name: "CLEANSE THE CORRUPTION",
            description: "Free this world of sin.",
            current: "Reset all Corruptions to level 0 for your current ascension. Does not reset your current ascension.",
            planned: "Push that big 'Reset Corruptions' button to confirm your decision.",
            multiplier: "Note: if you need to do this, you may have bitten off more than you can chew.",
            spiritContribution: "",
            image: "Pictures/ExitCorruption.png"
        }
    };
    document.getElementById("corruptionName").textContent = corruptionTexts[index].name;
    document.getElementById("corruptionDescription").textContent = corruptionTexts[index].description;
    document.getElementById("corruptionLevelCurrent").textContent = corruptionTexts[index].current;
    document.getElementById("corruptionLevelPlanned").textContent = corruptionTexts[index].planned;
    document.getElementById("corruptionMultiplierContribution").textContent = corruptionTexts[index].multiplier;
    document.getElementById("corruptionSpiritContribution").textContent = corruptionTexts[index].spiritContribution;
    document.getElementById("corruptionSelectedPic").setAttribute("src", corruptionTexts[index].image);
    if (index < 10) {
        document.getElementById(`corrCurrent${index}`).textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[index]);
        document.getElementById(`corrNext${index}`).textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[index]);
    }
};
const corruptionButtonsAdd = () => {
    const rows = document.getElementsByClassName("corruptionStatRow");
    for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        const p = document.createElement("p");
        p.className = "corrDesc";
        let text = document.createTextNode("Current: ");
        p.appendChild(text);
        let span = document.createElement("span");
        span.id = `corrCurrent${i + 1}`;
        span.textContent = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[i + 1] + '';
        p.appendChild(span);
        text = document.createTextNode(" / Next: ");
        p.appendChild(text);
        span = document.createElement("span");
        span.id = `corrNext${i + 1}`;
        span.textContent = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[i + 1] + '';
        p.appendChild(span);
        row.appendChild(p);
        let btn;
        btn = document.createElement("button");
        btn.className = "corrBtn corruptionMax";
        btn.textContent = "+12";
        btn.onclick = () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleCorruptionLevel)(i + 1, 12);
        row.appendChild(btn);
        btn = document.createElement("button");
        btn.className = "corrBtn corruptionUp";
        btn.textContent = "+1";
        btn.onclick = () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleCorruptionLevel)(i + 1, 1);
        row.appendChild(btn);
        btn = document.createElement("button");
        btn.className = "corrBtn corruptionDown";
        btn.textContent = "-1";
        btn.onclick = () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleCorruptionLevel)(i + 1, -1);
        row.appendChild(btn);
        btn = document.createElement("button");
        btn.className = "corrBtn corruptionReset";
        btn.textContent = "-12";
        btn.addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_2__.toggleCorruptionLevel)(i + 1, -12));
        row.appendChild(btn);
        row.addEventListener('click', () => corruptionDisplay(i + 1));
    }
};
const corruptionLoadoutTableCreate = () => {
    const corrCount = 9;
    const table = (0,_Utility__WEBPACK_IMPORTED_MODULE_3__.getElementById)("corruptionLoadoutTable");
    for (let i = 0; i < Object.keys(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.corruptionLoadouts).length + 1; i++) {
        const row = table.insertRow();
        for (let j = 0; j <= corrCount; j++) {
            const cell = row.insertCell();
            if (j === 0) {
                cell.textContent = (i === 0) ? "Next:" : `Loadout ${i}:`;
            }
            else if (j <= corrCount) {
                cell.textContent = ((i === 0) ? _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[j] : _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.corruptionLoadouts[i][j]).toString();
                cell.style.textAlign = "center";
            }
        }
        if (i === 0)
            continue;
        let cell = row.insertCell();
        let btn = document.createElement("button");
        btn.className = "corrSave";
        btn.textContent = "Save";
        btn.onclick = () => corruptionLoadoutSaveLoad(true, i);
        cell.appendChild(btn);
        cell = row.insertCell();
        btn = document.createElement("button");
        btn.className = "corrLoad";
        btn.textContent = "Load";
        btn.onclick = () => corruptionLoadoutSaveLoad(false, i);
        cell.appendChild(btn);
    }
};
const corruptionLoadoutTableUpdate = (updateRow = 0) => {
    const row = (0,_Utility__WEBPACK_IMPORTED_MODULE_3__.getElementById)("corruptionLoadoutTable").rows[updateRow + 1].cells;
    for (let i = 0; i < row.length; i++) {
        if (i === 0 || i > 9)
            continue;
        row[i].textContent = ((updateRow === 0) ? _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[i] : _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.corruptionLoadouts[updateRow][i]).toString();
    }
};
const corruptionLoadoutSaveLoad = (save = true, loadout = 1) => {
    if (save) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.corruptionLoadouts[loadout] = Array.from(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions);
        corruptionLoadoutTableUpdate(loadout);
    }
    else {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions = Array.from(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.corruptionLoadouts[loadout]);
        corruptionLoadoutTableUpdate();
    }
};
const corruptionCleanseConfirm = () => {
    const corrupt = document.getElementById('corruptionCleanseConfirm');
    corrupt.style.visibility = 'visible';
    setTimeout(() => corrupt.style.visibility = 'hidden', 10000);
};


/***/ }),
/* 28 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resetHistoryClearAll": () => /* binding */ resetHistoryClearAll,
/* harmony export */   "resetHistoryRenderAllTables": () => /* binding */ resetHistoryRenderAllTables,
/* harmony export */   "resetHistoryTogglePerSecond": () => /* binding */ resetHistoryTogglePerSecond
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _Utility__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _Ants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(25);
/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12);





const formatPlain = (str) => (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(str);
const formatDecimalString = (str) => (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(new break_infinity_js__WEBPACK_IMPORTED_MODULE_1__.default(str));
const conditionalFormatPerSecond = (numOrStr, data) => {
    if (typeof (numOrStr) === "number" && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.historyShowPerSecond) {
        if (numOrStr === 0) {
            return "0.000/s";
        }
        return (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(numOrStr / ((data.seconds && data.seconds > 0) ? data.seconds : 1), 3, true) + "/s";
    }
    return (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(numOrStr);
};
const historyGains = {
    offerings: {
        img: "Pictures/Offering.png",
        formatter: formatPlain,
        imgTitle: "Offerings"
    },
    obtainium: {
        img: "Pictures/Obtainium.png",
        formatter: formatPlain,
        imgTitle: "Obtainium"
    },
    antMulti: {
        img: "Pictures/AntSacrifice.png",
        formatter: formatPlain,
        imgTitle: "Ant Multiplier gains"
    },
    particles: {
        img: "Pictures/Particle.png",
        formatter: (s) => extractStringExponent(formatDecimalString(s)),
        imgTitle: "Particles"
    },
    diamonds: {
        img: "Pictures/Diamond.png",
        formatter: (s) => extractStringExponent(formatDecimalString(s)),
        imgTitle: "Diamonds"
    },
    mythos: {
        img: "Pictures/Mythos.png",
        formatter: (s) => extractStringExponent(formatDecimalString(s)),
        imgTitle: "Mythos"
    },
    wowTesseracts: {
        img: "Pictures/WowTessaract.png",
        formatter: conditionalFormatPerSecond,
        imgTitle: "Wow! Tesseracts"
    },
    wowHypercubes: {
        img: "Pictures/WowHypercube.png",
        formatter: conditionalFormatPerSecond,
        imgTitle: "Wow! Hypercubes",
        onlyif: () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[13] > 0
    },
    wowCubes: {
        img: "Pictures/WowCube.png",
        formatter: conditionalFormatPerSecond,
        imgTitle: "Wow! Cubes"
    },
    wowPlatonicCubes: {
        img: "Pictures/Platonic Cube.png",
        formatter: conditionalFormatPerSecond,
        imgTitle: "Platonic Cubes",
        onlyif: () => _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[14] > 0,
    },
};
const historyGainsOrder = [
    "offerings", "obtainium",
    "antMulti",
    "particles", "diamonds", "mythos",
    "wowCubes", "wowTesseracts", "wowHypercubes", "wowPlatonicCubes",
];
const historyKinds = {
    "antsacrifice": { img: "Pictures/AntSacrifice.png" },
    "prestige": { img: "Pictures/Transparent Pics/Prestige.png" },
    "transcend": { img: "Pictures/Transparent Pics/Transcend.png" },
    "reincarnate": { img: "Pictures/Transparent Pics/Reincarnate.png" },
    "ascend": { img: "Pictures/questionable.png" },
};
const resetHistoryTableMapping = {
    "ants": "historyAntsTable",
    "reset": "historyResetTable",
    "ascend": "historyAscendTable",
};
const resetHistoryCorruptionImages = [
    "Pictures/Divisiveness Level 7.png",
    "Pictures/Maladaption Lvl 7.png",
    "Pictures/Laziness Lvl 7.png",
    "Pictures/Hyperchallenged Lvl 7.png",
    "Pictures/Scientific Illiteracy Lvl 7.png",
    "Pictures/Deflation Lvl 7.png",
    "Pictures/Extinction Lvl 7.png",
    "Pictures/Drought Lvl 7.png",
    "Pictures/Financial Collapse Lvl 7.png"
];
const resetHistoryCorruptionTitles = [
    "Divisiveness [Multipliers]",
    "Maladaption [Accelerators]",
    "Spacial Dilation [Time]",
    "Hyperchallenged [Challenge Requirements]",
    "Scientific Illiteracy [Obtainium]",
    "Market Deflation [Diamonds]",
    "Extinction [Ants]",
    "Drought [Offering EXP]",
    "Financial Recession [Coins]"
];
const extractStringExponent = (str) => {
    let m = null;
    return (m = str.match(/e\+?(.+)/)) !== null ? `e${m[1]}` : str;
};
const resetHistoryAdd = (category, kind, data) => {
    data.date = Date.now();
    data.kind = kind;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history[category] === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history[category] = [];
    }
    while (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history[category].length > (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.historyCountMax - 1)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history[category].shift();
    }
    for (const k in data) {
        if ((0,_Utility__WEBPACK_IMPORTED_MODULE_2__.isDecimal)(data[k])) {
            data[k] = data[k].toString();
        }
    }
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history[category].push(data);
    resetHistoryPushNewRow(category, data);
};
_Events__WEBPACK_IMPORTED_MODULE_4__.Synergism.on('historyAdd', resetHistoryAdd);
const resetHistoryPushNewRow = (category, data) => {
    const row = resetHistoryRenderRow(category, data);
    const table = document.getElementById(resetHistoryTableMapping[category]);
    const tbody = table.querySelector("tbody");
    tbody.insertBefore(row, tbody.childNodes[0]);
    while (tbody.childNodes.length > _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.historyCountMax) {
        tbody.removeChild(tbody.lastChild);
    }
};
const resetHistoryRenderRow = (_category, data) => {
    let colsUsed = 1;
    const row = document.createElement("tr");
    let rowContentHtml = "";
    const kindMeta = historyKinds[data.kind];
    const localDate = new Date(data.date).toLocaleString();
    rowContentHtml += `<td class="history-seconds" title="${localDate}"><img src="${kindMeta.img}">${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.formatTimeShort)(data.seconds, 60)}</td>`;
    const gains = [];
    for (let gainIdx = 0; gainIdx < historyGainsOrder.length; ++gainIdx) {
        const showing = historyGainsOrder[gainIdx];
        if (data.hasOwnProperty(showing)) {
            const gainInfo = historyGains[showing];
            if (gainInfo.onlyif && !gainInfo.onlyif(data)) {
                continue;
            }
            const formatter = gainInfo.formatter || (() => { });
            const str = `<img src="${gainInfo.img}" title="${gainInfo.imgTitle || ''}">${formatter(data[showing], data)}`;
            gains.push(str);
        }
    }
    const extra = [];
    if (data.kind === "antsacrifice") {
        const oldMulti = (0,_Ants__WEBPACK_IMPORTED_MODULE_3__.antSacrificePointsToMultiplier)(data.antSacrificePointsBefore);
        const newMulti = (0,_Ants__WEBPACK_IMPORTED_MODULE_3__.antSacrificePointsToMultiplier)(data.antSacrificePointsAfter);
        const diff = newMulti - oldMulti;
        extra.push(`<span title="Ant Multiplier: ${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(oldMulti, 3, false)}--&gt;${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(newMulti, 3, false)}"><img src="Pictures/Multiplier.png" alt="Ant Multiplier">+${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(diff, 3, false)}</span>`, `<span title="+${formatDecimalString(data.crumbsPerSecond)} crumbs/s"><img src="Pictures/GalacticCrumbs.png" alt="Crumbs">${extractStringExponent(formatDecimalString(data.crumbs))}</span>`, `<span title="${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(data.baseELO)} base"><img src="Pictures/Transparent Pics/ELO.png" alt="ELO">${(0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(data.effectiveELO)}</span>`);
    }
    else if (data.kind === "ascend") {
        extra.push(`<img src="Pictures/Transparent Pics/ChallengeTen.png" title="Challenge 10 completions">${data.c10Completions}`);
        const corruptions = resetHistoryFormatCorruptions(data);
        if (corruptions !== null) {
            extra.push(corruptions[0]);
            extra.push(corruptions[1]);
        }
    }
    colsUsed += gains.length;
    rowContentHtml += gains.reduce((acc, value) => {
        return `${acc}<td class="history-gain">${value}</td>`;
    }, "");
    rowContentHtml += `<td class="history-filler" colspan="${6 - colsUsed}"></td>`;
    rowContentHtml += extra.reduce((acc, value) => {
        return `${acc}<td class="history-extra">${value}</td>`;
    }, "");
    rowContentHtml += `<td class="history-filler" colspan="${4 - extra.length}"></td>`;
    row.innerHTML = rowContentHtml;
    return row;
};
const resetHistoryRenderFullTable = (categoryToRender, targetTable) => {
    const tbody = targetTable.querySelector("tbody");
    tbody.innerHTML = "";
    if (!_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history[categoryToRender]) {
        return;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history[categoryToRender].length > 0) {
        for (let i = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history[categoryToRender].length - 1; i >= 0; --i) {
            const row = resetHistoryRenderRow(categoryToRender, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history[categoryToRender][i]);
            tbody.appendChild(row);
        }
    }
};
const resetHistoryClearAll = () => {
    Object.keys(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history).forEach(key => {
        if (Array.isArray(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history[key])) {
            delete _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history[key];
        }
    });
    resetHistoryRenderAllTables();
};
const resetHistoryRenderAllTables = () => {
    Object.keys(resetHistoryTableMapping).forEach(key => resetHistoryRenderFullTable(key, document.getElementById(resetHistoryTableMapping[key])));
};
const resetHistoryTogglePerSecond = () => {
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.historyShowPerSecond = !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.historyShowPerSecond;
    resetHistoryRenderAllTables();
    const button = document.getElementById("historyTogglePerSecondButton");
    button.textContent = "Per second: " + (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.historyShowPerSecond ? "ON" : "OFF");
    button.style.borderColor = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.historyShowPerSecond ? "green" : "red";
};
const resetHistoryFormatCorruptions = (data) => {
    let score = "Score: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(data.corruptionScore, 0, true);
    let corruptions = "";
    for (let i = 0; i < resetHistoryCorruptionImages.length; ++i) {
        const corruptionIdx = i + 1;
        if (corruptionIdx in data.usedCorruptions && data.usedCorruptions[corruptionIdx] !== 0) {
            corruptions += ` <img src="${resetHistoryCorruptionImages[i]}" title="${resetHistoryCorruptionTitles[i]}">${data.usedCorruptions[corruptionIdx]}`;
        }
    }
    if (data.currentChallenge !== undefined) {
        score += ` / C${data.currentChallenge}`;
    }
    return [score, corruptions];
};


/***/ }),
/* 29 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "openPlatonic": () => /* binding */ openPlatonic,
/* harmony export */   "calculatePlatonicBlessings": () => /* binding */ calculatePlatonicBlessings
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12);



const openPlatonic = (value, max = false) => {
    const toSpend = max
        ? _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowPlatonicCubes
        : Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowPlatonicCubes, value);
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowPlatonicCubes -= toSpend;
    let toSpendModulo = toSpend % 40000;
    const toSpendDiv40000 = Math.floor(toSpend / 40000);
    const blessings = {
        cubes: { weight: 13200, pdf: (x) => 0 <= x && x <= 33.000 },
        tesseracts: { weight: 13200, pdf: (x) => 33.000 < x && x <= 66.000 },
        hypercubes: { weight: 13200, pdf: (x) => 66.000 < x && x <= 99.000 },
        platonics: { weight: 396, pdf: (x) => 99.000 < x && x <= 99.990 },
        hypercubeBonus: { weight: 1, pdf: (x) => 99.990 < x && x <= 99.9925 },
        taxes: { weight: 1, pdf: (x) => 99.9925 < x && x <= 99.995 },
        scoreBonus: { weight: 1, pdf: (x) => 99.995 < x && x <= 99.9975 },
        globalSpeed: { weight: 1, pdf: (x) => 99.9975 < x && x <= 100 },
    };
    for (const key in _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings[key] += blessings[key].weight * toSpendDiv40000;
    }
    const RNGesus = ['hypercubeBonus', 'taxes', 'scoreBonus', 'globalSpeed'];
    for (let i = 0; i < RNGesus.length; i++) {
        const num = Math.random();
        if (toSpendModulo / 40000 >= num && toSpendModulo !== 0) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings[RNGesus[i]] += 1;
            toSpendModulo -= 1;
        }
    }
    const gainValues = [Math.floor(33 * toSpendModulo / 100), Math.floor(33 * toSpendModulo / 100), Math.floor(33 * toSpendModulo / 100), Math.floor(396 * toSpendModulo / 40000)];
    const commonDrops = ['cubes', 'tesseracts', 'hypercubes', 'platonics'];
    for (let i = 0; i < commonDrops.length; i++) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings[commonDrops[i]] += gainValues[i];
        toSpendModulo -= gainValues[i];
    }
    for (let i = 0; i < toSpendModulo; i++) {
        const num = 100 * Math.random();
        for (const key in _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings) {
            if (blessings[key].pdf(num))
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings[key] += 1;
        }
    }
    calculatePlatonicBlessings();
    _Events__WEBPACK_IMPORTED_MODULE_2__.Synergism.emit('openPlatonic', toSpend);
};
const calculatePlatonicBlessings = () => {
    const platonicArray = [_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings.cubes, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings.tesseracts, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings.hypercubes, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings.platonics, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings.hypercubeBonus, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings.taxes, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings.scoreBonus, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings.globalSpeed];
    const DRThreshold = [4e6, 4e6, 4e6, 8e4, 1e4, 1e4, 1e4, 1e4];
    for (let i = 0; i < platonicArray.length; i++) {
        let power = 1;
        let mult = 1;
        if (platonicArray[i] >= DRThreshold[i]) {
            power = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.platonicDRPower[i];
            mult *= Math.pow(DRThreshold[i], (1 - _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.platonicDRPower[i]));
        }
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.platonicBonusMultiplier[i] = 1 + mult * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.platonicCubeBase[i] * Math.pow(platonicArray[i], power);
    }
};


/***/ }),
/* 30 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculatetax": () => /* binding */ calculatetax
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _Utility__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);
/* harmony import */ var _Challenges__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11);






const calculatetax = () => {
    let c = 0;
    let e = 1;
    let f = 1;
    let compareC = 0;
    _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceFirst = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstGeneratedCoin.add(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstOwnedCoin)).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.globalCoinMultiplier).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.coinOneMulti).times(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.firstProduceCoin);
    _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceSecond = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondGeneratedCoin.add(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondOwnedCoin)).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.globalCoinMultiplier).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.coinTwoMulti).times(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.secondProduceCoin);
    _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceThird = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdGeneratedCoin.add(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdOwnedCoin)).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.globalCoinMultiplier).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.coinThreeMulti).times(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.thirdProduceCoin);
    _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceFourth = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthGeneratedCoin.add(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthOwnedCoin)).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.globalCoinMultiplier).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.coinFourMulti).times(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fourthProduceCoin);
    _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceFifth = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthGeneratedCoin.add(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthOwnedCoin)).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.globalCoinMultiplier).times(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.coinFiveMulti).times(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.fifthProduceCoin);
    _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceTotal = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceFirst.add(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceSecond).add(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceThird).add(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceFourth).add(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceFifth);
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceFirst.lte(.0001)) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceFirst = new break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default(0);
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceSecond.lte(.0001)) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceSecond = new break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default(0);
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceThird.lte(.0001)) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceThird = new break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default(0);
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceFourth.lte(.0001)) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceFourth = new break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default(0);
    }
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceFifth.lte(.0001)) {
        _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceFifth = new break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default(0);
    }
    _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.producePerSecond = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceTotal.times(40);
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation === 6) {
        e = 3 * Math.pow((1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[6] / 25), 2);
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.reincarnation === 9) {
        e = 0.005;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 15) {
        e = 0.000005;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 13) {
        e *= 700 * (1 + 1 / 6 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[13]);
        e *= Math.pow(1.05, Math.max(0, (0,_Utility__WEBPACK_IMPORTED_MODULE_2__.sumContents)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions) - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[11] - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[12] - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[13] - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[14] - _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[15] - 3 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[49]));
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[6] > 0) {
        f /= 1.075;
    }
    let exponent = 1;
    exponent *= e;
    exponent *= (1 - 1 / 20 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[51] - 1 / 40 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[52] - 1 / 80 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[53] - 1 / 160 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[54] - 1 / 320 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[55]);
    exponent *= (1 - 0.05 / 1800 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[45] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[46] + 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[47]) * Math.min(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prestigecounter, 1800));
    exponent *= Math.pow(0.965, (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('reincarnation', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[6]));
    exponent *= (0.001 + .999 * (Math.pow(6, -(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.rune2level * _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.effectiveLevelMult) / 1000)));
    exponent *= (0.01 + .99 * (Math.pow(4, Math.min(0, (400 - _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.rune4level) / 1100))));
    exponent *= (1 - 0.04 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[82] - 0.04 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[89] - 0.04 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[96] - 0.04 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[103] - 0.04 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[110] - 0.0566 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[117] - 0.0566 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[124] - 0.0566 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[131]);
    exponent *= f;
    exponent *= Math.pow(0.9925, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[118] * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[6] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[7] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[8] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[9] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[10]));
    exponent *= (0.005 + 0.995 * Math.pow(0.99, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antUpgrades[3 - 1] + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.bonusant3));
    exponent *= 1 / Math.pow((1 + break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default.log(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards.add(1), 10)), 1 + .2 / 60 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[10] * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[125] + 0.1 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[5] + 0.2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[10] + 0.5 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[15] + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.platonicBonusMultiplier[5] - 1));
    exponent *= (1 - 0.10 * (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.talismanRarity[1 - 1] - 1));
    exponent *= Math.pow(0.98, 3 / 5 * Math.log(1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.rareFragments) / Math.log(10) * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[159]);
    exponent *= Math.pow(0.966, (0,_Challenges__WEBPACK_IMPORTED_MODULE_4__.CalcECC)('ascension', _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[13]));
    exponent *= (1 - 0.666 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[200] / 100000);
    exponent *= (1 - 0.666 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[50] / 100000);
    exponent *= _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.challenge15Rewards.taxes;
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[121] > 0) {
        exponent *= 0.5;
    }
    _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.maxexponent = Math.floor(275 / (break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default.log(1.01, 10) * exponent)) - 1;
    const a2 = Math.min(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.maxexponent, Math.floor(break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default.log(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.produceTotal.add(1), 10)));
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 13 && _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.maxexponent <= 99999 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[249] < 1) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_5__.achievementaward)(249);
    }
    if (a2 >= 1) {
        c = Math.pow(a2, 2) / 550;
    }
    compareC = Math.pow(_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.maxexponent, 2) / 550;
    _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.taxdivisor = break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default.pow(1.01, (c) * (exponent));
    _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.taxdivisorcheck = break_infinity_js__WEBPACK_IMPORTED_MODULE_3__.default.pow(1.01, (compareC) * (exponent));
};


/***/ }),
/* 31 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "checkVariablesOnLoad": () => /* binding */ checkVariablesOnLoad
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var break_infinity_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);
/* harmony import */ var _Research__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22);
/* harmony import */ var _Statistics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(26);





const checkVariablesOnLoad = (data) => {
    if (data.wowCubes === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowCubes = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowTesseracts = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowHypercubes = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades = [null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    if (data.shoptoggles.reincarnate === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shoptoggles.reincarnate = true;
    }
    if (data.ascendBuilding1 === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendBuilding1 = {
            cost: 1,
            owned: 0,
            generated: new break_infinity_js__WEBPACK_IMPORTED_MODULE_1__.default("0"),
            multiplier: 0.01
        };
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendBuilding2 = {
            cost: 10,
            owned: 0,
            generated: new break_infinity_js__WEBPACK_IMPORTED_MODULE_1__.default("0"),
            multiplier: 0.01
        };
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendBuilding3 = {
            cost: 100,
            owned: 0,
            generated: new break_infinity_js__WEBPACK_IMPORTED_MODULE_1__.default("0"),
            multiplier: 0.01
        };
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendBuilding4 = {
            cost: 1000,
            owned: 0,
            generated: new break_infinity_js__WEBPACK_IMPORTED_MODULE_1__.default("0"),
            multiplier: 0.01
        };
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendBuilding5 = {
            cost: 10000,
            owned: 0,
            generated: new break_infinity_js__WEBPACK_IMPORTED_MODULE_1__.default("0"),
            multiplier: 0.01
        };
    }
    if (data.tesseractbuyamount === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractbuyamount = 1;
    }
    if (data.tesseractBlessings === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractBlessings = {
            accelerator: 0,
            multiplier: 0,
            offering: 0,
            runeExp: 0,
            obtainium: 0,
            antSpeed: 0,
            antSacrifice: 0,
            antELO: 0,
            talismanBonus: 0,
            globalSpeed: 0
        };
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeBlessings = {
            accelerator: 0,
            multiplier: 0,
            offering: 0,
            runeExp: 0,
            obtainium: 0,
            antSpeed: 0,
            antSacrifice: 0,
            antELO: 0,
            talismanBonus: 0,
            globalSpeed: 0
        };
    }
    if (data.prototypeCorruptions === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    if (data.constantUpgrades === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascendShards = new break_infinity_js__WEBPACK_IMPORTED_MODULE_1__.default("0");
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.constantUpgrades = [null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    if (data.roombaResearchIndex === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.roombaResearchIndex = 0;
    }
    if (data.history === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.history = {};
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubesThisAscension = {
            "challenges": 0,
            "reincarnation": 0,
            "ascension": 0,
            "maxCubesPerSec": 0,
            "maxAllTime": 0,
            "cpsOnC10Comp": 0,
            "tesseracts": 0,
            "hypercubes": 0
        };
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.historyCountMax = 10;
    }
    if (data.autoChallengeRunning === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoChallengeRunning = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoChallengeIndex = 1;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoChallengeToggles = [false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoChallengeStartExponent = 10;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoChallengeTimer = {
            start: 10,
            exit: 2,
            enter: 2
        };
    }
    if (data.autoAscend === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoAscend = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoAscendMode = "c10Completions";
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoAscendThreshold = 1;
    }
    if (data.runeBlessingLevels === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeBlessingLevels = [0, 0, 0, 0, 0, 0];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeSpiritLevels = [0, 0, 0, 0, 0, 0];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeBlessingBuyAmount = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeSpiritBuyAmount = 0;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[180] > 1) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[180] = 1;
    }
    if (data.autoTesseracts === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.autoTesseracts = [false, false, false, false, false, false];
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[0] === null || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[0] === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.corruptionLoadouts === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.corruptionLoadouts = {
            1: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            2: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            3: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        };
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.corruptionShowStats = true;
    }
    for (let i = 0; i <= 4; i++) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[i] > (0,_Calculate__WEBPACK_IMPORTED_MODULE_2__.calculateMaxRunes)(i + 1)) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runelevels[i] = 0;
        }
    }
    if (!data.shopUpgrades || data.shopUpgrades.challengeExtension === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challengeExtension = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challenge10Tomes = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.seasonPassLevel = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cubeToQuarkBought = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.tesseractToQuarkBought = false;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.hypercubeToQuarkBought = false;
    }
    if (data.cubeUpgrades === undefined || data.cubeUpgrades[19] === 0 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[19] === 0) {
        for (let i = 121; i <= 125; i++) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.upgrades[i] = 0;
        }
    }
    if (data.toggles[1] !== undefined) {
        for (let i = 0; i < 50; ++i) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[i] !== undefined) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[i + 1] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[i];
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[i] = undefined;
            }
        }
    }
    if (data.ascensionCount === 0) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[31] = true;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.toggles[32] = true;
    }
    if (data.dayCheck === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.dayCheck = null;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.dayTimer = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeQuarkDaily = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractQuarkDaily = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeQuarkDaily = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeOpenedDaily = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.tesseractOpenedDaily = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.hypercubeOpenedDaily = 0;
    }
    if (data.loadedOct4Hotfix === undefined || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.loadedOct4Hotfix === false) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.loadedOct4Hotfix = true;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches.length > 200) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints += _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[200] * 1e56;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[200] = 0;
            (0,_Research__WEBPACK_IMPORTED_MODULE_3__.buyResearch)(200, true, 0.01);
            console.log('Refunded 8x25, and gave you ' + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[200]) + ' levels of new cost 8x25. Sorry!');
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints += _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[195] * 1e60;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += 250 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[195];
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[195] = 0;
            console.log('Refunded 8x20 and gave 250 quarks for each level you had prior to loading up the game.');
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowCubes += _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[50] * 5e10;
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.cubeUpgrades[50] = 0;
            console.log('Refunded w5x10. Enjoy!');
        }
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascStatToggles === undefined || data.ascStatToggles === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascStatToggles = {
            1: false,
            2: false,
            3: false,
            4: false
        };
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascStatToggles[4] === undefined || !('ascStatToggles' in data) || data.ascStatToggles[4] === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascStatToggles[4] = false;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[0] > 0 ||
        (Array.isArray(data.usedCorruptions) && data.usedCorruptions[0] > 0)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.prototypeCorruptions[0] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.usedCorruptions[0] = 0;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimerReal === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimerReal = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.antSacrificeTimer / (0,_Calculate__WEBPACK_IMPORTED_MODULE_2__.calculateTimeAcceleration)();
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.subtabNumber === undefined || data.subtabNumber === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.subtabNumber = 0;
    }
    if (data.wowPlatonicCubes === undefined) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowPlatonicCubes = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowAbyssals = 0;
    }
    if (data.platonicBlessings === undefined) {
        const ascCount = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension !== 0 && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension !== 15) {
            (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.resetCheck)('ascensionChallenge', false, true);
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 15) {
            (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.resetCheck)('ascensionChallenge', false, true);
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challenge15Exponent = 0;
            (0,_Statistics__WEBPACK_IMPORTED_MODULE_4__.c15RewardUpdate)();
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.ascensionCount = ascCount;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[15] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[15] = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicBlessings = {
            cubes: 0,
            tesseracts: 0,
            hypercubes: 0,
            platonics: 0,
            hypercubeBonus: 0,
            taxes: 0,
            scoreBonus: 0,
            globalSpeed: 0,
        };
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challenge15Exponent = 0;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.loadedNov13Vers = false;
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches.includes(null)) {
        for (let i = 0; i < 200; i++) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[i + 1] = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[i + 1] || 0;
        }
    }
    if (data.loadedDec16Vers === false || data.loadedDec16Vers === undefined) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.currentChallenge.ascension === 15) {
            (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.resetCheck)('ascensionChallenge', false, true);
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challenge15Exponent = 0;
            (0,_Statistics__WEBPACK_IMPORTED_MODULE_4__.c15RewardUpdate)();
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challenge15Exponent = 0;
        (0,_Statistics__WEBPACK_IMPORTED_MODULE_4__.c15RewardUpdate)();
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.loadedDec16Vers = true;
    }
    if (typeof data.exporttest === 'string') {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.exporttest = !_Synergism__WEBPACK_IMPORTED_MODULE_0__.isTesting;
    }
};


/***/ }),
/* 32 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "generateEventHandlers": () => /* binding */ generateEventHandlers
/* harmony export */ });
/* harmony import */ var _Toggles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _Reset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14);
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);
/* harmony import */ var _Buy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19);
/* harmony import */ var _Upgrades__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(18);
/* harmony import */ var _Automation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(21);
/* harmony import */ var _Generators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(20);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11);
/* harmony import */ var _Runes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(15);
/* harmony import */ var _Talismans__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(10);
/* harmony import */ var _Challenges__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(6);
/* harmony import */ var _Research__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(22);
/* harmony import */ var _Ants__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(25);
/* harmony import */ var _Cubes__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(17);
/* harmony import */ var _Tesseracts__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(16);
/* harmony import */ var _Hypercubes__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(23);
/* harmony import */ var _PlatonicCubes__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(29);
/* harmony import */ var _Platonic__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(33);
/* harmony import */ var _Corruptions__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(27);
/* harmony import */ var _ImportExport__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(34);
/* harmony import */ var _History__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(28);
/* harmony import */ var _Shop__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(35);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(5);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};























const generateEventHandlers = () => {
    const ordinals = ['null', 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth'];
    document.getElementById('ascCubeStats').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAscStatPerSecond)(1));
    document.getElementById('ascTessStats').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAscStatPerSecond)(2));
    document.getElementById('ascHyperStats').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAscStatPerSecond)(3));
    document.getElementById('ascPlatonicStats').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAscStatPerSecond)(4));
    document.getElementById('prestigebtn').addEventListener('mouseover', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.resetrepeat)("prestige"));
    document.getElementById('transcendbtn').addEventListener('mouseover', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.resetrepeat)("transcension"));
    document.getElementById('reincarnatebtn').addEventListener('mouseover', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.resetrepeat)("reincarnation"));
    document.getElementById('acceleratorboostbtn').addEventListener('mouseover', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.resetrepeat)("acceleratorBoost"));
    document.getElementById('challengebtn').addEventListener('mouseover', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.resetrepeat)("transcensionChallenge"));
    document.getElementById('reincarnatechallengebtn').addEventListener('mouseover', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.resetrepeat)("reincarnationChallenge"));
    document.getElementById('ascendChallengeBtn').addEventListener('mouseover', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.resetrepeat)("ascensionChallenge"));
    document.getElementById('ascendbtn').addEventListener('mouseover', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.resetrepeat)("ascension"));
    document.getElementById('prestigebtn').addEventListener('click', () => (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.resetCheck)('prestige'));
    document.getElementById('transcendbtn').addEventListener('click', () => (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.resetCheck)('transcend'));
    document.getElementById('reincarnatebtn').addEventListener('click', () => (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.resetCheck)('reincarnate'));
    document.getElementById('acceleratorboostbtn').addEventListener('click', () => (0,_Buy__WEBPACK_IMPORTED_MODULE_3__.boostAccelerator)());
    document.getElementById('challengebtn').addEventListener('click', () => (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.resetCheck)('challenge', undefined, true));
    document.getElementById('reincarnatechallengebtn').addEventListener('click', () => (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.resetCheck)('reincarnationchallenge', undefined, true));
    document.getElementById('ascendChallengeBtn').addEventListener('click', () => (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.resetCheck)('ascensionChallenge'));
    document.getElementById('ascendbtn').addEventListener('click', () => (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.resetCheck)('ascend'));
    document.getElementById('buildingstab').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleTabs)('buildings'));
    document.getElementById('upgradestab').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleTabs)('upgrades'));
    document.getElementById('settingstab').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleTabs)('settings'));
    document.getElementById('achievementstab').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleTabs)('achievements'));
    document.getElementById('runestab').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleTabs)('runes'));
    document.getElementById('challengetab').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleTabs)('challenges'));
    document.getElementById('researchtab').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleTabs)('researches'));
    document.getElementById('shoptab').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleTabs)('shop'));
    document.getElementById('anttab').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleTabs)('ants'));
    document.getElementById('cubetab').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleTabs)('cubes'));
    document.getElementById('traitstab').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleTabs)('traits'));
    const buildingTypes = ['Coin', 'Diamond', 'Mythos', 'Particle', 'Tesseract'];
    for (let index = 0; index < buildingTypes.length; index++) {
        document.getElementById(`switchTo${buildingTypes[index]}Building`).addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleSubTab)(1, index));
    }
    const buildingTypesAlternate = ['coin', 'crystal', 'mythos', 'particle', 'tesseract', 'offering'];
    const buildingOrds = ['one', 'ten', 'hundred', 'thousand'];
    const buildingOrdsToNum = [1, 10, 100, 1000];
    for (let index = 0; index < buildingOrds.length; index++) {
        for (let index2 = 0; index2 < buildingTypesAlternate.length; index2++) {
            document.getElementById(buildingTypesAlternate[index2] + buildingOrds[index]).addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleBuyAmount)(buildingOrdsToNum[index], buildingTypesAlternate[index2]));
        }
    }
    document.getElementById('buyaccelerator').addEventListener('click', () => (0,_Buy__WEBPACK_IMPORTED_MODULE_3__.buyAccelerator)());
    document.getElementById('buymultiplier').addEventListener('click', () => (0,_Buy__WEBPACK_IMPORTED_MODULE_3__.buyMultiplier)());
    document.getElementById('buyacceleratorboost').addEventListener('click', () => (0,_Buy__WEBPACK_IMPORTED_MODULE_3__.boostAccelerator)());
    const buildingTypesAlternate2 = ['coin', 'diamond', 'mythos'];
    const buildingTypesAlternate3 = ['Coin', 'Diamonds', 'Mythos'];
    for (let index = 0; index < 3; index++) {
        for (let index2 = 1; index2 <= 5; index2++) {
            document.getElementById(`buy${buildingTypesAlternate2[index]}${index2}`).addEventListener('click', () => (0,_Buy__WEBPACK_IMPORTED_MODULE_3__.buyProducer)(ordinals[index2], buildingTypesAlternate3[index], index === 0 ? index2 : index2 * (index2 + 1) / 2));
        }
    }
    for (let index = 1; index <= 5; index++) {
        document.getElementById(`buycrystalupgrade${index}`).addEventListener('mouseover', () => (0,_Upgrades__WEBPACK_IMPORTED_MODULE_4__.crystalupgradedescriptions)(index));
        document.getElementById(`buycrystalupgrade${index}`).addEventListener('click', () => (0,_Buy__WEBPACK_IMPORTED_MODULE_3__.buyCrystalUpgrades)(index));
    }
    const particleBuildingCosts = [1, 100, 1e4, 1e8, 1e16];
    for (let index = 0; index < 5; index++) {
        document.getElementById(`buyparticles${index + 1}`).addEventListener('click', () => (0,_Buy__WEBPACK_IMPORTED_MODULE_3__.buyParticleBuilding)(ordinals[index + 1], particleBuildingCosts[index]));
    }
    const tesseractBuildingCosts = [1, 10, 100, 1000, 10000];
    for (let index = 0; index < 5; index++) {
        document.getElementById(`buyTesseracts${index + 1}`).addEventListener('click', () => (0,_Buy__WEBPACK_IMPORTED_MODULE_3__.buyTesseractBuilding)(tesseractBuildingCosts[index], index + 1));
        document.getElementById(`tesseractAutoToggle${index + 1}`).addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAutoTesseracts)(index + 1));
    }
    for (let index = 0; index < 10; index++) {
        document.getElementById(`buyConstantUpgrade${index + 1}`).addEventListener('mouseover', () => (0,_Upgrades__WEBPACK_IMPORTED_MODULE_4__.constantUpgradeDescriptions)(index + 1));
        document.getElementById(`buyConstantUpgrade${index + 1}`).addEventListener('click', () => (0,_Upgrades__WEBPACK_IMPORTED_MODULE_4__.buyConstantUpgrades)(index + 1));
    }
    for (let index = 0; index < 32; index++) {
        document.getElementById(`toggle${index + 1}`).addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleSettings)(index));
    }
    document.getElementById("prestigeautotoggle").addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleautoreset)(1));
    document.getElementById("transcendautotoggle").addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleautoreset)(2));
    document.getElementById("reincarnateautotoggle").addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleautoreset)(3));
    document.getElementById("ascensionAutoToggle").addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleautoreset)(4));
    document.getElementById("prestigeamount").addEventListener('blur', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.updateAutoReset)(1));
    document.getElementById("transcendamount").addEventListener('blur', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.updateAutoReset)(2));
    document.getElementById("reincarnationamount").addEventListener('blur', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.updateAutoReset)(3));
    document.getElementById("ascensionAmount").addEventListener('blur', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.updateAutoReset)(4));
    document.getElementById("autoAntSacrificeAmount").addEventListener('blur', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.updateAutoReset)(5));
    document.getElementById("tesseractautobuytoggle").addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleautobuytesseract)());
    document.getElementById("tesseractAmount").addEventListener('blur', () => (0,_Reset__WEBPACK_IMPORTED_MODULE_1__.updateTesseractAutoBuyAmount)());
    for (let index = 1; index <= 125; index++) {
        document.getElementById(`upg${index}`).addEventListener('mouseover', () => (0,_Upgrades__WEBPACK_IMPORTED_MODULE_4__.upgradedescriptions)(index));
        console.log('Successfully added "Onmouseover" event to upgrades 1-120!');
    }
    const resourceTypes = ['coin', 'prestige', 'transcend', 'reincarnation'];
    for (let index = 1; index <= 80; index++) {
        const resourceType = resourceTypes[Math.floor((index - 1) / 20)];
        document.getElementById(`upg${index}`).addEventListener('click', () => (0,_Buy__WEBPACK_IMPORTED_MODULE_3__.buyUpgrades)(resourceType, index));
        console.log('Successfully added "Onmouseover" event to upgrades 1-120!');
    }
    for (let index = 1; index <= 20; index++) {
        document.getElementById(`upg${index + 80}`).addEventListener('click', () => (0,_Automation__WEBPACK_IMPORTED_MODULE_5__.buyAutobuyers)(index));
        console.log('Successfully added "Onclick" event to Autobuyer upgrade!');
    }
    for (let index = 1; index <= 20; index++) {
        document.getElementById(`upg${index + 100}`).addEventListener('click', () => (0,_Generators__WEBPACK_IMPORTED_MODULE_6__.buyGenerator)(index));
        console.log('Successfully added "Onclick" event to Generator upgrade!');
    }
    for (let index = 1; index <= 5; index++) {
        document.getElementById(`upg${index + 120}`).addEventListener('click', () => (0,_Buy__WEBPACK_IMPORTED_MODULE_3__.buyUpgrades)('coin', index));
        console.log('Successfully added "Onclick" event to Generator upgrade!');
    }
    document.getElementById('shoptogglecoin').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleShops)(1));
    document.getElementById('shoptoggleprestige').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleShops)(2));
    document.getElementById('shoptoggletranscend').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleShops)(3));
    document.getElementById('shoptogglegenerator').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleShops)(4));
    document.getElementById('particleAutoUpgrade').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleShops)(5));
    for (let index = 1; index <= 252; index++) {
        document.getElementById(`ach${index}`).addEventListener('mouseover', () => (0,_Achievements__WEBPACK_IMPORTED_MODULE_7__.achievementdescriptions)(index));
    }
    document.getElementById('toggleautosacrifice').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAutoSacrifice)(0));
    for (let index = 0; index < 4; index++) {
        document.getElementById(`toggleRuneSubTab${index + 1}`).addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleSubTab)(4, index));
    }
    for (let index = 0; index < 5; index++) {
        document.getElementById(`rune${index + 1}`).addEventListener('mouseover', () => (0,_Runes__WEBPACK_IMPORTED_MODULE_8__.displayRuneInformation)(index + 1));
        document.getElementById(`rune${index + 1}`).addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAutoSacrifice)(index + 1));
        document.getElementById(`activaterune${index + 1}`).addEventListener('mouseover', () => (0,_Runes__WEBPACK_IMPORTED_MODULE_8__.displayRuneInformation)(index + 1));
        document.getElementById(`activaterune${index + 1}`).addEventListener('click', () => (0,_Runes__WEBPACK_IMPORTED_MODULE_8__.redeemShards)(index + 1));
    }
    const talismanBuyPercents = [10, 25, 50, 100];
    const talismanBuyPercentsOrd = ['Ten', 'TwentyFive', 'Fifty', 'Hundred'];
    for (let index = 0; index < talismanBuyPercents.length; index++) {
        document.getElementById(`talisman${talismanBuyPercentsOrd[index]}`).addEventListener('click', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.toggleTalismanBuy)(index));
    }
    document.getElementById('toggleautoenhance').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleautoenhance)());
    document.getElementById('toggleautofortify').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleautofortify)());
    const talismanItemNames = ['shard', 'commonFragment', 'uncommonFragment', 'rareFragment', 'epicFragment', 'legendaryFragment', 'mythicalFragment'];
    for (let index = 0; index < talismanItemNames.length; index++) {
        document.getElementById(`buyTalismanItem${index + 1}`).addEventListener('mouseover', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.updateTalismanCostDisplay)(talismanItemNames[index]));
        document.getElementById(`buyTalismanItem${index + 1}`).addEventListener('click', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.buyTalismanResources)(talismanItemNames[index]));
    }
    for (let index = 0; index < 7; index++) {
        document.getElementById(`talisman${index + 1}`).addEventListener('click', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.showTalismanEffect)(index + 1));
        document.getElementById(`leveluptalisman${index + 1}`).addEventListener('mouseover', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.showTalismanPrices)(index + 1));
        document.getElementById(`leveluptalisman${index + 1}`).addEventListener('click', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.buyTalismanLevels)(index + 1));
        document.getElementById(`enhancetalisman${index + 1}`).addEventListener('mouseover', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.showEnhanceTalismanPrices)(index + 1));
        document.getElementById(`enhancetalisman${index + 1}`).addEventListener('click', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.buyTalismanEnhance)(index + 1));
        document.getElementById(`respectalisman${index + 1}`).addEventListener('click', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.showRespecInformation)(index + 1));
    }
    document.getElementById('respecAllTalismans').addEventListener('click', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.showRespecInformation)(8));
    document.getElementById('confirmTalismanRespec').addEventListener('click', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.respecTalismanConfirm)(_Variables__WEBPACK_IMPORTED_MODULE_22__.Globals.talismanRespec));
    document.getElementById('cancelTalismanRespec').addEventListener('click', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.respecTalismanCancel)(_Variables__WEBPACK_IMPORTED_MODULE_22__.Globals.talismanRespec));
    for (let index = 0; index < 5; index++) {
        document.getElementById(`talismanRespecButton${index + 1}`).addEventListener('click', () => (0,_Talismans__WEBPACK_IMPORTED_MODULE_9__.changeTalismanModifier)(index + 1));
    }
    for (let index = 0; index < 5; index++) {
        document.getElementById(`runeBlessingPower${index + 1}`).addEventListener('click', () => (0,_Buy__WEBPACK_IMPORTED_MODULE_3__.buyRuneBonusLevels)('Blessings', index + 1));
        document.getElementById(`runeSpiritPower${index + 1}`).addEventListener('click', () => (0,_Buy__WEBPACK_IMPORTED_MODULE_3__.buyRuneBonusLevels)('Spirits', index + 1));
    }
    document.getElementById('buyRuneBlessingInput').addEventListener('blur', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.updateRuneBlessingBuyAmount)(1));
    document.getElementById('buyRuneSpiritInput').addEventListener('blur', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.updateRuneBlessingBuyAmount)(2));
    for (let index = 0; index < 15; index++) {
        document.getElementById(`challenge${index + 1}`).addEventListener('click', () => (0,_Challenges__WEBPACK_IMPORTED_MODULE_10__.challengeDisplay)(index + 1));
    }
    document.getElementById('startChallenge').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleChallenges)(_Variables__WEBPACK_IMPORTED_MODULE_22__.Globals.triggerChallenge, false));
    document.getElementById('retryChallenge').addEventListener('click', () => (0,_Challenges__WEBPACK_IMPORTED_MODULE_10__.toggleRetryChallenges)());
    document.getElementById('toggleAutoChallengeIgnore').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAutoChallengesIgnore)(_Variables__WEBPACK_IMPORTED_MODULE_22__.Globals.triggerChallenge));
    document.getElementById('toggleAutoChallengeStart').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAutoChallengeRun)());
    document.getElementById('startAutoChallengeTimerInput').addEventListener('blur', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.updateAutoChallenge)(1));
    document.getElementById('exitAutoChallengeTimerInput').addEventListener('blur', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.updateAutoChallenge)(2));
    document.getElementById('enterAutoChallengeTimerInput').addEventListener('blur', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.updateAutoChallenge)(3));
    for (let index = 1; index < 200; index++) {
        document.getElementById(`res${index}`).addEventListener('click', () => (0,_Research__WEBPACK_IMPORTED_MODULE_11__.buyResearch)(index));
        document.getElementById(`res${index}`).addEventListener('mouseover', () => (0,_Research__WEBPACK_IMPORTED_MODULE_11__.researchDescriptions)(index));
        console.log('Successfully added "Onmouseover" and "Onclick" events to researches 1-199!');
    }
    document.getElementById(`res200`).addEventListener('click', () => (0,_Research__WEBPACK_IMPORTED_MODULE_11__.buyResearch)(200, false, 0.01));
    document.getElementById(`res200`).addEventListener('mouseover', () => (0,_Research__WEBPACK_IMPORTED_MODULE_11__.researchDescriptions)(200, false, 0.01));
    console.log('Successfully added "Onmouseover" and "Onclick" events to research 200!');
    document.getElementById('toggleresearchbuy').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleResearchBuy)());
    document.getElementById('toggleautoresearch').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAutoResearch)());
    const antProducerCostVals = ['null', '1e800', '3', '100', '10000', '1e12', '1e36', '1e100', '1e300'];
    for (let index = 1; index <= 8; index++) {
        document.getElementById(`anttier${index}`).addEventListener('mouseover', () => (0,_Ants__WEBPACK_IMPORTED_MODULE_12__.updateAntDescription)(index));
        document.getElementById(`anttier${index}`).addEventListener('mouseover', () => (0,_Ants__WEBPACK_IMPORTED_MODULE_12__.antRepeat)(index));
        document.getElementById(`anttier${index}`).addEventListener('click', () => (0,_Ants__WEBPACK_IMPORTED_MODULE_12__.buyAntProducers)(ordinals[index], 'Ants', antProducerCostVals[index], index));
    }
    const antUpgradeCostVals = ['null', '100', '100', '1000', '1000', '1e5', '1e6', '1e8', '1e11', '1e15', '1e20', '1e40', '1e100'];
    for (let index = 1; index <= 12; index++) {
        document.getElementById(`antUpgrade${index}`).addEventListener('mouseover', () => (0,_Ants__WEBPACK_IMPORTED_MODULE_12__.antUpgradeDescription)(index));
        document.getElementById(`antUpgrade${index}`).addEventListener('click', () => (0,_Ants__WEBPACK_IMPORTED_MODULE_12__.buyAntUpgrade)(antUpgradeCostVals[index], false, index));
    }
    document.getElementById('antSacrifice').addEventListener('click', () => (0,_Ants__WEBPACK_IMPORTED_MODULE_12__.sacrificeAnts)());
    document.getElementById('toggleAntMax').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAntMaxBuy)());
    document.getElementById('toggleAutoSacrificeAnt').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAntAutoSacrifice)(0));
    document.getElementById('autoSacrificeAntMode').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAntAutoSacrifice)(1));
    for (let index = 0; index < 6; index++) {
        document.getElementById(`switchCubeSubTab${index + 1}`).addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleSubTab)(8, index));
    }
    for (let index = 0; index < 49; index++) {
        document.getElementById(`cubeUpg${index + 1}`).addEventListener('mouseover', () => (0,_Cubes__WEBPACK_IMPORTED_MODULE_13__.cubeUpgradeDesc)(index + 1));
        document.getElementById(`cubeUpg${index + 1}`).addEventListener('click', () => (0,_Cubes__WEBPACK_IMPORTED_MODULE_13__.buyCubeUpgrades)(index + 1));
    }
    document.getElementById('cubeUpg50').addEventListener('mouseover', () => (0,_Cubes__WEBPACK_IMPORTED_MODULE_13__.cubeUpgradeDesc)(50, 0.01));
    document.getElementById('cubeUpg50').addEventListener('click', () => (0,_Cubes__WEBPACK_IMPORTED_MODULE_13__.buyCubeUpgrades)(50, 0.01));
    document.getElementById('toggleCubeBuy').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleMaxBuyCube)());
    document.getElementById('open1Cube').addEventListener('click', () => (0,_Cubes__WEBPACK_IMPORTED_MODULE_13__.openCube)(1, false));
    document.getElementById('open20Cube').addEventListener('click', () => (0,_Cubes__WEBPACK_IMPORTED_MODULE_13__.openCube)(20, false));
    document.getElementById('open1000Cube').addEventListener('click', () => (0,_Cubes__WEBPACK_IMPORTED_MODULE_13__.openCube)(1000, false));
    document.getElementById('openMostCube').addEventListener('click', () => (0,_Cubes__WEBPACK_IMPORTED_MODULE_13__.openCube)(1, true));
    document.getElementById('open1Tesseract').addEventListener('click', () => (0,_Tesseracts__WEBPACK_IMPORTED_MODULE_14__.openTesseract)(1, false));
    document.getElementById('open20Tesseract').addEventListener('click', () => (0,_Tesseracts__WEBPACK_IMPORTED_MODULE_14__.openTesseract)(20, false));
    document.getElementById('open1000Tesseract').addEventListener('click', () => (0,_Tesseracts__WEBPACK_IMPORTED_MODULE_14__.openTesseract)(1000, false));
    document.getElementById('openMostTesseract').addEventListener('click', () => (0,_Tesseracts__WEBPACK_IMPORTED_MODULE_14__.openTesseract)(1, true));
    document.getElementById('open1Hypercube').addEventListener('click', () => (0,_Hypercubes__WEBPACK_IMPORTED_MODULE_15__.openHypercube)(1, false));
    document.getElementById('open20Hypercube').addEventListener('click', () => (0,_Hypercubes__WEBPACK_IMPORTED_MODULE_15__.openHypercube)(20, false));
    document.getElementById('open1000Hypercube').addEventListener('click', () => (0,_Hypercubes__WEBPACK_IMPORTED_MODULE_15__.openHypercube)(1000, false));
    document.getElementById('openMostHypercube').addEventListener('click', () => (0,_Hypercubes__WEBPACK_IMPORTED_MODULE_15__.openHypercube)(1, true));
    document.getElementById('open1PlatonicCube').addEventListener('click', () => (0,_PlatonicCubes__WEBPACK_IMPORTED_MODULE_16__.openPlatonic)(1, false));
    document.getElementById('open40kPlatonicCube').addEventListener('click', () => (0,_PlatonicCubes__WEBPACK_IMPORTED_MODULE_16__.openPlatonic)(4e4, false));
    document.getElementById('open1mPlatonicCube').addEventListener('click', () => (0,_PlatonicCubes__WEBPACK_IMPORTED_MODULE_16__.openPlatonic)(1e6, false));
    document.getElementById('openMostPlatonicCube').addEventListener('click', () => (0,_PlatonicCubes__WEBPACK_IMPORTED_MODULE_16__.openPlatonic)(1, true));
    const platonicUpgrades = document.getElementsByClassName('platonicUpgradeImage');
    for (let index = 0; index < platonicUpgrades.length; index++) {
        platonicUpgrades[index].addEventListener('mouseover', () => (0,_Platonic__WEBPACK_IMPORTED_MODULE_17__.createPlatonicDescription)(index + 1));
        platonicUpgrades[index].addEventListener('click', () => (0,_Platonic__WEBPACK_IMPORTED_MODULE_17__.buyPlatonicUpgrades)(index + 1));
    }
    document.getElementById('corrStatsBtn').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleSubTab)(9, 0));
    document.getElementById('corrLoadoutsBtn').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleSubTab)(9, 1));
    document.getElementById('corruptionDisplays').addEventListener('click', () => (0,_Corruptions__WEBPACK_IMPORTED_MODULE_18__.corruptionDisplay)(10));
    document.getElementById('corruptionCleanse').addEventListener('click', () => (0,_Corruptions__WEBPACK_IMPORTED_MODULE_18__.corruptionCleanseConfirm)());
    document.getElementById('corruptionCleanseConfirm').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleCorruptionLevel)(10, 999));
    document.getElementById('ascensionAutoEnable').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleAutoAscend)());
    for (let index = 0; index < 5; index++) {
        document.getElementById(`switchSettingSubTab${index + 1}`).addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleSubTab)(-1, index));
    }
    document.getElementById('exportgame').addEventListener('click', () => (0,_ImportExport__WEBPACK_IMPORTED_MODULE_19__.exportSynergism)());
    document.getElementById('saveStringInput').addEventListener('blur', () => (0,_ImportExport__WEBPACK_IMPORTED_MODULE_19__.updateSaveString)());
    document.getElementById('savegame').addEventListener('click', () => (0,_Synergism__WEBPACK_IMPORTED_MODULE_2__.saveSynergy)(true));
    document.getElementById('deleteGame').addEventListener('click', () => (0,_ImportExport__WEBPACK_IMPORTED_MODULE_19__.resetGame)());
    document.getElementById('promocodes').addEventListener('click', () => (0,_ImportExport__WEBPACK_IMPORTED_MODULE_19__.promocodes)());
    document.getElementById('historyTogglePerSecondButton').addEventListener('click', () => (0,_History__WEBPACK_IMPORTED_MODULE_20__.resetHistoryTogglePerSecond)());
    document.getElementById('resetShopUpgrades').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.resetShopUpgrades)());
    document.getElementById('toggleConfirmShop').addEventListener('click', () => (0,_Toggles__WEBPACK_IMPORTED_MODULE_0__.toggleShopConfirmation)());
    document.getElementById('offeringPotions').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("offeringPotion"));
    document.getElementById('offeringpotionowned').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("offeringPotion"));
    document.getElementById('buyofferingpotion').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("offeringPotion"));
    document.getElementById('useofferingpotion').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("offeringPotion"));
    document.getElementById('buyofferingpotion').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("offeringPotion"));
    document.getElementById('useofferingpotion').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.useConsumable)("offeringPotion"));
    document.getElementById('obtainiumPotions').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("obtainiumPotion"));
    document.getElementById('obtainiumpotionowned').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("obtainiumPotion"));
    document.getElementById('buyobtainiumpotion').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("obtainiumPotion"));
    document.getElementById('useobtainiumpotion').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("obtainiumPotion"));
    document.getElementById('buyobtainiumpotion').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("obtainiumPotion"));
    document.getElementById('useobtainiumpotion').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.useConsumable)("obtainiumPotion"));
    document.getElementById('OfferingEX').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("offeringEX"));
    document.getElementById('OfferingAuto').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("offeringAuto"));
    document.getElementById('ObtainiumEX').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("obtainiumEX"));
    document.getElementById('ObtainiumAuto').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("obtainiumAuto"));
    document.getElementById('InstChallenge').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("instantChallenge"));
    document.getElementById('AntSpd').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("antSpeed"));
    document.getElementById('CashUpgrade').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("cashGrab"));
    document.getElementById('CashTalisman').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("shopTalisman"));
    document.getElementById('SeasonPass').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("seasonPass"));
    document.getElementById('ShopChallenge').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("challengeExtension"));
    document.getElementById('ShopTome').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("challengeTome"));
    document.getElementById('CubeQuark').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("cubeToQuark"));
    document.getElementById('TesseractQuark').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("tesseractToQuark"));
    document.getElementById('HypercubeQuark').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("hypercubeToQuark"));
    document.getElementById('offeringtimerlevel').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("offeringEX"));
    document.getElementById('offeringautolevel').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("offeringAuto"));
    document.getElementById('obtainiumtimerlevel').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("obtainiumEX"));
    document.getElementById('obtainiumautolevel').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("obtainiumAuto"));
    document.getElementById('instantchallenge').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("instantChallenge"));
    document.getElementById('antspeed').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("antSpeed"));
    document.getElementById('cashgrab').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("cashGrab"));
    document.getElementById('shoptalisman').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("shopTalisman"));
    document.getElementById('seasonPassLevel').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("seasonPass"));
    document.getElementById('challengeUpgradeLevel').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("challengeExtension"));
    document.getElementById('challenge10TomeLevel').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("challengeTome"));
    document.getElementById('cubeToQuark').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("cubeToQuark"));
    document.getElementById('tesseractToQuark').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("tesseractToQuark"));
    document.getElementById('hypercubeToQuark').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("hypercubeToQuark"));
    document.getElementById('offeringtimerbutton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("offeringEX"));
    document.getElementById('offeringtimerbutton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("offeringEX"));
    document.getElementById('offeringautobutton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("offeringAuto"));
    document.getElementById('offeringautobutton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("offeringAuto"));
    document.getElementById('obtainiumtimerbutton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("obtainiumEX"));
    document.getElementById('obtainiumtimerbutton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("obtainiumEX"));
    document.getElementById('obtainiumautobutton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("obtainiumAuto"));
    document.getElementById('obtainiumautobutton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("obtainiumAuto"));
    document.getElementById('instantchallengebutton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("instantChallenge"));
    document.getElementById('instantchallengebutton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("instantChallenge"));
    document.getElementById('antspeedbutton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("antSpeed"));
    document.getElementById('antspeedbutton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("antSpeed"));
    document.getElementById('cashgrabbutton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("cashGrab"));
    document.getElementById('cashgrabbutton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("cashGrab"));
    document.getElementById('shoptalismanbutton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("shopTalisman"));
    document.getElementById('shoptalismanbutton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("shopTalisman"));
    document.getElementById('seasonPassButton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("seasonPass"));
    document.getElementById('seasonPassButton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("seasonPass"));
    document.getElementById('challengeUpgradeButton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("challengeExtension"));
    document.getElementById('challengeUpgradeButton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("challengeExtension"));
    document.getElementById('challenge10TomeButton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("challengeTome"));
    document.getElementById('challenge10TomeButton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("challengeTome"));
    document.getElementById('cubeToQuarkButton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("cubeToQuark"));
    document.getElementById('cubeToQuarkButton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("cubeToQuark"));
    document.getElementById('tesseractToQuarkButton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("tesseractToQuark"));
    document.getElementById('tesseractToQuarkButton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("tesseractToQuark"));
    document.getElementById('hypercubeToQuarkButton').addEventListener('mouseover', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.shopDescriptions)("hypercubeToQuark"));
    document.getElementById('hypercubeToQuarkButton').addEventListener('click', () => (0,_Shop__WEBPACK_IMPORTED_MODULE_21__.buyShopUpgrades)("hypercubeToQuark"));
    document.getElementById('importfile').addEventListener('change', (e) => __awaiter(void 0, void 0, void 0, function* () {
        const { files } = e.target;
        const saveItem = files.item(0);
        const save = yield saveItem.text();
        return (0,_ImportExport__WEBPACK_IMPORTED_MODULE_19__.importSynergism)(save);
    }));
};


/***/ }),
/* 33 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "platUpgradeBaseCosts": () => /* binding */ platUpgradeBaseCosts,
/* harmony export */   "createPlatonicDescription": () => /* binding */ createPlatonicDescription,
/* harmony export */   "buyPlatonicUpgrades": () => /* binding */ buyPlatonicUpgrades
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12);


const platonicUpgradeDesc = {
    1: '+0.0075% cubes per corruption level per level!',
    2: '+0.015% tesseracts per corruption level per level!',
    3: '+0.045% hypercubes per corruption level per level!',
    4: 'Gain +2% platonic cubes per level if >2.5 Trillion Score!',
    5: 'C10 Exponent: 1.035 --> 1.0375, Constant tax exponent +0.10, 2x faster constant production, +5/+3 Challenge caps, +100% Obtainium/Offerings, ^1.10 coin gain in C15!',
    6: 'Raises corruption 1 and 2 exponent ^(1 + level/30), capacity of ^1 on Mult/Accel.',
    7: 'Raises speed below 1x to the power of ^(1 - level/30).',
    8: 'Divides Hyperchallenged by (1 + 0.4 * level), with a minimum 1x challenge req. multiplier!',
    9: 'Gain more obtainium with the illiteracy corruption, up until 1e100 obtainium!',
    10: 'C10 Exponent: 1.0375 --> 1.04, Const. tax exponent +0.20 and 10x faster constant production, +5/+3 Challenge caps, +250% Obtainium and Offerings, +100% Cubes/Tesseracts/Hypercubes/Platonics for 5T/7.5T/10T/20T score. ^1.25 ant exponent in C15!',
    11: 'With this upgrade, you will gain diamonds equal to particle gain!',
    12: 'Gain (1 + lvl/100)x ant multiplier per challenge completion, ignoring corruptions to ants.',
    13: 'Effect of Drought is raised to the power of 0.5.',
    14: 'Gain a small coin exponent dependent on your coins, up until 1e4T coins.',
    15: 'I suppose that, after all, we all are Everywhere at the End of Time.'
};
const platUpgradeBaseCosts = {
    1: {
        obtainium: 1e70,
        offerings: 1e45,
        cubes: 1e13,
        tesseracts: 1e6,
        hypercubes: 1e5,
        platonics: 1e4,
        abyssals: 0,
        maxLevel: 100
    },
    2: {
        obtainium: 3e70,
        offerings: 2e45,
        cubes: 1e11,
        tesseracts: 1e8,
        hypercubes: 1e5,
        platonics: 1e4,
        abyssals: 0,
        maxLevel: 100
    },
    3: {
        obtainium: 1e71,
        offerings: 4e45,
        cubes: 1e11,
        tesseracts: 1e6,
        hypercubes: 1e7,
        platonics: 1e4,
        abyssals: 0,
        maxLevel: 100
    },
    4: {
        obtainium: 4e71,
        offerings: 1e46,
        cubes: 1e12,
        tesseracts: 1e7,
        hypercubes: 1e6,
        platonics: 1e6,
        abyssals: 0,
        maxLevel: 100
    },
    5: {
        obtainium: 1e80,
        offerings: 1e60,
        cubes: 1e14,
        tesseracts: 1e9,
        hypercubes: 1e8,
        platonics: 1e7,
        abyssals: 0,
        maxLevel: 1
    },
    6: {
        obtainium: 1e82,
        offerings: 1e61,
        cubes: 1e15,
        tesseracts: 1e9,
        hypercubes: 1e8,
        platonics: 1e7,
        abyssals: 0,
        maxLevel: 10
    },
    7: {
        obtainium: 1e84,
        offerings: 3e62,
        cubes: 2e15,
        tesseracts: 2e9,
        hypercubes: 2e8,
        platonics: 1.5e7,
        abyssals: 0,
        maxLevel: 15
    },
    8: {
        obtainium: 1e87,
        offerings: 1e64,
        cubes: 4e15,
        tesseracts: 4e9,
        hypercubes: 4e8,
        platonics: 3e7,
        abyssals: 0,
        maxLevel: 5
    },
    9: {
        obtainium: 1e90,
        offerings: 1e66,
        cubes: 1e16,
        tesseracts: 1e10,
        hypercubes: 1e9,
        platonics: 5e7,
        abyssals: 0,
        maxLevel: 1
    },
    10: {
        obtainium: 1e93,
        offerings: 1e68,
        cubes: 1e18,
        tesseracts: 1e12,
        hypercubes: 1e11,
        platonics: 1e9,
        abyssals: 0,
        maxLevel: 1
    },
    11: {
        obtainium: 2e96,
        offerings: 1e70,
        cubes: 2e17,
        tesseracts: 2e11,
        hypercubes: 2e10,
        platonics: 2e8,
        abyssals: 0,
        maxLevel: 1
    },
    12: {
        obtainium: 1e100,
        offerings: 1e72,
        cubes: 1e18,
        tesseracts: 1e12,
        hypercubes: 1e11,
        platonics: 1e9,
        abyssals: 0,
        maxLevel: 10
    },
    13: {
        obtainium: 2e104,
        offerings: 1e74,
        cubes: 2e19,
        tesseracts: 4e12,
        hypercubes: 4e11,
        platonics: 4e9,
        abyssals: 0,
        maxLevel: 1
    },
    14: {
        obtainium: 1e108,
        offerings: 1e77,
        cubes: 4e20,
        tesseracts: 1e13,
        hypercubes: 1e12,
        platonics: 1e10,
        abyssals: 0,
        maxLevel: 1
    },
    15: {
        obtainium: 1e115,
        offerings: 1e80,
        cubes: 1e23,
        tesseracts: 1e15,
        hypercubes: 1e14,
        platonics: 1e12,
        abyssals: 1,
        maxLevel: 1
    }
};
const checkPlatonicUpgrade = (index) => {
    let checksum = 0;
    const resources = ['obtainium', 'offerings', 'cubes', 'tesseracts', 'hypercubes', 'platonics', 'abyssals'];
    const resourceNames = ['researchPoints', 'runeshards', 'wowCubes', 'wowTesseracts', 'wowHypercubes', 'wowPlatonicCubes', 'wowAbyssals'];
    const checks = {
        obtainium: false,
        offerings: false,
        cubes: false,
        tesseracts: false,
        hypercubes: false,
        platonics: false,
        abyssals: false,
        canBuy: false,
    };
    for (let i = 0; i < resources.length; i++) {
        if (platUpgradeBaseCosts[index][resources[i]] <= _Synergism__WEBPACK_IMPORTED_MODULE_0__.player[resourceNames[i]]) {
            checksum++;
            checks[resources[i]] = true;
        }
    }
    if (checksum === resources.length && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[index] < platUpgradeBaseCosts[index].maxLevel) {
        checks.canBuy = true;
    }
    return checks;
};
const createPlatonicDescription = (index) => {
    let maxLevelAppend = "";
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[index] === platUpgradeBaseCosts[index].maxLevel) {
        maxLevelAppend = " [MAX]";
    }
    const resourceCheck = checkPlatonicUpgrade(index);
    document.getElementById('platonicUpgradeDescription').textContent = platonicUpgradeDesc[index];
    document.getElementById('platonicUpgradeLevel').textContent = "Level: " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[index]) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(platUpgradeBaseCosts[index].maxLevel) + maxLevelAppend;
    document.getElementById('platonicOfferingCost').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(platUpgradeBaseCosts[index].offerings) + " Offerings";
    document.getElementById('platonicObtainiumCost').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(platUpgradeBaseCosts[index].obtainium) + " Obtainium";
    document.getElementById('platonicCubeCost').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowCubes) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(platUpgradeBaseCosts[index].cubes) + " Wow! Cubes";
    document.getElementById('platonicTesseractCost').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowTesseracts) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(platUpgradeBaseCosts[index].tesseracts) + " Wow! Tesseracts";
    document.getElementById('platonicHypercubeCost').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowHypercubes) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(platUpgradeBaseCosts[index].hypercubes) + " Wow! Hypercubes";
    document.getElementById('platonicPlatonicCost').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowPlatonicCubes) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(platUpgradeBaseCosts[index].platonics) + " Platonic! Cubes";
    document.getElementById('platonicHepteractCost').textContent = (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowAbyssals) + "/" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(platUpgradeBaseCosts[index].abyssals) + " Hepteracts of the Abyss";
    resourceCheck.offerings ?
        document.getElementById('platonicOfferingCost').style.color = "lime" :
        document.getElementById('platonicOfferingCost').style.color = "crimson";
    resourceCheck.obtainium ?
        document.getElementById('platonicObtainiumCost').style.color = "lime" :
        document.getElementById('platonicObtainiumCost').style.color = "crimson";
    resourceCheck.cubes ?
        document.getElementById('platonicCubeCost').style.color = "lime" :
        document.getElementById('platonicCubeCost').style.color = "crimson";
    resourceCheck.tesseracts ?
        document.getElementById('platonicTesseractCost').style.color = "lime" :
        document.getElementById('platonicTesseractCost').style.color = "crimson";
    resourceCheck.hypercubes ?
        document.getElementById('platonicHypercubeCost').style.color = "lime" :
        document.getElementById('platonicHypercubeCost').style.color = "crimson";
    resourceCheck.platonics ?
        document.getElementById('platonicPlatonicCost').style.color = "lime" :
        document.getElementById('platonicPlatonicCost').style.color = "crimson";
    resourceCheck.abyssals ?
        document.getElementById('platonicHepteractCost').style.color = "lime" :
        document.getElementById('platonicHepteractCost').style.color = "crimson";
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[index] < platUpgradeBaseCosts[index].maxLevel) {
        document.getElementById('platonicUpgradeLevel').style.color = 'cyan';
        resourceCheck.canBuy ?
            (document.getElementById('platonicCanBuy').style.color = "gold", document.getElementById('platonicCanBuy').textContent = "===Affordable! Click to buy!===") :
            (document.getElementById('platonicCanBuy').style.color = "crimson", document.getElementById('platonicCanBuy').textContent = "===You cannot afford this!===");
    }
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[index] === platUpgradeBaseCosts[index].maxLevel) {
        document.getElementById('platonicUpgradeLevel').style.color = 'gold';
        document.getElementById('platonicCanBuy').style.color = "orchid";
        document.getElementById('platonicCanBuy').textContent = "===Maxed===";
    }
};
const buyPlatonicUpgrades = (index) => {
    const resourceCheck = checkPlatonicUpgrade(index);
    if (resourceCheck.canBuy) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[index] += 1;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints -= platUpgradeBaseCosts[index].obtainium;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards -= platUpgradeBaseCosts[index].offerings;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowCubes -= platUpgradeBaseCosts[index].cubes;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowTesseracts -= platUpgradeBaseCosts[index].tesseracts;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowHypercubes -= platUpgradeBaseCosts[index].hypercubes;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowPlatonicCubes -= platUpgradeBaseCosts[index].platonics;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.wowAbyssals -= platUpgradeBaseCosts[index].abyssals;
        _Events__WEBPACK_IMPORTED_MODULE_1__.Synergism.emit('boughtPlatonicUpgrade', platUpgradeBaseCosts[index]);
    }
    createPlatonicDescription(index);
};


/***/ }),
/* 34 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateSaveString": () => /* binding */ updateSaveString,
/* harmony export */   "exportSynergism": () => /* binding */ exportSynergism,
/* harmony export */   "resetGame": () => /* binding */ resetGame,
/* harmony export */   "importSynergism": () => /* binding */ importSynergism,
/* harmony export */   "promocodes": () => /* binding */ promocodes
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Utility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lz_string__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Achievements__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(11);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






const format24 = new Intl.DateTimeFormat("EN-GB", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    hour12: false,
    minute: "2-digit",
    second: "2-digit"
});
const format12 = new Intl.DateTimeFormat("EN-GB", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    hour12: true,
    minute: "2-digit",
    second: "2-digit"
});
const getRealTime = (use12 = false) => {
    const format = use12 ? format12 : format24;
    const dateParts = Object.assign({}, ...format
        .formatToParts(new Date())
        .filter((x) => x.type !== "literal")
        .map(p => ({ [p.type]: p.value })));
    const period = use12 ? ` ${dateParts.dayPeriod.toUpperCase()}` : '';
    return `${dateParts.year}-${dateParts.month}-${dateParts.day} ${dateParts.hour}_${dateParts.minute}_${dateParts.second}${period}`;
};
const updateSaveString = () => {
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.saveString = (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.getElementById)("saveStringInput").value;
};
const saveFilename = () => {
    const s = _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.saveString;
    const t = s.replace(/\$(.*?)\$/g, (_, b) => {
        switch (b) {
            case 'VERSION': return `v${_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.version}`;
            case 'TIME': return getRealTime();
            case 'TIME12': return getRealTime(true);
        }
    });
    return t;
};
const exportSynergism = () => __awaiter(void 0, void 0, void 0, function* () {
    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offlinetick = Date.now();
    if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.quarkstimer >= 3600) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += (Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.quarkstimer / 3600) * (1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[99] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[100] + _Variables__WEBPACK_IMPORTED_MODULE_4__.Globals.talisman7Quarks + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[125] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[180] + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researches[195]));
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.quarkstimer = (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.quarkstimer % 3600);
    }
    document.getElementById('settingstab').setAttribute('full', '0');
    (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.saveSynergy)();
    const toClipboard = (0,_Utility__WEBPACK_IMPORTED_MODULE_1__.getElementById)('saveType').checked;
    const save = localStorage.getItem('Synergysave2');
    if ('clipboard' in navigator && toClipboard) {
        yield navigator.clipboard.writeText(save)
            .catch(e => console.error(e));
    }
    else if (toClipboard) {
        const textArea = document.createElement('textarea');
        textArea.value = save;
        textArea.setAttribute('style', 'top: 0; left: 0; position: fixed;');
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        try {
            document.execCommand('copy');
        }
        catch (_) {
        }
        document.body.removeChild(textArea);
    }
    else {
        const a = document.createElement('a');
        a.setAttribute('href', 'data:text/plain;charset=utf-8,' + save);
        a.setAttribute('download', saveFilename());
        a.setAttribute('id', 'downloadSave');
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }
    document.getElementById("exportinfo").textContent = toClipboard
        ? 'Copied save to your clipboard!'
        : 'Savefile copied to file!';
});
const resetGame = () => {
    const a = window.crypto.getRandomValues(new Uint16Array(1))[0] % 16;
    const b = window.crypto.getRandomValues(new Uint16Array(1))[0] % 16;
    if (+prompt(`Answer the question to confirm you'd like to reset: what is ${a}+${b}? (Hint: ${a + b})`) !== a + b) {
        return;
    }
    const hold = Object.assign({}, _Synergism__WEBPACK_IMPORTED_MODULE_0__.blankSave, {
        codes: Array.from(_Synergism__WEBPACK_IMPORTED_MODULE_0__.blankSave.codes)
    });
    importSynergism(btoa(JSON.stringify(hold)));
};
const importSynergism = (input) => {
    const d = lz_string__WEBPACK_IMPORTED_MODULE_2___default().decompressFromBase64(input);
    const f = d ? JSON.parse(d) : JSON.parse(atob(input));
    if ((f.exporttest === "YES!" || f.exporttest === true) ||
        (f.exporttest === false && _Synergism__WEBPACK_IMPORTED_MODULE_0__.isTesting)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.intervalHold.forEach(_Synergism__WEBPACK_IMPORTED_MODULE_0__.clearInt);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.intervalHold.length = 0;
        localStorage.setItem('Synergysave2', btoa(JSON.stringify(f)));
        (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.constantIntervals)();
        (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.createTimer)();
        (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.loadSynergy)();
    }
};
const promocodes = () => {
    const input = prompt("Got a code? Great! Enter it in (CaSe SeNsItIvE).");
    const el = document.getElementById("promocodeinfo");
    if (input === "synergism2020" && !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.codes.get(1)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.codes.set(1, true);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards += 25;
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += 50;
        el.textContent = "Promo Code 'synergism2020' Applied! +25 Offerings, +50 Quarks";
    }
    else if (input === ":unsmith:" && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[243] < 1) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(243);
        el.textContent = "It's Spaghetti Time! [Awarded an achievement!!!]";
    }
    else if (input === ":antismith:" && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.achievements[244] < 1) {
        (0,_Achievements__WEBPACK_IMPORTED_MODULE_3__.achievementaward)(244);
        el.textContent = "Hey, isn't this just a reference to Antimatter Dimensions? Shh. [Awarded an achievement!!!]";
    }
    else if (input === 'Khafra' && !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.codes.get(26)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.codes.set(26, true);
        const quarks = Math.floor(Math.random() * (400 - 100 + 1) + 100);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += quarks;
        el.textContent = 'Khafra has blessed you with ' + quarks + ' quarks!';
    }
    else if (input === 'november13' && !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.codes.get(27)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.codes.set(27, true);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += 300;
        el.textContent = 'Be careful, on friday the thirteenth! [+300 Quarks]';
    }
    else if (input === '2million' && !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.codes.get(28)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.codes.set(28, true);
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += 700;
        el.textContent = 'Thank you for 2 million plays on kongregate!';
    }
    else if (input === 'version2.1.0' && !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.codes.get(29)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.codes.set(29, true);
        let quarkCounter = 250;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[11] > 0 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[11] > 0) {
            quarkCounter += 250;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[12] > 0 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[12] > 0) {
            quarkCounter += 250;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[13] > 0 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[13] > 0) {
            quarkCounter += 500;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[14] > 0 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[14] > 0) {
            quarkCounter += 500;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[13] >= 18 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[13] >= 18) {
            quarkCounter += 750;
        }
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.challengecompletions[13] >= 22 || _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.highestchallengecompletions[13] >= 22) {
            quarkCounter += 1;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += quarkCounter;
        el.textContent = 'Welcome to the Abyss! Based on your progress, you gained ' + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(quarkCounter) + " Quarks.";
    }
    else if (input === 'add') {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.rngCode >= (Date.now() - 3600000)) {
            el.textContent = `You already used this promocode in the last hour!`;
            return;
        }
        const amount = window.crypto.getRandomValues(new Uint16Array(1))[0] % 16;
        const first = window.crypto.getRandomValues(new Uint8Array(1))[0];
        const second = window.crypto.getRandomValues(new Uint8Array(1))[0];
        const addPrompt = prompt(`What is ${first} + ${second}?`);
        if (first + second === +addPrompt) {
            _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += amount;
            el.textContent = `You were awarded ${amount} quarks! Wait an hour to use this code again!`;
        }
        else {
            el.textContent = `You guessed ${addPrompt}, but the answer was ${first + second}. Try again in an hour!`;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.rngCode = Date.now();
    }
    else if (input === 'holiday' && !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.codes.get(31)) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.codes.set(31, true);
        let quarkCounter = 2500;
        if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.platonicUpgrades[5] > 0) {
            quarkCounter += 1;
        }
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += quarkCounter;
        el.textContent = 'Happy holidays from Platonic, to you and yours! A gift of ' + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(quarkCounter) + " Quarks, just for you.";
    }
    else {
        el.textContent = "Your code is either invalid or already used. Try again!";
    }
    (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.saveSynergy)();
    _Events__WEBPACK_IMPORTED_MODULE_5__.Synergism.emit('promocode', input);
    setTimeout(function () {
        el.textContent = '';
    }, 15000);
};


/***/ }),
/* 35 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shopDescriptions": () => /* binding */ shopDescriptions,
/* harmony export */   "buyShopUpgrades": () => /* binding */ buyShopUpgrades,
/* harmony export */   "useConsumable": () => /* binding */ useConsumable,
/* harmony export */   "resetShopUpgrades": () => /* binding */ resetShopUpgrades
/* harmony export */ });
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _UpdateHTML__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);




const offerconsumedesc = "Instantly gain 2 real life hours of Offerings, based on your all time best Offerings/sec and speed acceleration!";
const obtainiumconsumedesc = "Instantly gain 2 real life hours of Obtainium, based on your all time best Obtainium/sec and speed acceleration!";
const offertimerdesc = "Gain +4% more offerings from all sources!";
const offerautodesc = "Automatically pour Offerings into a rune. 1st level unlocks feature, and each level increases Offering gain by 2%. Every second, 2^(Level) levels worth of offerings are spent. [First Level Cannot be refunded!]";
const obtainiumtimerdesc = "Gain +4% more obtainium from all sources!";
const obtainiumautodesc = "Automatically pour Obtainium into a research. 1st level unlocks feature, and each level increases Obtainium gain by 2%. Every reincarnation, dump all Obtainium into research until maxed. [First Level Cannot be Refunded!]";
const instantchallengedesc = "T and R challenges don't cause resets if retry is enabled and gain up to 10 completions per tick. Addtionally, instantly gain T challenge completions up to highest completed when exiting R challenges. [Cannot be Refunded!]";
const cashgrabdesc = "This is a cash grab but it gives a couple cool stats. +1% production per level to Offerings and Obtainium.";
const antspeeddesc = "Each level gives a 1.125x speed multiplier to all Ant tiers' production! Short and simple.";
const shoptalismandesc = "Permanently unlock a Shop talisman! [Warning: you can't refund this and this is VERY expensive to level. Be sure you want to buy it!]";
const challengeExtDesc = "Using some amazing trick, you manage to increase your Reincarnation Challenge cap by 2 for each level! [Cannot be Refunded!]";
const challenge10TomeDesc = "The extended cut: This fifth forgotten tome gives you an additional 20 Million exponent reduction on the Challenge 10 requirement per level.";
const seasonPassDesc = "Wow! Cubes is giving you a deal: Buy this totally fair Season Pass and gain +1.5% cubes and tesseracts per level when you ascend!";
const cubeToQuarkDesc = "Instead of a daily cap of 25 Quarks by opening Wow! Cubes, how about 100? This adds 75 to the daily cap! [Cannot be Refunded!]";
const tesseractToQuarkDesc = "Instead of a daily cap of 25 Quarks by opening Wow! Tesseracts, how about 100? This adds 75 to the daily cap! [Cannot be Refunded!]";
const hypercubeToQuarkDesc = "Instead of a daily cap of 25 Quarks by opening Wow! Hypercubes, how about 100? This adds 75 to the daily cap! [Cannot be Refunded!]";
const shopDescriptions = (input) => {
    const rofl = document.getElementById("quarkdescription");
    const lmao = document.getElementById("quarkcost");
    const lol = document.getElementById("quarkeffect");
    switch (input) {
        case "offeringPotion":
            rofl.textContent = offerconsumedesc;
            lmao.textContent = "Cost: " + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.offerPotion + " Quarks.";
            lol.textContent = "Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((7200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offeringpersecond * (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateTimeAcceleration)()), 0, true) + " Offerings.";
            break;
        case "obtainiumPotion":
            rofl.textContent = obtainiumconsumedesc;
            lmao.textContent = "Cost: " + _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.obtainiumPotion + " Quarks.";
            lol.textContent = "Gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)((7200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxobtainiumpersecond * (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateTimeAcceleration)()), 0, true) + " Obtainium.";
            break;
        case "offeringEX":
            rofl.textContent = offertimerdesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.offerTimer + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringTimerLevel) + " Quarks.";
            lol.textContent = "CURRENT Effect: You will gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringTimerLevel, 2, true) + "% more Offerings!";
            break;
        case "offeringAuto":
            rofl.textContent = offerautodesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.offerAuto + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel) + " Quarks.";
            lol.textContent = "CURRENT Effect: Per 10 seconds, pour " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.pow(2, 1 + _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel)) + " Offerings. +" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel, 2) + "% Offerings.";
            break;
        case "obtainiumEX":
            rofl.textContent = obtainiumtimerdesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.obtainiumTimer + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumTimerLevel) + " Quarks.";
            lol.textContent = "CURRENT Effect: You will gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(4 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumTimerLevel, 2, true) + "% more Obtainium!";
            break;
        case "obtainiumAuto":
            rofl.textContent = obtainiumautodesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.obtainiumAuto + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumAutoLevel) + " Quarks.";
            lol.textContent = "CURRENT Effect: Try to upgrade research each reincarnation, and gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumAutoLevel * 2, 2) + "% more Obtainium.";
            break;
        case "instantChallenge":
            rofl.textContent = instantchallengedesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.instantChallenge) + " Quarks.";
            lol.textContent = "CURRENT Effect: Even in a premium shop it's kinda obvious, right?";
            break;
        case "antSpeed":
            rofl.textContent = antspeeddesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.antSpeed + 25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.antSpeedLevel) + " Quarks.";
            lol.textContent = "CURRENT Effect: All Ants' Speed x" + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(Math.pow(1.125, _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.antSpeedLevel), 2);
            break;
        case "cashGrab":
            rofl.textContent = cashgrabdesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.cashGrab + 40 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cashGrabLevel) + " Quarks.";
            lol.textContent = "CURRENT Effect: You will gain " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cashGrabLevel, 2) + "% more Obtainium and Offerings!";
            break;
        case "shopTalisman":
            rofl.textContent = shoptalismandesc;
            lmao.textContent = "Cost: " + (1500) + " Quarks.";
            lol.textContent = "CURRENT Effect: Even in a premium shop it's kinda obvious, right?";
            break;
        case "seasonPass":
            rofl.textContent = seasonPassDesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.seasonPass + 75 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.seasonPassLevel) + " Quarks.";
            lol.textContent = "CURRENT Effect: Ascensions give " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(3 / 2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.seasonPassLevel) + "% more Wow! Cubes and Tesseracts.";
            break;
        case "challengeExtension":
            rofl.textContent = challengeExtDesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.challengeExtension + 250 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challengeExtension) + " Quarks.";
            lol.textContent = "CURRENT Effect: Reincarnation Challenges may be completed an additional " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(2 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challengeExtension) + " times.";
            break;
        case "challengeTome":
            rofl.textContent = challenge10TomeDesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.challenge10Upgrade + 250 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challenge10Tomes) + " Quarks.";
            lol.textContent = "CURRENT Effect: Challenge 10 Exponent Requirement reduced by " + (0,_Synergism__WEBPACK_IMPORTED_MODULE_0__.format)(20 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challenge10Tomes) + " Million.";
            break;
        case "cubeToQuark":
            rofl.textContent = cubeToQuarkDesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.cubeToQuark) + " Quarks.";
            lol.textContent = "CURRENT Effect: Even in a premium shop it's kinda obvious, right?";
            break;
        case "tesseractToQuark":
            rofl.textContent = tesseractToQuarkDesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.tesseractToQuark) + " Quarks.";
            lol.textContent = "CURRENT Effect: Even in a premium shop it's kinda obvious, right?";
            break;
        case "hypercubeToQuark":
            rofl.textContent = hypercubeToQuarkDesc;
            lmao.textContent = "Cost: " + (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.hypercubeToQuark) + " Quarks.";
            lol.textContent = "CURRENT Effect: Even in a premium shop it's kinda obvious, right?";
            break;
    }
};
const buyShopUpgrades = (input) => {
    let p = true;
    if (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopConfirmation) {
        p = confirm("Are you sure of your purchase?");
    }
    if (p) {
        switch (input) {
            case "offeringPotion":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.offerPotion) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= 100;
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringPotion += 1;
                }
                break;
            case "obtainiumPotion":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.obtainiumPotion) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= 100;
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumPotion += 1;
                }
                break;
            case "offeringEX":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.offerTimer + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringTimerLevel) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringTimerLevel < 100) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.offerTimer + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringTimerLevel);
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringTimerLevel += 1;
                }
                break;
            case "offeringAuto":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.offerAuto + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel < 100) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.offerAuto + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel);
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel += 1;
                }
                break;
            case "obtainiumEX":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.obtainiumTimer + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumTimerLevel) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumTimerLevel < 100) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.obtainiumTimer + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumTimerLevel);
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumTimerLevel += 1;
                }
                break;
            case "obtainiumAuto":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.obtainiumAuto + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumAutoLevel) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumAutoLevel < 100) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.obtainiumAuto + 10 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumAutoLevel);
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumAutoLevel += 1;
                }
                break;
            case "instantChallenge":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.instantChallenge && !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.instantChallengeBought) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= 300;
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.instantChallengeBought = true;
                }
                break;
            case "antSpeed":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.antSpeed + 25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.antSpeedLevel) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.antSpeedLevel < 100) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.antSpeed + 25 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.antSpeedLevel);
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.antSpeedLevel += 1;
                }
                break;
            case "cashGrab":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.cashGrab + 40 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cashGrabLevel) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cashGrabLevel < 100) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.cashGrab + 40 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cashGrabLevel);
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cashGrabLevel += 1;
                }
                break;
            case "shopTalisman":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= 1500 && !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.talismanBought) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= 1500;
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.talismanBought = true;
                }
                break;
            case "seasonPass":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.seasonPass + 75 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.seasonPassLevel) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.seasonPassLevel < 100) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.seasonPass + 75 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.seasonPassLevel);
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.seasonPassLevel += 1;
                }
                break;
            case "challengeExtension":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.challengeExtension + 250 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challengeExtension) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challengeExtension < 5) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.challengeExtension + 250 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challengeExtension);
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challengeExtension += 1;
                }
                break;
            case "challengeTome":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.challenge10Upgrade + 250 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challenge10Tomes) && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challenge10Tomes < 15) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.challenge10Upgrade + 250 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challenge10Tomes);
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challenge10Tomes += 1;
                }
                break;
            case "cubeToQuark":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.cubeToQuark) && !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cubeToQuarkBought) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.cubeToQuark);
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cubeToQuarkBought = true;
                }
                break;
            case "tesseractToQuark":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.tesseractToQuark) && !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.tesseractToQuarkBought) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.tesseractToQuark);
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.tesseractToQuarkBought = true;
                }
                break;
            case "hypercubeToQuark":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.hypercubeToQuark) && !_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.hypercubeToQuarkBought) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= (_Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopBaseCosts.hypercubeToQuark);
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.hypercubeToQuarkBought = true;
                }
                break;
        }
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_2__.revealStuff)();
    }
};
const useConsumable = (input) => {
    const p = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopConfirmation
        ? confirm('Would you like to use this potion?')
        : true;
    if (p) {
        switch (input) {
            case "offeringPotion":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringPotion > 0.5) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringPotion -= 1;
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.runeshards += Math.floor(7200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.offeringpersecond * (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateTimeAcceleration)());
                }
                break;
            case "obtainiumPotion":
                if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumPotion > 0.5) {
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumPotion -= 1;
                    _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.researchPoints += Math.floor(7200 * _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.maxobtainiumpersecond * (0,_Calculate__WEBPACK_IMPORTED_MODULE_3__.calculateTimeAcceleration)());
                }
                break;
        }
    }
};
const resetShopUpgrades = () => {
    const p = _Variables__WEBPACK_IMPORTED_MODULE_1__.Globals.shopConfirmation
        ? confirm("This will refund 100% of your permanent upgrades for an upfront cost of 15 Quarks. Would you like to do this?")
        : true;
    if (p && _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds >= 15) {
        _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds -= 15;
        for (let i = 0; i < 100; i++) {
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringTimerLevel > 0) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringTimerLevel -= 1;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += (150 + 10 * i);
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel > 1) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.offeringAutoLevel -= 1;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += (175 + 10 * i);
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumTimerLevel > 0) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumTimerLevel -= 1;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += (150 + 10 * i);
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumAutoLevel > 1) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.obtainiumAutoLevel -= 1;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += (175 + 10 * i);
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.antSpeedLevel > 0) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.antSpeedLevel -= 1;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += (200 + 25 * i);
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cashGrabLevel > 0) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.cashGrabLevel -= 1;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += (100 + 40 * i);
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challenge10Tomes > 0) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.challenge10Tomes -= 1;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += (500 + 250 * i);
            }
            if (_Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.seasonPassLevel > 0) {
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.shopUpgrades.seasonPassLevel -= 1;
                _Synergism__WEBPACK_IMPORTED_MODULE_0__.player.worlds += (500 + 75 * i);
            }
        }
        (0,_UpdateHTML__WEBPACK_IMPORTED_MODULE_2__.revealStuff)();
    }
};


/***/ }),
/* 36 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "loadPlugins": () => /* binding */ loadPlugins
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const RegisteredPlugins = [
    ['Example Plugin', 'Example.ts'],
    ['Synergism Dashboard', 'Dashboard.ts']
];
const loadPlugins = () => __awaiter(void 0, void 0, void 0, function* () {
    for (const [name, fileName] of RegisteredPlugins) {
        const file = (yield __webpack_require__(37)(`./${fileName}`));
        if (Object.prototype.toString.call(file.main) === '[object AsyncFunction]') {
            yield file.main();
        }
        else {
            file.main();
        }
        console.log(`Loaded plugin ${name}!`);
    }
});


/***/ }),
/* 37 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./Dashboard": [
		39,
		1
	],
	"./Dashboard.ts": [
		39,
		1
	],
	"./Example": [
		40,
		2
	],
	"./Example.ts": [
		40,
		2
	],
	"./Plugins": [
		36
	],
	"./Plugins.ts": [
		36
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(() => {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = () => Object.keys(map);
webpackAsyncContext.id = 37;
module.exports = webpackAsyncContext;

/***/ }),
/* 38 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMaxQuarkTime": () => /* binding */ getMaxQuarkTime,
/* harmony export */   "addTimers": () => /* binding */ addTimers,
/* harmony export */   "checkMaxRunes": () => /* binding */ checkMaxRunes,
/* harmony export */   "automaticTools": () => /* binding */ automaticTools
/* harmony export */ });
/* harmony import */ var _Ants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(25);
/* harmony import */ var _Calculate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var _Runes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(15);
/* harmony import */ var _Synergism__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(0);
/* harmony import */ var _Variables__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);





const getMaxQuarkTime = () => {
    let time = 90000;
    time += 45000 * _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.researches[195];
    return time;
};
const addTimers = (input, time) => {
    const timeMultiplier = (input === "ascension" || input === "quarks") ? 1 : (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateTimeAcceleration)();
    switch (input) {
        case "prestige":
            _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.prestigecounter += time * timeMultiplier;
            break;
        case "transcension":
            _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.transcendcounter += time * timeMultiplier;
            break;
        case "reincarnation":
            _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.reincarnationcounter += time * timeMultiplier;
            break;
        case "ascension":
            _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.ascensionCounter += time * timeMultiplier;
            break;
        case "quarks":
            const maxQuarkTimer = getMaxQuarkTime();
            _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.quarkstimer += time * timeMultiplier;
            _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.quarkstimer = (_Synergism__WEBPACK_IMPORTED_MODULE_3__.default.quarkstimer > maxQuarkTimer) ? maxQuarkTimer : _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.quarkstimer;
            break;
    }
};
const checkMaxRunes = () => {
    let maxxed = 0;
    for (let i = 1; i <= 5; i++) {
        if (_Synergism__WEBPACK_IMPORTED_MODULE_3__.default.runelevels[i - 1] >= (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateMaxRunes)(i))
            maxxed++;
    }
    return maxxed;
};
const automaticTools = (input, time) => {
    const timeMultiplier = (input === "runeSacrifice" || input === "addOfferings") ? 1 : (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateTimeAcceleration)();
    switch (input) {
        case "addObtainium":
            (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateObtainium)();
            const obtainiumGain = (0,_Calculate__WEBPACK_IMPORTED_MODULE_1__.calculateAutomaticObtainium)();
            _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.researchPoints += obtainiumGain * time * timeMultiplier;
            break;
        case "addOfferings":
            _Variables__WEBPACK_IMPORTED_MODULE_4__.Globals.autoOfferingCounter += time;
            _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.runeshards += Math.floor(_Variables__WEBPACK_IMPORTED_MODULE_4__.Globals.autoOfferingCounter);
            _Variables__WEBPACK_IMPORTED_MODULE_4__.Globals.autoOfferingCounter %= 1;
            break;
        case "runeSacrifice":
            _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.sacrificeTimer += time;
            if (_Synergism__WEBPACK_IMPORTED_MODULE_3__.default.sacrificeTimer >= 1) {
                if (_Synergism__WEBPACK_IMPORTED_MODULE_3__.default.cubeUpgrades[20] === 1) {
                    const notMaxed = (5 - checkMaxRunes());
                    if (notMaxed > 0) {
                        const baseAmount = Math.floor(_Synergism__WEBPACK_IMPORTED_MODULE_3__.default.runeshards / notMaxed);
                        for (let i = 0; i < 5; i++) {
                            (0,_Runes__WEBPACK_IMPORTED_MODULE_2__.redeemShards)(i + 1, true, baseAmount);
                        }
                    }
                }
                else {
                    const rune = _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.autoSacrifice;
                    (0,_Runes__WEBPACK_IMPORTED_MODULE_2__.redeemShards)(rune, true, 0);
                }
                _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.sacrificeTimer %= 1;
            }
            break;
        case "antSacrifice":
            _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.antSacrificeTimer += time * timeMultiplier;
            _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.antSacrificeTimerReal += time;
            const antSacrificeTimer = (_Synergism__WEBPACK_IMPORTED_MODULE_3__.default.autoAntSacrificeMode === 2) ?
                _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.antSacrificeTimerReal : _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.antSacrificeTimer;
            if (antSacrificeTimer >= _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.autoAntSacTimer && _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.researches[124] === 1
                && _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.autoAntSacrifice && _Synergism__WEBPACK_IMPORTED_MODULE_3__.default.antPoints.gte("1e40")) {
                (0,_Ants__WEBPACK_IMPORTED_MODULE_0__.sacrificeAnts)(true);
            }
            break;
    }
};


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "synergismofficial:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => fn(event));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// Promise = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			0: 0
/******/ 		};
/******/ 		
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => {
/******/ 								installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 							});
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						} else installedChunks[chunkId] = 0;
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no deferred startup
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0, resolves = [];
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					resolves.push(installedChunks[chunkId][0]);
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			while(resolves.length) {
/******/ 				resolves.shift()();
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunksynergismofficial"] = self["webpackChunksynergismofficial"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 		
/******/ 		// no deferred startup
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__(0);
/******/ })()
;